Ddoc

$(SPEC_S Expressions,

$(HEADERNAV_TOC)

$(P An expression is a sequence of operators and operands that specifies an evaluation.
The syntax, order of evaluation, and semantics of expressions are as follows.)

    $(P Expressions are used to compute values with a resulting type.
        These values can then be assigned,
        tested, or ignored. Expressions can also have side effects.
    )

$(H2 $(LNAME2 definitions-and-terms, Definitions and Terms))

$(DDOC_ANCHOR define-full-expression)$(P $(B Definition) ($(DOUBLEQUOTE Full expression)): For any expression
$(I expr), the full expression of $(I expr) is defined as follows. If $(I expr) parses as a
subexpression of another expression $(I expr$(SUBSCRIPT 1)), then the full expression of $(I expr) is the
full expression of $(I expr$(SUBSCRIPT 1)). Otherwise, $(I expr) is its own full expression.)

$(P Each expression has a unique full expression.)

$(P Example: in the statement `return f() + g() * 2;`, the full expression of `g() * 2` is `f() + g() * 2`, but not the
full expression of `f() + g()` because the latter is not parsed as a subexpression.)

$(P Note: Although the definition is straightforward, a few subtleties exist related to function literals. In the
statement `return (() => x + f())() * g();`, the full expression of `f()` is `x + f()`, not the expression passed
to `return`. This is because the parent of `x + f()` has function literal type, not expression type.)

$(DDOC_ANCHOR define-lvalue)$(P $(B Definition) ($(DOUBLEQUOTE Lvalue)): The following expressions, and no
others, are called lvalue expressions or lvalues:)
$(OL
$(LI `this` inside `struct` and `union` member functions;)
$(LI a variable or the result of the $(I DotIdentifier) grammatical construct `.` (left side may be
missing) when the rightmost side of the dot is a variable,
field (direct or `static`), function name, or invocation of a function that returns by reference;)
$(LI the result of the following expressions:
$(UL
$(LI built-in unary operators `+` (when applied to an lvalue), `*`, `++` (prefix only), `--` (prefix only);)
$(LI built-in indexing operator `[]` (but not the slicing operator);)
$(LI built-in assignment binary operators, i.e. `=`, `+=`, `*=`, `/=`, `%=`, `&=`, `|=`, `^=`, `~=`,
`<<=`, `>>=`, `>>>=`, and `^^=`;)
$(LI the ternary operator $(I e) `?` $(I e$(SUBSCRIPT 1)) `:` $(I e$(SUBSCRIPT 2)) under the following
circumstances:)
$(OL
    $(LI $(I e$(SUBSCRIPT 1)) and $(I e$(SUBSCRIPT 2)) are lvalues of the same type; OR)
    $(LI One of $(I e$(SUBSCRIPT 1)) and $(I e$(SUBSCRIPT 2)) is an lvalue of type `T` and the other has
    and `alias this` converting it to `ref T`;))
$(LI user-defined operators if and only if the function called as a result of lowering returns
by reference;)
$(LI `mixin` expressions if and only if the compilation of the expression resulting from compiling
the argument(s) to `mixin` is an lvalue;)
$(LI `cast(U)` expressions applied to lvalues of type `T` when `T*` is implicitly convertible to `U*`;)
$(LI `cast()` and `cast(`$(I qualifier list)`)` when applied to an lvalue.)
)))

$(DDOC_ANCHOR define-rvalue)$(P $(B Definition) ($(DOUBLEQUOTE Rvalue)): Expressions that are not
lvalues are rvalues.)

$(P Note: Rvalues include all literals, special value keywords such as `__FILE__` and `__LINE__`,
`enum` values, and the result of expressions not defined as lvalues above.)

$(P The built-in address-of operator (unary `&`) may only be applied to lvalues.)

$(DDOC_ANCHOR define-smallest-short-circuit)$(P $(B Definition) ($(DOUBLEQUOTE Smallest
short-circuit expression)): Given an expression $(I expr) that is a subexpression of a full
expression $(I fullexpr), the smallest short-circuit expression, if any, is the shortest
subexpression $(I scexpr) of $(I fullexpr) that is an $(GLINK AndAndExpression) (`&&`) or an
$(GLINK OrOrExpression) (`||`), such that $(I expr) is a subexpression of $(I scexpr).)

Example: in the expression `((f() * 2 && g()) + 1) || h()`, the smallest short-circuit expression
of the subexpression `f() * 2` is `f() * 2 && g()`. In the expression `(f() && g()) + h()`, the
subexpression `h()` has no smallest short-circuit expression.

$(H2 $(LNAME2 order-of-evaluation, Order Of Evaluation))

$(P Built-in prefix unary expressions `++` and `--` are evaluated as if lowered (rewritten) to
assignments as follows: `++expr` becomes `((expr) += 1)`, and `--expr` becomes `((expr) -= 1)`.
Therefore, the result of prefix `++` and `--` is the lvalue after the side effect has been
effected.)

$(P Built-in postfix unary expressions `++` and `--` are evaluated as if lowered (rewritten) to
$(DDSUBLINK spec/expression, function_literals, lambda)
invocations as follows: `expr++` becomes `(ref T x){auto t = x; ++x; return t;}(expr)`, and
`expr--` becomes `(ref T x){auto t = x; --x; return t;}(expr)`. Therefore, the result of postfix
`++` and `--` is an rvalue just before the side effect has been effected.)

$(P Binary expressions except for $(GLINK AssignExpression), $(GLINK OrOrExpression), and
$(GLINK AndAndExpression) are evaluated in lexical order (left-to-right). Example:)

$(SPEC_RUNNABLE_EXAMPLE_RUN
-------------
int i = 2;
i = ++i * i++ + i;
assert(i == 3 * 3 + 4);
-------------
)

$(P $(GLINK OrOrExpression) and $(GLINK AndAndExpression) evaluate their left-hand side argument
first. Then, $(GLINK OrOrExpression) evaluates its right-hand side if and only if its left-hand
side does not evaluate to nonzero. $(GLINK AndAndExpression) evaluates its right-hand side if and
only if its left-hand side evaluates to nonzero.)

$(P $(GLINK ConditionalExpression) evaluates its left-hand side argument
first. Then, if the result is nonzero, the second operand is evaluated. Otherwise, the third operand
is evaluated.)

$(P Calls to functions  with `extern(D)` $(DDSUBLINK spec/attribute, linkage, linkage) (which is
the default linkage) are evaluated in the following order: first, if necessary, the address of the
function to call is evaluated (e.g. in the case of a computed function pointer or delegate). Then,
arguments are evaluated left to right. Finally, transfer is passed to the function. Example:)

$(SPEC_RUNNABLE_EXAMPLE_COMPILE
---
import std.stdio;
void function(int a, int b, int c) fun()
{
    writeln("fun() called");
    static void r(int a, int b, int c) { writeln("callee called"); }
    return &r;
}
int f1() { writeln("f1() called"); return 1; }
int f2() { writeln("f2() called"); return 2; }
int f3(int x) { writeln("f3() called"); return x + 3; }
int f4() { writeln("f4() called"); return 4; }
// evaluates fun() then f1() then f2() then f3() then f4()
// after which control is transferred to the callee
fun()(f1(), f3(f2()), f4());
---
)

    $(IMPLEMENTATION_DEFINED
    $(OL
    $(LI The order of evaluation of the operands of $(GLINK AssignExpression).)
    $(LI The order of evaluation of function arguments for functions with linkage other than `extern (D)`.)
    ))

    $(BEST_PRACTICE Even though the order of evaluation is well-defined, writing code that
    depends on it is rarely recommended.)

$(H2 $(LNAME2 temporary-lifetime, Lifetime of Temporaries))

$(P Expressions and statements may create and/or consume rvalues. Such values are called
$(I temporaries) and do not have a name or a visible scope. Their lifetime is managed automatically
as defined in this section.)

$(P For each evaluation that yields a temporary value, the lifetime of that temporary begins at the
evaluation point, similarly to creation of a usual named value initialized with an expression.)

$(P Termination of lifetime of temporaries does not obey the customary scoping rules and is defined
as follows:)

$(UL
$(LI If:
$(OL $(LI the full expression has a smallest short-circuit expression $(I expr); and)
$(LI the temporary is created on the right-hand side of the `&&` or `||` operator; and)
$(LI the right-hand side is evaluated,))
then temporary destructors are evaluated right after the right-hand side
expression has been evaluated and converted to `bool`. Evaluation of destructors proceeds in
reverse order of construction.)

$(LI For all other cases, the temporaries generated for the purpose of invoking functions are
deferred to the end of the full expression. The order of destruction is inverse to the order of
construction.))

$(P If a subexpression of an expression throws an exception, all temporaries created up to the
evaluation of that subexpression will be destroyed per the rules above. No destructor calls will
be issued for temporaries not yet constructed.)

$(P Note: An intuition behind these rules is that destructors of temporaries are deferred to the end of full
expression and in reverse order of construction, with the exception that the right-hand side of
`&&` and `||` are considered their own full expressions even when part of larger expressions.)

$(P Note: The ternary expression $(I e$(SUBSCRIPT 1) ? e$(SUBSCRIPT 2) : e$(SUBSCRIPT 3)) is not
a special case although it evaluates expressions conditionally: $(I e$(SUBSCRIPT 1)) and one of
$(I e$(SUBSCRIPT 2)) and $(I e$(SUBSCRIPT 3)) may create temporaries. Their destructors are inserted
to the end of the full expression in the reverse order of creation.)

$(P Example:)

$(SPEC_RUNNABLE_EXAMPLE_COMPILE
---
import std.stdio;
struct S
{
    int x;
    this(int n) { x = n; writefln("S(%s)", x); }
    ~this() { writefln("~S(%s)", x); }
}
bool b = (S(1) == S(2) || S(3) != S(4)) && S(5) == S(6);
---
)

The output of the code above is:

$(CONSOLE
S(1)
S(2)
S(3)
S(4)
~S(4)
~S(3)
S(5)
S(6)
~S(6)
~S(5)
~S(2)
~S(1)
)

First, `S(1)` and `S(2)` are evaluated in lexical order. Per the rules, they will be destroyed at
the end of the full expression and in reverse order. The comparison $(D S(1) == S(2)) yields
`false`, so the right-hand side of the `||` is evaluated causing `S(3)` and `S(4)` to be evaluated,
also in lexical order. However, their destruction is not deferred to the end of the full
expression. Instead, `S(4)` and then `S(3)` are destroyed at the end of the `||` expression.
Following their destruction, `S(5)` and `S(6)` are constructed in lexical order. Again they are not
destroyed at the end of the full expression, but right at the end of the `&&` expression.
Consequently, the destruction of `S(6)` and `S(5)` is carried before that of `S(2)` and `S(1)`.

$(H2 $(LEGACY_LNAME2 Expression, expression, Expressions))

$(GRAMMAR
$(GNAME Expression):
    $(GLINK CommaExpression)

$(GNAME CommaExpression):
    $(GLINK AssignExpression)
    $(GSELF CommaExpression) $(D ,) $(GLINK AssignExpression)
)

    $(P The left operand of the $(D ,) is evaluated, then the right operand
        is evaluated. The type of the expression is the type of the right
        operand, and the result is the result of the right operand.
        Using the result of comma expressions isn't allowed.
    )

$(H2 $(LNAME2 assign_expressions, Assign Expressions))

$(GRAMMAR
$(GNAME AssignExpression):
    $(GLINK ConditionalExpression)
    $(GLINK ConditionalExpression) $(D =) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D +=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D -=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D *=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D /=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D %=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D &=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D |=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D ^=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D ~=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D <<=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D >>=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D >>>=) $(GSELF AssignExpression)
    $(GLINK ConditionalExpression) $(D ^^=) $(GSELF AssignExpression)
)

    $(P For all assign expressions, the left operand must be a modifiable
    lvalue. The type of the assign expression is the type of the left
    operand, and the value is the value of the left operand after assignment
    occurs. The resulting expression is a modifiable lvalue.
    )

    $(UNDEFINED_BEHAVIOR
    If either operand is a reference type and one of the following:
    $(OL
    $(LI the operands have partially overlapping storage)
    $(LI the operands' storage overlaps exactly but the types are different)
    ))

    $(IMPLEMENTATION_DEFINED
    If neither operand is a reference type and one of the following:
    $(OL
    $(LI the operands have partially overlapping storage)
    $(LI the operands' storage overlaps exactly but the types are different)
    ))

$(H3 $(LNAME2 simple_assignment_expressions, Simple Assignment Expression))

    $(P If the operator is $(D =) then it is simple assignment.
    The right operand is implicitly converted to the type of the
    left operand, and assigned to it.)

    $(P If the left and right operands are of the same struct type, and the struct
    type has a $(GLINK2 struct, Postblit), then the copy operation is
    as described in $(DDSUBLINK spec/struct, struct-postblit, Struct Postblit).
    )

    $(P If the lvalue is the `.length` property of a dynamic array, the behavior is
    as described in $(DDSUBLINK spec/arrays, resize, Setting Dynamic Array Length).
    )

    $(P If the lvalue is a static array or a slice, the behavior is as
    described in $(DDSUBLINK spec/arrays, array-copying, Array Copying) and
    $(DDSUBLINK spec/arrays, array-setting, Array Setting).
    )

    $(P If the lvalue is a user-defined property, the behavior is as
    described in $(DDSUBLINK spec/function, property-functions, Property Functions).
    )

$(H3 $(LNAME2 assignment_operator_expressions, Assignment Operator Expressions))

    $(P For arguments of built-in types, assignment operator expressions such as)

        --------------
        a op= b
        --------------

        are semantically equivalent to:

        --------------
        a = cast(typeof(a))(a op b)
        --------------

    except that

    $(UL
        $(LI operand $(D a) is only evaluated once,)
        $(LI overloading $(I op) uses a different function than overloading $(I op)= does, and)
        $(LI the left operand of $(D >>>=) does not undergo $(INTEGER_PROMOTIONS) before shifting.)
    )

    $(P For user-defined types, assignment operator expressions are overloaded separately from
        the binary operator. Still the left operand must be an lvalue.
    )

$(H2 $(LNAME2 conditional_expressions, Conditional Expressions))

$(GRAMMAR
$(GNAME ConditionalExpression):
    $(GLINK OrOrExpression)
    $(GLINK OrOrExpression) $(D ?) $(GLINK Expression) $(D :) $(GSELF ConditionalExpression)
)

    $(P The first expression is converted to $(D bool), and is evaluated.
    )

    $(P If it is $(D true), then the second expression is evaluated, and
        its result is the result of the conditional expression.
    )

    $(P If it is $(D false), then the third expression is evaluated, and
        its result is the result of the conditional expression.
    )

    $(P If either the second or third expressions are of type $(D void),
        then the resulting type is $(D void). Otherwise, the second and third
        expressions are implicitly converted to a common type which becomes
        the result type of the conditional expression.
    )

    $(P $(B Note:)
        When a conditional expression is the left operand of
        an $(RELATIVE_LINK2 assign_expressions, assign expression),
        parentheses are required for disambiguation:
    )
    ---
    bool test;
    int a, b, c;
    ...
    test ? a = b : c = 2;   // Deprecated
    (test ? a = b : c) = 2; // Equivalent
    ---

    $(P This makes the intent clearer, because the first statement can
        easily be misread as the following code:
    )
    ---
    test ? a = b : (c = 2);
    ---

$(H2 $(LNAME2 oror_expressions, OrOr Expressions))

$(GRAMMAR
$(GNAME OrOrExpression):
    $(GLINK AndAndExpression)
    $(GSELF OrOrExpression) $(D ||) $(GLINK AndAndExpression)
)

    $(P The result type of an $(I OrOrExpression) is $(D bool), unless the right operand
        has type $(D void), when the result is type $(D void).
    )

    $(P The $(I OrOrExpression) evaluates its left operand.
    )

    $(P If the left operand, converted to type $(D bool), evaluates to
        $(D true), then the right operand is not evaluated. If the result type of
        the $(I OrOrExpression) is $(D bool) then the result of the
        expression is $(D true).
    )

    $(P If the left operand is $(D false), then the right
        operand is evaluated.
        If the result type of
        the $(I OrOrExpression) is $(D bool) then the result of the
        expression is the right operand converted to type $(D bool).
    )

$(H2 $(LNAME2 andand_expressions, AndAnd Expressions))

$(GRAMMAR
$(GNAME AndAndExpression):
    $(GLINK OrExpression)
    $(GSELF AndAndExpression) $(D $(AMP)$(AMP)) $(GLINK OrExpression)
)

    $(P The result type of an $(I AndAndExpression) is $(D bool), unless the right operand
        has type $(D void), when the result is type $(D void).
    )

    $(P The $(I AndAndExpression) evaluates its left operand.
    )

    $(P If the left operand, converted to type $(D bool), evaluates to
        $(D false), then the right operand is not evaluated. If the result type of
        the $(I AndAndExpression) is $(D bool) then the result of the
        expression is $(D false).
    )

    $(P If the left operand is $(D true), then the right
        operand is evaluated.
        If the result type of
        the $(I AndAndExpression) is $(D bool) then the result of the
        expression is the right operand converted to type $(D bool).
    )

$(H2 $(LNAME2 bitwise_expressions, Bitwise Expressions))

    $(P Bit wise expressions perform a bitwise operation on their operands.
        Their operands must be integral types.
        First, the $(USUAL_ARITHMETIC_CONVERSIONS) are done. Then, the bitwise
        operation is done.
    )

$(H3 $(LNAME2 or_expressions, Or Expressions))

$(GRAMMAR
$(GNAME OrExpression):
    $(GLINK XorExpression)
    $(GSELF OrExpression) $(D |) $(GLINK XorExpression)
)

    $(P The operands are OR'd together.)

$(H3 $(LNAME2 xor_expressions, Xor Expressions))

$(GRAMMAR
$(GNAME XorExpression):
    $(GLINK AndExpression)
    $(GSELF XorExpression) $(D ^) $(GLINK AndExpression)
)

    $(P The operands are XOR'd together.)

$(H3 $(LNAME2 and_expressions, And Expressions))

$(GRAMMAR
$(GNAME AndExpression):
    $(GLINK CmpExpression)
    $(GSELF AndExpression) $(D &) $(GLINK CmpExpression)
)

    $(P The operands are AND'd together.)

$(H2 $(LNAME2 compare_expressions, Compare Expressions))

$(GRAMMAR
$(GNAME CmpExpression):
    $(GLINK ShiftExpression)
    $(GLINK EqualExpression)
    $(GLINK IdentityExpression)
    $(GLINK RelExpression)
    $(GLINK InExpression)
)

$(H2 $(LNAME2 equality_expressions, Equality Expressions))

$(GRAMMAR
$(GNAME EqualExpression):
    $(GLINK ShiftExpression) $(D ==) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D !=) $(GLINK ShiftExpression)
)

    $(P Equality expressions compare the two operands for equality ($(D ==))
        or inequality ($(D !=)).
        The type of the result is $(D bool).
    )

    $(P Inequality is defined as the logical negation of equality.)

    $(P If the operands are integral values, the $(USUAL_ARITHMETIC_CONVERSIONS) are applied
        to bring them to a common type before comparison. Equality is defined as the bit patterns
        of the common type match exactly.
    )

    $(P If the operands are pointers, equality is defined as the bit patterns of the operands
        match exactly.
    )

    $(P For float, double, and real values, the $(USUAL_ARITHMETIC_CONVERSIONS) are applied
        to bring them to a common type before comparison.
        The values $(D -0) and $(D +0) are considered equal.
        If either or both operands are NAN, then $(D ==) returns false and $(D !=) returns $(D true).
        Otherwise, the bit patterns of the common type are compared for equality.
    )

    $(P For complex numbers, equality is defined as equivalent to:

        ---
        x.re == y.re && x.im == y.im
        ---
    )

    $(P For struct objects, equality means the result of the
        $(LINK2 https://dlang.org/spec/operatoroverloading.html#equals, `opEquals()` member function).
        If an `opEquals()` is not provided, equality is defined as
        the logical product of all equality
        results of the corresponding object fields.

        $(IMPLEMENTATION_DEFINED The contents of any alignment gaps in the struct object.)

        $(BEST_PRACTICE If there are overlapping fields, which happens with unions, the default
        equality will compare each of the overlapping fields.
        An `opEquals()` can account for which of the overlapping fields contains valid data.
        An `opEquals()` can override the default behavior of floating point NaN values
        always comparing as unequal.
        Be careful using `memcmp()` to implement `opEquals()` if:
        $(UL
        $(LI there are any alignment gaps)
        $(LI if any fields have an `opEquals()`)
        $(LI there are any floating point fields that may contain NaN or `-0` values)
        )
        )
    )

    $(P For class and struct objects, the expression $(D (a == b))
        is rewritten as
        $(D a.opEquals(b)), and $(D (a != b)) is rewritten as
        $(D !a.opEquals(b)).
    )

    $(P For class objects, the $(D ==) and $(D !=)
        operators are intended to compare the contents of the objects,
        however an appropriate $(D opEquals) override must be defined for this to work.
        The default $(D opEquals) provided by the root $(D Object) class is
        equivalent to the $(D is) operator.
        Comparing against $(D null) is invalid, as $(D null) has no contents.
        Use the $(D is) and $(D !is) operators instead.)

        ---
        class C;
        C c;
        if (c == null)  // error
            ...
        if (c is null)  // ok
            ...
        ---

    $(P For static and dynamic arrays, equality is defined as the
        lengths of the arrays
        matching, and all the elements are equal.
    )

$(H3 $(LNAME2 identity_expressions, Identity Expressions))

$(GRAMMAR
$(GNAME IdentityExpression):
    $(GLINK ShiftExpression) $(D is) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D ! is) $(GLINK ShiftExpression)
)

    $(P The $(D is) compares for identity.
        To compare for nonidentity, use $(D e1 !is e2).
        The type of the result is $(D bool). The operands
        undergo the $(USUAL_ARITHMETIC_CONVERSIONS) to bring them to a common type before
        comparison.
    )

    $(P For class objects, identity is defined as the object references
        are for the same object. Null class objects can be compared with
        $(D is).
    )

    $(P For struct objects and floating point values, identity is defined as the
        bits in the operands being identical.
    )

    $(P For static and dynamic arrays, identity is defined as referring
        to the same array elements and the same number of elements.
    )

    $(P For other operand types, identity is defined as being the same
        as equality.
    )

    $(P The identity operator $(D is) cannot be overloaded.
    )

$(H2 $(LNAME2 relation_expressions, Relational Expressions))

$(GRAMMAR
$(GNAME RelExpression):
    $(GLINK ShiftExpression) $(D <) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D <=) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D >) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D >=) $(GLINK ShiftExpression)
)

    $(P First, the $(USUAL_ARITHMETIC_CONVERSIONS) are done on the operands.
        The result type of a relational expression is $(D bool).
    )

    $(P For class objects, the result of Object.opCmp() forms the left
        operand, and 0 forms the right operand. The result of the
        relational expression (o1 op o2) is:)

        ---
        (o1.opCmp(o2) op 0)
        ---

    $(P It is an error to compare objects if one is $(D null).)

    $(P For static and dynamic arrays, the result of the relational
        op is the result of the operator applied to the first non-equal
        element of the array. If two arrays compare equal, but are of
        different lengths, the shorter array compares as "less" than the
        longer array.
    )

$(H3 $(LNAME2 integer_comparisons, Integer comparisons))

    $(P Integer comparisons happen when both operands are integral
        types.
    )

    $(TABLE2 Integer comparison operators,
        $(THEAD Operator, Relation)
        $(TROW $(D <), less)
        $(TROW $(D >), greater)
        $(TROW $(D <)$(D =), less or equal)
        $(TROW $(D >=), greater or equal)
        $(TROW $(D ==), equal)
        $(TROW $(D !=), not equal)
    )

    $(P It is an error to have one operand be signed and the other
        unsigned for a $(D <), $(D <)$(D =), $(D >) or
        $(D >)$(D =) expression.
        Use casts to make both operands signed or both operands unsigned.
    )

$(H3 $(LEGACY_LNAME2 floating_point_comparisons, floating-point-comparisons, Floating point comparisons))

    $(P If one or both operands are floating point, then a floating
        point comparison is performed.
    )

    $(P A relational operator can have `NaN` operands.
        If either or both operands is `NaN`, the floating point
        comparison operation returns as follows:)

        $(TABLE2 Floating point comparison operators,
        $(THEAD Operator, Relation, Returns)
        $(TROW $(D <),$(ARGS less), `false`)
        $(TROW $(D >),$(ARGS greater), `false`)
        $(TROW $(D <)$(D =),$(ARGS less or equal), `false`)
        $(TROW $(D >=),$(ARGS greater or equal), `false`)
        $(TROW $(D ==),equal, `false`)
        $(TROW $(D !=),$(ARGS unordered, less, or greater), `true`)
        )

$(H3 $(LEGACY_LNAME2 class_comparisons, class-comparisons, Class comparisons))

    $(P For class objects, the relational
        operators compare the
        contents of the objects. Therefore, comparing against
        $(CODE null) is invalid, as $(CODE null) has no contents.)

        ---
        class C;
        C c;
        if (c < null)  // error
            ...
        ---

$(H2 $(LNAME2 in_expressions, In Expressions))

$(GRAMMAR
$(GNAME InExpression):
    $(GLINK ShiftExpression) $(D in) $(GLINK ShiftExpression)
    $(GLINK ShiftExpression) $(D ! in) $(GLINK ShiftExpression)
)

$(P An associative array can be tested to see if an element is in the array:)

        -------------
        int foo[string];
        ...
        if ("hello" in foo)
            ...
        -------------

    $(P The $(D in) expression has the same precedence as the
        relational expressions $(D <), $(D <)$(D =),
        etc.
        The return value of the $(I InExpression) is $(D null)
        if the element is not in the array;
        if it is in the array it is a pointer to the element.
    )

    $(P The $(D !in) expression is the logical negation of the $(D in)
        operation.
    )

$(H2 $(LNAME2 shift_expressions, Shift Expressions))

$(GRAMMAR
$(GNAME ShiftExpression):
    $(GLINK AddExpression)
    $(GSELF ShiftExpression) $(D <<) $(GLINK AddExpression)
    $(GSELF ShiftExpression) $(D >>) $(GLINK AddExpression)
    $(GSELF ShiftExpression) $(D >>>) $(GLINK AddExpression)
)

    $(P The operands must be integral types, and undergo the $(INTEGER_PROMOTIONS).
        The result type is the type of the left operand after
        the promotions. The result value is the result of shifting the bits
        by the right operand's value.
    )

    $(P $(D <)$(D <) is a left shift.
        $(D >)$(D >) is a signed right shift.
        $(D >)$(D >)$(D >) is an unsigned right shift.
    )

    $(P It's illegal to shift by the same or more bits than the size of the
        quantity being shifted:)

        -------------
        int c;
        auto x = c << 33;        // error
        -------------

$(H2 $(LNAME2 add_expressions, Add Expressions))

$(GRAMMAR
$(GNAME AddExpression):
    $(GLINK MulExpression)
    $(GSELF AddExpression) $(D +) $(GLINK MulExpression)
    $(GSELF AddExpression) $(D -) $(GLINK MulExpression)
    $(GLINK CatExpression)
)

    $(P If the operands are of integral types, they undergo the $(USUAL_ARITHMETIC_CONVERSIONS),
        and then are brought to a common type using the
        $(USUAL_ARITHMETIC_CONVERSIONS).
    )

    $(P If either operand is a floating point type, the other is implicitly
        converted to floating point and they are brought to a common type
        via the $(USUAL_ARITHMETIC_CONVERSIONS).
    )

    $(P If the operator is $(D +) or $(D -), and
        the first operand is a pointer, and the second is an integral type,
        the resulting type is the type of the first operand, and the resulting
        value is the pointer plus (or minus) the second operand multiplied by
        the size of the type pointed to by the first operand.
    )

    $(P If the second operand is a pointer, and the first is an integral type,
        and the operator is $(D +),
        the operands are reversed and the pointer arithmetic just described
        is applied.
    )

    $(P If both operands are pointers, and the operator is $(D +),
        then it is illegal.
    )

    $(P If both operands are pointers, and the operator is $(D -),
        the pointers are subtracted and the
        result is divided by the size of the type pointed to by the
        operands. In this calculation the assumed size of $(D void) is one byte.
        It is an error if the pointers point to different types.
        The type of the result is $(D ptrdiff_t).
    )

    $(P If both operands are of integral types and an overflow or underflow
        occurs in the computation, wrapping will happen. For example,
        $(D uint.max + 1 == uint.min), $(D uint.min - 1 == uint.max),
        $(D int.max + 1 == int.min), and $(D int.min - 1 == int.max).
    )

    $(P Add expressions for floating point operands are not associative.
    )

$(H2 $(LNAME2 cat_expressions, Cat Expressions))

$(GRAMMAR
$(GNAME CatExpression):
    $(GLINK AddExpression) $(D ~) $(GLINK MulExpression)
)

    $(P A $(I CatExpression) concatenates arrays, producing
        a dynamic array with the result. The arrays must be
        arrays of the same element type. If one operand is an array
        and the other is of that array's element type, that element
        is converted to an array of length 1 of that element,
        and then the concatenation is performed.
    )

$(H2 $(LNAME2 mul_expressions, Mul Expressions))

$(GRAMMAR
$(GNAME MulExpression):
    $(GLINK UnaryExpression)
    $(GSELF MulExpression) $(D *) $(GLINK UnaryExpression)
    $(GSELF MulExpression) $(D /) $(GLINK UnaryExpression)
    $(GSELF MulExpression) $(D %) $(GLINK UnaryExpression)
)

    $(P The operands must be arithmetic types.
        They undergo the $(USUAL_ARITHMETIC_CONVERSIONS).
    )

    $(P For integral operands, the $(D *), $(D /), and $(D %)
        correspond to multiply, divide, and modulus operations.
        For multiply, overflows are ignored and simply chopped to fit
        into the integral type.
    )

    $(P For integral operands of the $(D /) and $(D %) operators,
        the quotient rounds towards zero and the remainder has the
        same sign as the dividend.
    )

    $(P The following divide or modulus integral operands:)

    $(UL
    $(LI denominator is 0)
    $(LI signed `int.min` is the numerator and `-1` is the denominator)
    $(LI signed `long.min` is the numerator and `-1L` is the denominator)
    )

    $(P are illegal if encountered during Compile Time Execution.)

    $(UNDEFINED_BEHAVIOR is exhibited if they are encountered during run time.
        $(LINK2 https://dlang.org/phobos/core_checkedint.html, `core.checkedint`)
        can be used to check for them and select a defined behavior.
    )

    $(P For floating point operands, the * and / operations correspond
        to the IEEE 754 floating point equivalents. % is not the same as
        the IEEE 754 remainder. For example, 15.0 % 10.0 == 5.0, whereas
        for IEEE 754, remainder(15.0,10.0) == -5.0.
    )

    $(P Mul expressions for floating point operands are not associative.
    )

$(H2 $(LEGACY_LNAME2 UnaryExpression, unary-expression, Unary Expressions))

$(GRAMMAR
$(GNAME UnaryExpression):
    $(D $(AMP)) $(GSELF UnaryExpression)
    $(D ++) $(GSELF UnaryExpression)
    $(D --) $(GSELF UnaryExpression)
    $(D *) $(GSELF UnaryExpression)
    $(D -) $(GSELF UnaryExpression)
    $(D +) $(GSELF UnaryExpression)
    $(D !) $(GSELF UnaryExpression)
    $(GLINK ComplementExpression)
    $(GLINK DeleteExpression)
    $(GLINK CastExpression)
    $(GLINK PowExpression)
)

$(H3 $(LNAME2 complement_expressions, Complement Expressions))

$(GRAMMAR
$(GNAME ComplementExpression):
    $(D ~) $(GLINK UnaryExpression)
)

    $(P $(I ComplementExpression)s work on integral types (except $(D bool)).
        All the bits in the value are complemented.
    )

    $(P $(B Note:) the usual $(INTEGER_PROMOTIONS) are not performed
        prior to the complement operation.
    )

$(H3 $(LNAME2 new_expressions, New Expressions))

$(GRAMMAR
$(GNAME NewExpression):
    $(D new) $(GLINK AllocatorArguments)$(OPT) $(GLINK2 type, Type)
    $(D new) $(GLINK AllocatorArguments)$(OPT) $(GLINK2 type, Type) $(D [) $(GLINK AssignExpression) $(D ])
    $(D new) $(GLINK AllocatorArguments)$(OPT) $(GLINK2 type, Type) $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))
    $(GLINK2 class, NewAnonClassExpression)

$(GNAME AllocatorArguments):
    $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))

$(GNAME ArgumentList):
    $(GLINK AssignExpression)
    $(GLINK AssignExpression) $(D ,)
    $(GLINK AssignExpression) $(D ,) $(GSELF ArgumentList)
)

    $(P $(I NewExpression)s are used to allocate memory on the garbage
        collected heap (default) or using a class or struct specific allocator.
    )

    $(P To allocate multidimensional arrays, the declaration reads
        in the same order as the prefix array declaration order.)

        -------------
        char[][] foo;   // dynamic array of strings
        ...
        foo = new char[][30]; // allocate array of 30 strings
        -------------

    $(P The above allocation can also be written as:)

        -------------
        foo = new char[][](30); // allocate array of 30 strings
        -------------

    $(P To allocate the nested arrays, multiple arguments can be used:)

        ---------------
        int[][][] bar;
        ...
        bar = new int[][][](5, 20, 30);
        ---------------

    The code above is equivalent to:

        ----------
        bar = new int[][][5];
        foreach (ref a; bar)
        {
            a = new int[][20];
            foreach (ref b; a)
            {
                b = new int[30];
            }
        }
        -----------

    $(P If there is a $(D new $(LPAREN)) $(GLINK ArgumentList) $(D $(RPAREN)),
        then
        those arguments are passed to the class or struct specific
        $(DDSUBLINK spec/class, allocators, allocator function) after the size argument.
    )

    $(P If a $(I NewExpression) is used as an initializer for
        a function local variable with $(D scope) storage class,
        and the $(GLINK ArgumentList) to $(D new) is empty, then
        the instance is allocated on the stack rather than the heap
        or using the class specific allocator.
    )

$(H3 $(LNAME2 delete_expressions, Delete Expressions))

$(GRAMMAR
$(GNAME DeleteExpression):
    $(D delete) $(GLINK UnaryExpression)
)
    $(P NOTE: `delete` has been deprecated.  Instead, please use $(REF1 destroy, object)
    if feasible, or $(REF __delete, core, memory) as a last resort.)

    $(P If the $(I UnaryExpression) is a class object reference, and
        there is a destructor for that class, the destructor
        is called for that object instance.
    )

    $(P Next, if the $(I UnaryExpression) is a class object reference, or
        a pointer to a struct instance, and the class or struct
        has overloaded operator delete, then that operator delete is called
        for that class object instance or struct instance.
    )

    $(P Otherwise, the garbage collector is called to immediately free the
        memory allocated for the class instance or struct instance.
    )

    $(P If the $(I UnaryExpression) is a pointer or a dynamic array,
        the garbage collector is called to immediately release the
        memory.
    )

    $(P The pointer, dynamic array, or reference is set to $(D null)
        after the delete is performed.
        Any attempt to reference the data after the deletion via another
        reference to it will result in undefined behavior.
    )

    $(P If $(I UnaryExpression) is a variable allocated
        on the stack, the class destructor (if any) is called for that
        instance. Neither the garbage collector nor any class deallocator
        is called.
    )

    $(UNDEFINED_BEHAVIOR
    $(OL
    $(LI Using `delete` to free memory not allocated by the garbage collector.)
    $(LI Referring to data that has been the operand of `delete`.)
    ))

$(H3 $(LNAME2 cast_expressions, Cast Expressions))

$(GRAMMAR
$(GNAME CastExpression):
    $(D cast $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN)) $(GLINK UnaryExpression)
    $(D cast $(LPAREN)) $(GLINK2 type, TypeCtors)$(OPT) $(D $(RPAREN)) $(GLINK UnaryExpression)
)

    $(P A $(I CastExpression) converts the $(I UnaryExpression)
        to $(GLINK2 type, Type).)

        -------------
        cast(foo) -p; // cast (-p) to type foo
        (foo) - p;      // subtract p from foo
        -------------

    $(P Any casting of a class reference to a
        derived class reference is done with a runtime check to make sure it
        really is a downcast. $(D null) is the result if it isn't.
    )

        -------------
        class A { ... }
        class B : A { ... }

        void test(A a, B b)
        {
            B bx = a;         // error, need cast
            B bx = cast(B) a; // bx is null if a is not a B
            A ax = b;         // no cast needed
            A ax = cast(A) b; // no runtime check needed for upcast
        }
        -------------

    $(P In order to determine if an object $(D o) is an instance of
        a class $(D B) use a cast:)

        -------------
        if (cast(B) o)
        {
            // o is an instance of B
        }
        else
        {
            // o is not an instance of B
        }
        -------------

    $(P Casting a pointer type to and from a class type is done as a type paint
        (i.e. a reinterpret cast).
    )

    $(P Casting a dynamic array to another dynamic array is done only if the
        array lengths multiplied by the element sizes match. The cast is done
        as a type paint, with the array length adjusted to match any change in
        element size. If there's not a match, a runtime error is generated.)

        ---
        import std.stdio;

        int main()
        {
            byte[] a = [1,2,3];
            auto b = cast(int[])a; // runtime array cast misalignment

            int[] c = [1, 2, 3];
            auto d = cast(byte[])c; // ok
            // prints:
            // [1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0]
            writeln(d);
            return 0;
        }
        ---


    $(P Casting a static array to another static array is done only if the
        array lengths multiplied by the element sizes match; a mismatch
        is illegal.
        The cast is done as a type paint (aka a reinterpret cast).
        The contents of the array are not changed.)

        ---
        import core.stdc.stdio;

        void main()
        {
            byte[16] b = 3;
            int[4] ia = cast(int[4]) b;
            foreach (i; ia)
                printf("%x\n", i);
            /* prints:
               3030303
               3030303
               3030303
               3030303
             */
        }
        ---

    $(P Casting a floating point literal from one type to another
        changes its type, but internally it is retained at full
        precision for the purposes of constant folding.)

        ---
        void test()
        {
            real a = 3.40483L;
            real b;
            b = 3.40483;     // literal is not truncated to double precision
            assert(a == b);
            assert(a == 3.40483);
            assert(a == 3.40483L);
            assert(a == 3.40483F);
            double d = 3.40483; // truncate literal when assigned to variable
            assert(d != a);     // so it is no longer the same
            const double x = 3.40483; // assignment to const is not
            assert(x == a);     // truncated if the initializer is visible
        }
        ---

    $(P Casting a floating point value to an integral type is the equivalent
        of converting to an integer using truncation.)

        ---
        void main()
        {
            int a = cast(int) 0.8f;
            assert(a == 0);
            long b = cast(long) 1.5;
            assert(b == 1L);
            long c = cast(long) -1.5;
            assert(c == -1);
        }
        ---

    $(P Casting a value $(I v) to a struct $(I S), when value is not a struct
        of the same type, is equivalent to:)

        ---
        S(v)
        ---

    $(P Casting to a $(GLINK CastQual) replaces the qualifiers to the type of
        the $(GLINK UnaryExpression).)

        ---
        shared int x;
        assert(is(typeof(cast(const)x) == const int));
        ---

    $(P Casting with no $(GLINK2 type, Type) or $(GLINK CastQual) removes
        any top level $(D const), $(D immutable), $(D shared) or $(D inout)
        type modifiers from the type
        of the $(GLINK UnaryExpression).)

        ---
        shared int x;
        assert(is(typeof(cast()x) == int));
        ---

    $(P Casting an expression to $(D void) type is allowed to mark that
        the result is unused. On $(GLINK2 statement, ExpressionStatement),
        it could be used properly to avoid "has no effect" error.)

        ----
        void foo(lazy void exp) {}
        void main()
        {
            foo(10);            // NG - has no effect in expression '10'
            foo(cast(void)10);  // OK
        }
        ----

$(H2 $(LNAME2 pow_expressions, Pow Expressions))

$(GRAMMAR
$(GNAME PowExpression):
    $(GLINK PostfixExpression)
    $(GLINK PostfixExpression) $(D ^^) $(GLINK UnaryExpression)
)

    $(P $(I PowExpression) raises its left operand to the power of its
        right operand.
    )

$(H2 $(LNAME2 postfix_expressions, Postfix Expressions))

$(GRAMMAR
$(GNAME PostfixExpression):
    $(GLINK PrimaryExpression)
    $(GSELF PostfixExpression) $(D .) $(IDENTIFIER)
    $(GSELF PostfixExpression) $(D .) $(GLINK2 template, TemplateInstance)
    $(GSELF PostfixExpression) $(D .) $(GLINK NewExpression)
    $(GSELF PostfixExpression) $(D ++)
    $(GSELF PostfixExpression) $(D --)
    $(GSELF PostfixExpression) $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))
    $(GLINK2 type, TypeCtors)$(OPT) $(GLINK2 type, BasicType) $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))
    $(GLINK IndexExpression)
    $(GLINK SliceExpression)
)

$(H2 $(LNAME2 index_expressions, Index Expressions))

$(GRAMMAR
$(GNAME IndexExpression):
    $(GLINK PostfixExpression) $(D [) $(GLINK ArgumentList) $(D ])
)

$(P $(I PostfixExpression) is evaluated. If $(I PostfixExpression) is an
expression of type static array or dynamic array, the symbol $(DOLLAR) is set to
be the number of elements in the array. If $(I PostfixExpression) is a $(I
ValueSeq), the symbol $(DOLLAR) is set to be the number of elements
in the sequence. A new declaration scope is created for the evaluation of the
$(GLINK ArgumentList) and $(DOLLAR) appears in that scope only.)

    $(P If $(I PostfixExpression) is a $(I ValueSeq),
        then the $(GLINK ArgumentList) must consist of only one argument,
        and that must be statically evaluatable to an integral constant.
        That integral constant $(I n) then selects the $(I n)th
        expression in the $(I ValueSeq), which is the result
        of the $(I IndexExpression).
        It is an error if $(I n) is out of bounds of the $(I ValueSeq).
    )

$(H2 $(LNAME2 slice_expressions, Slice Expressions))

$(GRAMMAR
$(GNAME SliceExpression):
    $(GLINK PostfixExpression) $(D [ ])
    $(GLINK PostfixExpression) $(D [) $(GLINK Slice) $(D ,)$(OPT) $(D ])

$(GNAME Slice):
    $(GLINK AssignExpression)
    $(GLINK AssignExpression) $(D ,) $(GSELF Slice)
    $(GLINK AssignExpression) $(D ..) $(GLINK AssignExpression)
    $(GLINK AssignExpression) $(D ..) $(GLINK AssignExpression) $(D ,) $(GSELF Slice)
)

    $(P $(I PostfixExpression) is evaluated.
        if $(I PostfixExpression) is an expression of type
        static array or dynamic array, the special variable $(DOLLAR)
        is declared and set to be the length of the array.
        A new declaration scope is created for the evaluation of the
        $(GLINK AssignExpression)..$(GLINK AssignExpression)
        and $(DOLLAR) appears in that scope only.
    )

    $(P The first $(I AssignExpression) is taken to be the inclusive
        lower bound
        of the slice, and the second $(I AssignExpression) is the
        exclusive upper bound.
        The result of the expression is a slice of the $(I PostfixExpression)
        array.
    )

    $(P If the $(D [ ]) form is used, the slice is of the entire
        array.
    )

    $(P The type of the slice is a dynamic array of the element
        type of the $(I PostfixExpression).
    )

    $(P A $(I SliceExpression) is not a modifiable lvalue.)

    $(P If the slice bounds can be known at compile time, the slice expression
    is implicitly convertible to an lvalue of static array. For example:)

        -------------
        arr[a .. b]     // typed T[]
        -------------

        If both $(CODE a) and $(CODE b) are integers (may be constant-folded),
        the slice expression can be converted to a static array type
        $(D T[b - a]).

        -------------
        void foo(int[2] a)
        {
            assert(a == [2, 3]);
        }
        void bar(ref int[2] a)
        {
            assert(a == [2, 3]);
            a[0] = 4;
            a[1] = 5;
            assert(a == [4, 5]);
        }
        void baz(int[3] a) {}

        void main()
        {
            int[] arr = [1, 2, 3];

            foo(arr[1 .. 3]);
            assert(arr == [1, 2, 3]);

            bar(arr[1 .. 3]);
            assert(arr == [1, 4, 5]);

          //baz(arr[1 .. 3]); // cannot match length
        }
        -------------

$(P The following forms of slice expression can be convertible to a static array
type:)

        $(DL
        $(DT $(D e)) $(DD An expression that contains no side effects.)
        $(DT $(D a), $(D b)) $(DD Integers (that may be constant-folded).)
        )

        $(TABLE2 Computing array lengths during compilation,
        $(THEAD Form, The length calculated at compile time)
        $(TROW $(D arr[]), The compile time length of $(D arr) if it's known.)
        $(TROW $(D arr[a .. b]),               $(D b - a))
        $(TROW $(D arr[e-a .. e]),   $(D a))
        $(TROW $(D arr[e .. e+b]),   $(D b))
        $(TROW $(D arr[e-a .. e+b]), $(D a + b))
        $(TROW $(D arr[e+a .. e+b]), $(D b - a) $(I if) $(D a <= b))
        $(TROW $(D arr[e-a .. e-b]), $(D a - b) $(I if) $(D a >= b))
        )

    $(P If $(I PostfixExpression) is a $(I ValueSeq), then
        the result of the slice is a new $(I ValueSeq) formed
        from the upper and lower bounds, which must statically evaluate
        to integral constants.
        It is an error if those
        bounds are out of range.
    )

$(H2 $(LNAME2 primary_expressions, Primary Expressions))

$(GRAMMAR
$(GNAME PrimaryExpression):
    $(IDENTIFIER)
    $(D .) $(IDENTIFIER)
    $(GLINK2 template, TemplateInstance)
    $(D .) $(GLINK2 template, TemplateInstance)
    $(RELATIVE_LINK2 this, $(D this))
    $(RELATIVE_LINK2 super, $(D super))
    $(RELATIVE_LINK2 null, $(D null))
    $(D true)
    $(D false)
    $(D $)
    $(GLINK_LEX IntegerLiteral)
    $(GLINK_LEX FloatLiteral)
    $(GLINK_LEX CharacterLiteral)
    $(GLINK StringLiterals)
    $(GLINK ArrayLiteral)
    $(GLINK AssocArrayLiteral)
    $(GLINK FunctionLiteral)
    $(GLINK AssertExpression)
    $(GLINK MixinExpression)
    $(GLINK ImportExpression)
    $(GLINK NewExpression)
    $(GLINK2 type, FundamentalType) $(D .) $(IDENTIFIER)
    $(D $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN) .) $(IDENTIFIER)
    $(D $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN) .) $(GLINK2 template, TemplateInstance)
    $(GLINK2 type, FundamentalType) $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))
    $(GLINK2 type, TypeCtor) $(D $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN)) $(D .) $(IDENTIFIER)
    $(GLINK2 type, TypeCtor) $(D $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN)) $(D $(LPAREN)) $(GLINK ArgumentList)$(OPT) $(D $(RPAREN))
    $(GLINK2 type, Typeof)
    $(GLINK TypeidExpression)
    $(GLINK IsExpression)
    $(D $(LPAREN)) $(GLINK Expression) $(D $(RPAREN))
    $(GLINK SpecialKeyword)
    $(GLINK2 traits, TraitsExpression)
)

$(H3 $(LNAME2 identifier, .Identifier))

    $(P See $(DDSUBLINK spec/module, module_scope_operators, Module Scope
        Operator).)

$(H3 $(LNAME2 this, this))

    $(P Within a non-static member function, $(D this) resolves to
        a reference to the object for which the function was called.
        If the object is an instance of a struct, $(D this) will
        be a pointer to that instance.
        If a member function is called with an explicit reference
        to $(D typeof(this)), a non-virtual call is made:)

        -------------
        class A
        {
            char get() { return 'A'; }

            char foo() { return typeof(this).get(); }
            char bar() { return this.get(); }
        }

        class B : A
        {
            override char get() { return 'B'; }
        }

        void main()
        {
            B b = new B();

            assert(b.foo() == 'A');
            assert(b.bar() == 'B');
        }
        -------------

    $(P Assignment to $(D this) is not allowed.)

$(H3 $(LNAME2 super, super))

    $(P $(D super) is identical to $(D this), except that it is
        cast to $(D this)'s base class.
        It is an error if there is no base class.
        It is an error to use $(D super) within a struct member function.
        (Only class $(D Object) has no base class.)
        If a member function is called with an explicit reference
        to $(D super), a non-virtual call is made.
    )

    $(P Assignment to $(D super) is not allowed.)

$(H3 $(LNAME2 null, null))

    $(P $(D null) represents the null value for
        pointers, pointers to functions, delegates,
        dynamic arrays, associative arrays,
        and class objects.
        If it has not already been cast to a type,
        it is given the singular type $(D typeof(null)) and it is an exact conversion
        to convert it to the null value for pointers, pointers to
        functions, delegates, etc.
        After it is cast to a type, such conversions are implicit,
        but no longer exact.
    )

$(H3 $(LNAME2 true_false, true, false))

    $(P These are of type $(D bool) and when cast to another integral
        type become the values 1 and 0,
        respectively.
    )

$(H3 $(LEGACY_LNAME2 CharacterLiteral, character-literal, Character Literals))

    $(P Character literals are single characters and resolve to one
        of type $(D char), $(D wchar), or $(D dchar).
        If the literal is a $(D \u) escape sequence, it resolves to type $(D wchar).
        If the literal is a $(D \U) escape sequence, it resolves to type $(D dchar).
        Otherwise, it resolves to the type with the smallest size it
        will fit into.
    )

$(H3 $(LNAME2 string_literals, String Literals))

$(GRAMMAR
$(GNAME StringLiterals):
    $(GLINK_LEX StringLiteral)
    $(GSELF StringLiterals) $(GLINK_LEX StringLiteral)
)

    $(P String literals can implicitly convert to any
        of the following types, they have equal weight:
    )

    $(TABLE
        $(TROW $(D immutable(char)*))
        $(TROW $(D immutable(wchar)*))
        $(TROW $(D immutable(dchar)*))
        $(TROW $(D immutable(char)[]))
        $(TROW $(D immutable(wchar)[]))
        $(TROW $(D immutable(dchar)[]))
    )

    $(P By default, a string literal is typed as a dynamic array, but the element
        count is known at compile time. So all string literals can be
        implicitly converted to static array types.)

        -------------
        void foo(char[2] a)
        {
            assert(a == "bc");
        }
        void bar(ref const char[2] a)
        {
            assert(a == "bc");
        }
        void baz(const char[3] a) {}

        void main()
        {
            string str = "abc";
            foo(str[1 .. 3]);
            bar(str[1 .. 3]);
          //baz(str[1 .. 3]); // cannot match length
        }
        -------------

    $(P String literals have a 0 appended to them, which makes
        them easy to pass to C or C++ functions expecting a $(CODE const char*)
        string.
        The 0 is not included in the $(CODE .length) property of the
        string literal.
    )

$(H3 $(LNAME2 array_literals, Array Literals))

$(GRAMMAR
$(GNAME ArrayLiteral):
    $(D [) $(GLINK ArgumentList)$(OPT) $(D ])
)

    $(P Array literals are a comma-separated list of $(GLINK AssignExpression)s
        between square brackets $(D [) and $(D ]).
        The $(I AssignExpression)s form the elements of a dynamic array,
        the length of the array is the number of elements.
        The common type of the all elements is taken to be the type of
        the array element, and all elements are implicitly converted
        to that type.)

        ---
        auto a1 = [1,2,3];  // type is int[], with elements 1, 2 and 3
        auto a2 = [1u,2,3]; // type is uint[], with elements 1u, 2u, and 3u
        ---

    $(P By default, an array literal is typed as a dynamic array, but the element
        count is known at compile time. So all array literals can be
        implicitly converted to static array types.)

        -------------
        void foo(long[2] a)
        {
            assert(a == [2, 3]);
        }
        void bar(ref long[2] a)
        {
            assert(a == [2, 3]);
            a[0] = 4;
            a[1] = 5;
            assert(a == [4, 5]);
        }
        void baz(const char[3] a) {}

        void main()
        {
            long[] arr = [1, 2, 3];

            foo(arr[1 .. 3]);
            assert(arr == [1, 2, 3]);

            bar(arr[1 .. 3]);
            assert(arr == [1, 4, 5]);

          //baz(arr[1 .. 3]); // cannot match length
        }
        -------------

    $(P If any of the arguments in the $(GLINK ArgumentList) are
        a $(I ValueSeq), then the elements of the $(I ValueSeq)
        are inserted as arguments in place of the sequence.
    )

    $(P Array literals are allocated on the memory managed heap.
        Thus, they can be returned safely from functions:)

        ---
        int[] foo()
        {
            return [1, 2, 3];
        }
        ---

    $(P When array literals are cast to another array type, each
        element of the array is cast to the new element type.
        When arrays that are not literals are cast, the array is
        reinterpreted as the new type, and the length is recomputed:)

        ---
        import std.stdio;

        void main()
        {
            // cast array literal
            const short[] ct = cast(short[]) [cast(byte)1, 1];
            // this is equivalent with:
            // const short[] ct = [cast(short)1, cast(short)1];
            writeln(ct);  // writes [1, 1]

            // cast other array expression
            // --> normal behavior of CastExpression
            byte[] arr = [cast(byte)1, cast(byte)1];
            short[] rt = cast(short[]) arr;
            writeln(rt);  // writes [257]
        }
        ---

        In other words, casting literal expression will change the literal type.

$(H3 $(LNAME2 associative_array_literals, Associative Array Literals))

$(GRAMMAR
$(GNAME AssocArrayLiteral):
    $(D [) $(GLINK KeyValuePairs) $(D ])

$(GNAME KeyValuePairs):
    $(GLINK KeyValuePair)
    $(GLINK KeyValuePair) $(D ,) $(GSELF KeyValuePairs)

$(GNAME KeyValuePair):
    $(GLINK KeyExpression) $(D :) $(GLINK ValueExpression)

$(GNAME KeyExpression):
    $(GLINK AssignExpression)

$(GNAME ValueExpression):
    $(GLINK AssignExpression)
)

    $(P Associative array literals are a comma-separated list of
        $(I key)$(D :)$(I value) pairs
        between square brackets $(D [) and $(D ]).
        The list cannot be empty.
        The common type of the all keys is taken to be the key type of
        the associative array, and all keys are implicitly converted
        to that type.
        The common type of the all values is taken to be the value type of
        the associative array, and all values are implicitly converted
        to that type.
        An $(I AssocArrayLiteral) cannot be used to statically initialize
        anything.)

        ---
        [21u:"he", 38:"ho", 2:"hi"];  // type is string[uint],
                                      // with keys 21u, 38u and 2u
                                      // and values "he", "ho", and "hi"
        ---

    $(P If any of the keys or values in the $(I KeyValuePairs) are
        a $(I ValueSeq), then the elements of the $(I ValueSeq)
        are inserted as arguments in place of the sequence.
    )

$(H3 $(LNAME2 function_literals, Function Literals))

$(GRAMMAR
$(GNAME FunctionLiteral):
    $(D function) $(D ref)$(OPT) $(GLINK2 type, Type)$(OPT) $(GLINK ParameterWithAttributes) $(OPT) $(GLINK FunctionLiteralBody2)
    $(D delegate) $(D ref)$(OPT) $(GLINK2 type, Type)$(OPT) $(GLINK ParameterWithMemberAttributes) $(OPT) $(GLINK FunctionLiteralBody2)
    $(D ref)$(OPT) $(GLINK ParameterWithMemberAttributes) $(GLINK FunctionLiteralBody2)
    $(GLINK2 function, FunctionLiteralBody)
    $(IDENTIFIER) $(D =>) $(GLINK AssignExpression)

$(GNAME ParameterWithAttributes):
    $(GLINK2 function, Parameters) $(GLINK2 function, FunctionAttributes)$(OPT)

$(GNAME ParameterWithMemberAttributes):
    $(GLINK2 function, Parameters) $(GLINK2 function, MemberFunctionAttributes)$(OPT)

$(GNAME FunctionLiteralBody2):
    $(D =>) $(GLINK AssignExpression)
    $(GLINK2 function, FunctionLiteralBody)
)

    $(P $(I FunctionLiteral)s (also known as $(LNAME2 lambdas, $(I Lambdas))) enable embedding anonymous functions
        and anonymous delegates directly into expressions.
        $(I Type) is the return type of the function or delegate,
        if omitted it is inferred from any $(I ReturnStatement)s
        in the $(I FunctionLiteralBody).
        $(GLINK ParameterWithAttributes) or $(GLINK ParameterWithMemberAttributes)
        can be used to specify the parameters for the function. If these are
        omitted, the function defaults to the empty parameter list $(D ( )).
        The type of a function literal is a delegate or a pointer to function.
    )

    $(P For example:)

        -------------
        int function(char c) fp; // declare pointer to a function

        void test()
        {
            static int foo(char c) { return 6; }

            fp = &foo;
        }
        -------------

        is exactly equivalent to:

        -------------
        int function(char c) fp;

        void test()
        {
            fp = function int(char c) { return 6;} ;
        }
        -------------

    $(P A delegate is necessary if the $(I FunctionLiteralBody2) accesses any non-static
        local variables in enclosing functions.)

        -------------
        int abc(int delegate(int i));

        void test()
        {
            int b = 3;
            int foo(int c) { return 6 + b; }

            abc(&foo);
        }
        -------------

        is exactly equivalent to:

        -------------
        int abc(int delegate(int i));

        void test()
        {
            int b = 3;

            abc( delegate int(int c) { return 6 + b; } );
        }
        -------------

    $(P The use of `ref` declares that the return value is returned by reference:)

        ---
        void main()
        {
            int x;
            auto dg = delegate ref int() { return x; }
            x = 3;
            assert(fp() == 3);
        }
        ---

    $(P If $(D function) or $(D delegate) is omitted,
        it is inferred to be `delegate` if accessing
        variables in enclosing functions, otherwise `function` is inferred.
        )

        -------------
        int abc(int delegate(int i));
        int def(int function(int s));

        void test()
        {
            int b = 3;

            abc( int(int c) { return 6 + b; } );  // inferred to delegate
            def( uint(uint c) { return c * 2; } ); // inferred to function
          //def( int(int c) { return c * b; } );  // error!
            // Because the FunctionLiteralBody accesses b, then the function literal type
            // is inferred to delegate. But def cannot accept a delegate argument.
        }
        -------------

    $(P If the type of a function literal can be uniquely determined from its context,
        the parameter type inference is possible.)

        -------------
        void foo(int function(int) fp);

        void test()
        {
            int function(int) fp = (n) { return n * 2; };
            // The type of parameter n is inferred to int.

            foo((n) { return n * 2; });
            // The type of parameter n is inferred to int.
        }
        -------------

        ---
        auto fp1 = function (i) { return 1; } // error, cannot infer type of `i`
        ---

    $(P If the function literal is assigned to an alias, the inference
        of the parameter types is done when the types are needed, as
        the function literal becomes a template.)

        ---
        alias fp3 = function (i) { return 1; };   // ok, infer type of `i` when used
        int j = fp3(4);       // `i` is inferred as `int` here
        double d = fp3(10.3); // `i` is inferred as `double` here
        ---

    $(P Anonymous delegates can behave like arbitrary statement literals.
        For example, here an arbitrary statement is executed by a loop:)

        -------------
        double test()
        {
            double d = 7.6;
            float f = 2.3;

            void loop(int k, int j, void delegate() statement)
            {
                foreach (i; k .. j)
                {
                    statement();
                }
            }

            loop(5, 100, { d += 1; });
            loop(3, 10,  { f += 3; });

            return d + f;
        }
        -------------

    $(P The syntax $(D => AssignExpression) is equivalent to $(D { return AssignExpression; }).)

        ---
        import std.stdio;

        void main()
        {
            auto i = 3;
            auto twice  = function (int x) => x * 2;
            auto square = delegate (int x) => x * x;

            auto n = 5;
            auto mul_n = (int x) => x * n;

            writeln(twice(i));   // prints 6
            writeln(square(i));  // prints 9
            writeln(mul_n(i));   // prints 15
        }
        ---

    $(P The syntax $(D Identifier => AssignExpression) is equivalent to $(D (Identifier) { return AssignExpression; }).)

        ---
        // the following two declarations are equivalent
        alias fp = i => 1;
        alias fp = (i) { return 1; };
        ---

    $(BEST_PRACTICE The minimal form of the function literal is most useful as
        an argument to a template alias parameter:
        ---
        int motor(alias fp)(int i)
        {
            return fp(i) + 1;
        }

        int engine()
        {
            return motor!(i => i * 2)(6); // returns 13
        }
        ---
        )

    $(NOTE The syntax `Identifier { statement; }` is not supported because because it is
        easily confused with statements `x = Identifier; { statement; };`
        if the semicolons were accidentally omitted.
        )

    $(NOTE When comparing function literals with $(DDSUBLINK spec/function, nested, nested functions),
        the $(D function) form is analogous to static
        or non-nested functions, and the $(D delegate) form is
        analogous to non-static nested functions. I.e.
        a delegate literal can access non-static local variables in an enclosing
        function, a function literal cannot.
    )

$(H3 $(LNAME2 uniform_construction_syntax, Uniform construction syntax for built-in scalar types))

    $(P The implicit conversions of built-in scalar types can be explicitly
        represented by using function call syntax. For example:)

        ---
        auto a = short(1);  // implicitly convert an integer literal '1' to short
        auto b = double(a); // implicitly convert a short variable 'a' to double
        auto c = byte(128); // error, 128 cannot be represented in a byte
        ---

    $(P If the argument is omitted, it means default construction of the
        scalar type:)

        ---
        auto a = ushort();  // same as: ushort.init
        auto b = wchar();   // same as: wchar.init
        ---


$(H3 $(LNAME2 assert_expressions, Assert Expressions))

$(GRAMMAR
$(GNAME AssertExpression):
    $(D assert $(LPAREN)) $(GLINK AssertArguments) $(D $(RPAREN))

$(GNAME AssertArguments):
    $(GLINK AssignExpression) $(D ,)$(OPT)
    $(GLINK AssignExpression) $(D ,) $(GLINK AssignExpression) $(D ,)$(OPT)
)

    $(P The first $(I AssignExpression) must evaluate to true. If it does not, an $(I Assert Failure)
    has occurred and the program enters an $(I Invalid State).
    )

    $(P If the first $(I AssignExpression) consists entirely of compile time constants,
    and evaluates to false, it is a special case; it
    signifies that it is unreachable code.
    Compile Time Function Execution (CTFE) is not attempted.
    )

    $(P $(I AssertExpression) has different semantics if it is in a
    $(DDLINK spec/unittest, Unit Tests, $(D unittest)) or
    $(DDLINK spec/contracts, Contract Programming, $(D in) contract).
    )

    $(P The second $(I AssignExpression), if present, must be implicitly
        convertible to type $(D const(char)[]).
    )

    $(P If the first $(I AssignExpression) is a reference to a class instance for
    which a $(DDSUBLINK spec/class, invariants, class Invariant) exists, the class $(I Invariant) must hold.
    )

    $(P If the first $(I AssignExpression) is a pointer to a struct instance for
    which a struct $(I Invariant) exists, the struct $(I Invariant) must hold.
    )

    $(P The type of an $(I AssertExpression) is $(D void).
    )

    $(UNDEFINED_BEHAVIOR Once in an $(I Invalid State) the behavior of the continuing execution
    of the program is undefined.)

    $(IMPLEMENTATION_DEFINED Whether the first $(I AssertExpression) is evaluated
    or not at runtime is typically set with a compiler switch. If it is not evaluated,
    any side effects specified by the $(I AssertExpression) may not occur.
    The behavior if the first $(I AssertExpression) is evaluated and is false
    is also typically set with a compiler switch and may include these options:
    $(OL
        $(LI continuing execution)
        $(LI immediately halting via execution of a special CPU instruction)
        $(LI aborting the program)
        $(LI calling the assert failure function in the corresponding C
        runtime library)
        $(LI throwing the $(D AssertError) exception in the D runtime library)
    )
    If the optional second $(I AssignExpression) is provided, the implementation may
    evaluate it and print the resulting message upon assert failure:

        ----
        void main()
        {
            assert(0, "an" ~ " error message");
        }
        ----

    $(P When compiled and run, it will produce the message:)

    $(CONSOLE core.exception.AssertError@test.d(3) an error message)

    $(P The implementation may handle the case of the first $(I AssignExpression) evaluating at compile
    time to false differently in that in release mode
    it may simply generate a $(D HLT) instruction or equivalent.
    )
    )

    $(BEST_PRACTICE
    $(OL
        $(LI Do not have side effects in either $(I AssignExpression) that subsequent code
        depends on.)
        $(LI $(I AssertExpressions) are intended to detect bugs in the program, do
        not use for detecting input or environmental errors.)
        $(LI Do not attempt to resume normal execution after an $(I Assert Failure).)
    )
    )

$(H3 $(LNAME2 mixin_expressions, Mixin Expressions))

$(GRAMMAR
$(GNAME MixinExpression):
    $(D mixin $(LPAREN)) $(GLINK ArgumentList) $(D $(RPAREN))
)

    $(P Each $(GLINK AssignExpression) in the $(I ArgumentList) is
        evaluated at compile time, and the result must be representable
        as a string.
        The resulting strings are concatenated to form a string.
        The text contents of the string must be compilable as a valid
        $(GLINK Expression), and is compiled as such.)

        ---
        int foo(int x)
        {
            return mixin("x +", 1) * 7;  // same as ((x + 1) * 7)
        }
        ---

$(H3 $(LNAME2 import_expressions, Import Expressions))

$(GRAMMAR
$(GNAME ImportExpression):
    $(D import $(LPAREN)) $(GLINK AssignExpression) $(D $(RPAREN))
)

    $(P The $(I AssignExpression) must evaluate at compile time
        to a constant string.
        The text contents of the string are interpreted as a file
        name. The file is read, and the exact contents of the file
        become a string literal.
    )

    $(P Implementations may restrict the file name in order to avoid
        directory traversal security vulnerabilities.
        A possible restriction might be to disallow any path components
        in the file name.
    )

    $(P Note that by default an import expression will not compile unless
        one or more paths are passed via the $(B -J) switch. This tells the compiler
        where it should look for the files to import. This is a security feature.)

        ---
        void foo()
        {
            // Prints contents of file foo.txt
            writeln(import("foo.txt"));
        }
        ---

$(H3 $(LNAME2 typeid_expressions, Typeid Expressions))

$(GRAMMAR
$(GNAME TypeidExpression):
    $(D typeid $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN))
    $(D typeid $(LPAREN)) $(GLINK Expression) $(D $(RPAREN))
)

    $(P If $(I Type), returns an instance of class
        $(DPLLINK phobos/object.html, $(D TypeInfo))
        corresponding
        to $(I Type).
    )

    $(P If $(I Expression), returns an instance of class
        $(DPLLINK phobos/object.html, $(D TypeInfo))
        corresponding
        to the type of the $(I Expression).
        If the type is a class, it returns the $(D TypeInfo)
        of the dynamic type (i.e. the most derived type).
        The $(I Expression) is always executed.)

        ---
        class A { }
        class B : A { }

        void main()
        {
            writeln(typeid(int));        // int
            uint i;
            writeln(typeid(i++));        // uint
            writeln(i);                  // 1
            A a = new B();
            writeln(typeid(a));          // B
            writeln(typeid(typeof(a)));  // A
        }
        ---

$(H3 $(LNAME2 is_expression, IsExpression))

$(GRAMMAR
$(GNAME IsExpression):
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(D :) $(GLINK TypeSpecialization) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(D ==) $(GLINK TypeSpecialization) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(D :) $(GLINK TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(D ==) $(GLINK TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(IDENTIFIER) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(IDENTIFIER) $(D :) $(GLINK TypeSpecialization) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(IDENTIFIER) $(D ==) $(GLINK TypeSpecialization) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(IDENTIFIER) $(D :) $(GLINK TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))
    $(D is $(LPAREN)) $(GLINK2 type, Type) $(IDENTIFIER) $(D ==) $(GLINK TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))


$(GNAME TypeSpecialization):
    $(GLINK2 type, Type)
    $(D struct)
    $(D union)
    $(D class)
    $(D interface)
    $(D enum)
    $(D __vector)
    $(D function)
    $(D delegate)
    $(D super)
    $(D const)
    $(D immutable)
    $(D inout)
    $(D shared)
    $(D return)
    $(D __parameters)
    $(D module)
    $(D package)
)

    $(P $(I IsExpression)s are evaluated at compile time and are
        used for checking for valid types, comparing types for equivalence,
        determining if one type can be implicitly converted to another,
        and deducing the subtypes of a type.
        The result of an $(I IsExpression) is a boolean of value `true`
        if the condition is satisfied. If the condition is not satisfied,
        the result is a boolean of value `false`.
    )

    $(P $(I Type) is the type being tested. It must be syntactically
        correct, but it need not be semantically correct.
        If it is not semantically correct, the condition is not satisfied.
    )

    $(P $(IDENTIFIER) is declared to be an alias of the resulting
        type if the condition is satisfied. The $(IDENTIFIER) forms
        can only be used if the $(I IsExpression) appears in a
        $(GLINK2 version, StaticIfCondition).
    )

    $(P $(I TypeSpecialization) is the type that $(I Type) is being
        compared against.
    )

    $(P The forms of the $(I IsExpression) are:
    )

    $(OL

        $(LI $(D is $(LPAREN)) $(I Type) $(D $(RPAREN))$(BR)
        The condition is satisfied if $(D Type) is semantically
        correct (it must be syntactically correct regardless).

-------------
alias int func(int);    // func is a alias to a function type
void foo()
{
    if (is(func[]))     // not satisfied because arrays of
                        // functions are not allowed
        writeln("satisfied");
    else
        writeln("not satisfied");

    if (is([][]))       // error, [][] is not a syntactically valid type
        ...
}
-------------
        )

        $(LI $(D is $(LPAREN)) $(I Type) $(D :) $(I TypeSpecialization) $(D $(RPAREN))$(BR)
        The condition is satisfied if $(I Type) is semantically
        correct and it is the same as
        or can be implicitly converted to $(I TypeSpecialization).
        $(I TypeSpecialization) is only allowed to be a $(I Type).

-------------
alias Bar = short;
void foo()
{
    if (is(Bar : int))   // satisfied because short can be
                         // implicitly converted to int
        writeln("satisfied");
    else
        writeln("not satisfied");
}
-------------
        )

        $(LI $(D is $(LPAREN)) $(I Type) $(D ==) $(I TypeSpecialization) $(D $(RPAREN))$(BR)

        The condition is satisfied if $(I Type) is semantically correct and is
        the same type as $(I TypeSpecialization).

        If $(I TypeSpecialization) is one of

                $(D struct)
                $(D union)
                $(D class)
                $(D interface)
                $(D enum)
                $(D function)
                $(D delegate)
                $(D const)
                $(D immutable)
                $(D shared)
                $(D module)
                $(D package)

        then the condition is satisfied if $(I Type) is one of those. $(DDSUBLINK
        spec/module, package-module, Package modules) are considered to be both
        packages and modules.

-------------
alias Bar = short;
void foo()
{
    if (is(Bar == int))   // not satisfied because short is not
                          // the same type as int
        writeln("satisfied");
    else
        writeln("not satisfied");
}
-------------
        )

        $(LI $(D is $(LPAREN)) $(I Type) $(I Identifier) $(D $(RPAREN))$(BR)
        The condition is satisfied if $(I Type) is semantically
        correct. If so, $(I Identifier)
        is declared to be an alias of $(I Type).

-------------
alias Bar = short;
void foo()
{
    static if (is(Bar T))
        alias S = T;
    else
        alias S = long;

    writeln(typeid(S)); // prints "short"
    if (is(Bar T))      // error, Identifier T form can
                        // only be in StaticIfConditions
        ...
}
-------------
        )

        $(LI $(D is $(LPAREN)) $(I Type) $(I Identifier) $(D :) $(I TypeSpecialization) $(D $(RPAREN))$(BR)

        The condition is satisfied if $(I Type) is the same as
        $(I TypeSpecialization), or if $(I Type) is a class and
        $(I TypeSpecialization) is a base class or base interface
        of it.
        The $(I Identifier) is declared to be either an alias of the
        $(I TypeSpecialization) or, if $(I TypeSpecialization) is
        dependent on $(I Identifier), the deduced type.

-------------
alias Bar = int;
alias Abc = long*;
void foo()
{
    static if (is(Bar T : int))
        alias S = T;
    else
        alias S = long;

    writeln(typeid(S));  // prints "int"

    static if (is(Abc U : U*))
    {
        U u;
        writeln(typeid(typeof(u)));  // prints "long"
    }
}
-------------

        The way the type of $(I Identifier) is determined is analogous
        to the way template parameter types are determined by
        $(GLINK2 template, TemplateTypeParameterSpecialization).
        )

        $(LI $(D is $(LPAREN)) $(I Type) $(I Identifier) $(D ==) $(I TypeSpecialization) $(D $(RPAREN))$(BR)


        The condition is satisfied if $(I Type) is semantically
        correct and is the same as $(I TypeSpecialization).
        The $(I Identifier) is declared to be either an alias of the
        $(I TypeSpecialization) or, if $(I TypeSpecialization) is
        dependent on $(I Identifier), the deduced type.

        If $(I TypeSpecialization) is one of
               $(D struct)
                $(D union)
                $(D class)
                $(D interface)
                $(D enum)
                $(D function)
                $(D delegate)
           $(D const)
                $(D immutable)
                $(D shared)

        then the condition is satisfied if $(I Type) is one of those.
        Furthermore, $(I Identifier) is set to be an alias of the type:

        $(TABLE_2COLS ,
        $(THEAD keyword, alias type for $(I Identifier))

        $(TROW $(CODE struct), $(I Type))
        $(TROW $(D union), $(I Type))
        $(TROW $(D class), $(I Type))
        $(TROW $(D interface), $(I Type))
        $(TROW $(D super), $(I TypeSeq) of base classes and interfaces)
        $(TROW $(D enum), the base type of the enum)
        $(TROW $(D function), $(ARGS $(I TypeSeq) of the function parameter types.
             For C- and D-style variadic functions,
             only the non-variadic parameters are included.
             For typesafe variadic functions, the $(D ...) is ignored.))
        $(TROW $(CODE delegate), the function type of the delegate)
        $(TROW $(CODE return), $(ARGS the return type of the function, delegate, or function pointer))
        $(TROW $(CODE __parameters), $(ARGS the parameter sequence of a function, delegate, or function pointer.
         This includes the parameter types, names, and default values.))
        $(TROW $(D const), $(I Type))
        $(TROW
        $(D immutable),
        $(I Type)
        )
        $(TROW
        $(CODE shared),
        $(I Type)
        )

        )

-------------
alias Bar = short;
enum E : byte { Emember }
void foo()
{
    static if (is(Bar T == int))   // not satisfied, short is not int
        alias S = T;
    alias U = T;                   // error, T is not defined

    static if (is(E V == enum))    // satisfied, E is an enum
        V v;                       // v is declared to be a byte
}
-------------

        )

        $(LI $(D is $(LPAREN)) $(I Type) $(D :) $(I TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))$(BR)
             $(D is $(LPAREN)) $(I Type) $(D ==) $(I TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))$(BR)
             $(D is $(LPAREN)) $(I Type) $(I Identifier) $(D :) $(I TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))$(BR)
             $(D is $(LPAREN)) $(I Type) $(I Identifier) $(D ==) $(I TypeSpecialization) $(D ,) $(GLINK2 template, TemplateParameterList) $(D $(RPAREN))

        More complex types can be pattern matched; the
        $(GLINK2 template, TemplateParameterList) declares symbols based on the
        parts of the pattern that are matched, analogously to the
        way implied template parameters are matched.

---
import std.stdio, std.typecons;

void main()
{
    alias Tup = Tuple!(int, string);
    alias AA = long[string];

    static if (is(Tup : Template!Args, alias Template, Args...))
    {
        writeln(__traits(isSame, Template, Tuple)); // true
        writeln(is(Template!(int, string) == Tup));  // true
        writeln(typeid(Args[0]));  // int
        writeln(typeid(Args[1]));  // immutable(char)[]
    }

    static if (is(AA T : T[U], U : string))
    {
        writeln(typeid(T));  // long
        writeln(typeid(U));  // string
    }

    static if (is(AA A : A[B], B : int))
    {
        assert(0);  // should not match, as B is not an int
    }

    static if (is(int[10] W : W[len], int len))
    {
        writeln(typeid(W));  // int
        writeln(len);        // 10
    }

    static if (is(int[10] X : X[len], int len : 5))
    {
        assert(0);  // should not match, len should be 10
    }
}
---

        )

    )

$(H2 $(LNAME2 specialkeywords, Special Keywords))

$(GRAMMAR
$(GNAME SpecialKeyword):
    $(RELATIVE_LINK2 specialkeywords, $(D __FILE__))
    $(RELATIVE_LINK2 specialkeywords, $(D __FILE_FULL_PATH__))
    $(RELATIVE_LINK2 specialkeywords, $(D __MODULE__))
    $(RELATIVE_LINK2 specialkeywords, $(D __LINE__))
    $(RELATIVE_LINK2 specialkeywords, $(D __FUNCTION__))
    $(RELATIVE_LINK2 specialkeywords, $(D __PRETTY_FUNCTION__))
)


    $(P $(CODE __FILE__) and $(CODE __LINE__) expand to the source
    file name and line number at the point of instantiation. The path of
    the source file is left up to the compiler. )

    $(P $(CODE __FILE_FULL_PATH__) expands to the absolute source
    file name at the point of instantiation.)

    $(P $(CODE __MODULE__) expands to the module name at the point of
    instantiation.)

    $(P $(CODE __FUNCTION__) expands to the fully qualified name of the
    function at the point of instantiation.)

    $(P $(CODE __PRETTY_FUNCTION__) is similar to $(CODE __FUNCTION__),
    but also expands the function return type, its parameter types,
    and its attributes.)

    $(P Example:)

    ---
    module test;
    import std.stdio;

    void test(string file = __FILE__, size_t line = __LINE__,
            string mod = __MODULE__, string func = __FUNCTION__,
            string pretty = __PRETTY_FUNCTION__,
            string fileFullPath = __FILE_FULL_PATH__)
    {
        writefln("file: '%s', line: '%s', module: '%s',\nfunction: '%s', " ~
            "pretty function: '%s',\nfile full path: '%s'",
            file, line, mod, func, pretty, fileFullPath);
    }

    int main(string[] args)
    {
        test();
        return 0;
    }
    ---

    $(P Assuming the file was at /example/test.d, this will output:)

$(CONSOLE
file: 'test.d', line: '13', module: 'test',
function: 'test.main', pretty function: 'int test.main(string[] args)',
file full path: '/example/test.d'
)

$(H2 $(LNAME2 associativity, Associativity and Commutativity))

    $(P An implementation may rearrange the evaluation of expressions
        according to arithmetic associativity and commutativity rules
        as long as, within that thread of execution, no observable
        difference is possible.
    )

    $(P This rule precludes any associative or commutative reordering of
        floating point expressions.
    )
$(SPEC_SUBNAV_PREV_NEXT pragma, Pragmas, statement, Statements)
)

Macros:
        CHAPTER=10
        TITLE=Expressions
        IDENTIFIER=$(GLINK_LEX Identifier)
        USUAL_ARITHMETIC_CONVERSIONS=$(DDSUBLINK spec/type, usual-arithmetic-conversions, Usual Arithmetic Conversions)
        INTEGER_PROMOTIONS=$(DDSUBLINK spec/type, integer-promotions, Integer Promotions)
        _=
