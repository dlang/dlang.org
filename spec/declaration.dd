Ddoc

$(SPEC_S Declarations,

$(HEADERNAV_TOC)

$(GRAMMAR
$(GNAME Declaration):
    $(GLINK2 function, FuncDeclaration)
    $(GLINK VarDeclarations)
    $(GLINK AliasDeclaration)
    $(GLINK AliasAssign)
    $(GLINK2 struct, AggregateDeclaration)
    $(GLINK2 enum, EnumDeclaration)
    $(GLINK2 module, ImportDeclaration)
    $(GLINK2 version, ConditionalDeclaration)
    $(GLINK2 version, StaticForeachDeclaration)
    $(GLINK2 version, StaticAssert)
)

$(GRAMMAR
$(GNAME VarDeclarations):
    $(GLINK StorageClasses)$(OPT) $(GLINK2 type, BasicType) $(GLINK Declarators) $(D ;)
    $(GLINK AutoDeclaration)

$(GNAME Declarators):
    $(GLINK DeclaratorInitializer)
    $(GLINK DeclaratorInitializer) $(D ,) $(GLINK DeclaratorIdentifierList)

$(GNAME DeclaratorInitializer):
    $(GLINK VarDeclarator)
    $(GLINK VarDeclarator) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK Initializer)
    $(GLINK AltDeclarator)
    $(GLINK AltDeclarator) $(D =) $(GLINK Initializer)

$(GNAME DeclaratorIdentifierList):
    $(GLINK DeclaratorIdentifier)
    $(GLINK DeclaratorIdentifier) $(D ,) $(GSELF DeclaratorIdentifierList)

$(GNAME DeclaratorIdentifier):
    $(GLINK VarDeclaratorIdentifier)
    $(GLINK AltDeclaratorIdentifier)

$(GNAME VarDeclaratorIdentifier):
    $(GLINK_LEX Identifier)
    $(GLINK_LEX Identifier) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK Initializer)

$(GNAME AltDeclaratorIdentifier):
    $(GLINK2 type, TypeSuffixes) $(GLINK_LEX Identifier) $(GLINK AltDeclaratorSuffixes)$(OPT)
    $(GLINK2 type, TypeSuffixes) $(GLINK_LEX Identifier) $(GLINK AltDeclaratorSuffixes)$(OPT) $(D =) $(GLINK Initializer)
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier) $(GLINK AltDeclaratorSuffixes)
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier) $(GLINK AltDeclaratorSuffixes) $(D =) $(GLINK Initializer)

$(GNAME Declarator):
    $(GLINK VarDeclarator)
    $(GLINK AltDeclarator)

$(GNAME VarDeclarator):
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier)

$(GNAME AltDeclarator):
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier) $(GLINK AltDeclaratorSuffixes)
    $(GLINK2 type, TypeSuffixes)$(OPT) $(D $(LPAREN)) $(GLINK AltDeclaratorInner) $(D $(RPAREN))
    $(GLINK2 type, TypeSuffixes)$(OPT) $(D $(LPAREN)) $(GLINK AltDeclaratorInner) $(D $(RPAREN)) $(GLINK AltFuncDeclaratorSuffix)
    $(GLINK2 type, TypeSuffixes)$(OPT) $(D $(LPAREN)) $(GLINK AltDeclaratorInner) $(D $(RPAREN)) $(GLINK AltDeclaratorSuffixes)

$(GNAME AltDeclaratorInner):
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier)
    $(GLINK2 type, TypeSuffixes)$(OPT) $(GLINK_LEX Identifier) $(GLINK AltFuncDeclaratorSuffix)
    $(GLINK AltDeclarator)

$(GNAME AltDeclaratorSuffixes):
    $(GLINK AltDeclaratorSuffix)
    $(GLINK AltDeclaratorSuffix) $(GSELF AltDeclaratorSuffixes)

$(GNAME AltDeclaratorSuffix):
    $(D [ ])
    $(D [) $(GLINK2 expression, AssignExpression) $(D ])
    $(D [) $(GLINK2 type, Type) $(D ])

$(GNAME AltFuncDeclaratorSuffix):
    $(GLINK2 function, Parameters) $(GLINK2 function, MemberFunctionAttributes)$(OPT)
)

$(GRAMMAR
$(GNAME StorageClasses):
    $(GLINK StorageClass)
    $(GLINK StorageClass) $(GSELF StorageClasses)

$(GNAME StorageClass):
$(MULTICOLS 5,     $(GLINK2 attribute, LinkageAttribute)
    $(GLINK2 attribute, AlignAttribute)
    $(GLINK2 attribute, AtAttribute)
    $(D deprecated)
    $(D enum)
    $(D static)
    $(RELATIVE_LINK2 extern, $(D extern))
    $(D abstract)
    $(D final)
    $(D override)
    $(D synchronized)
    $(D auto)
    $(D scope)
    $(D const)
    $(D immutable)
    $(D inout)
    $(D shared)
    $(D __gshared)
    $(GLINK2 attribute, Property)
    $(D nothrow)
    $(D pure)
    $(D ref))
)

$(GRAMMAR
$(GNAME Initializer):
    $(GLINK VoidInitializer)
    $(GLINK NonVoidInitializer)

$(GNAME NonVoidInitializer):
    $(GLINK ExpInitializer)
    $(GLINK ArrayInitializer)
    $(GLINK StructInitializer)

$(GNAME ExpInitializer):
    $(GLINK2 expression, AssignExpression)

$(GNAME ArrayInitializer):
    $(D [) $(GLINK ArrayMemberInitializations)$(OPT) $(D ])

$(GNAME ArrayMemberInitializations):
    $(GLINK ArrayMemberInitialization)
    $(GLINK ArrayMemberInitialization) $(D ,)
    $(GLINK ArrayMemberInitialization) $(D ,) $(GSELF ArrayMemberInitializations)

$(GNAME ArrayMemberInitialization):
    $(GLINK NonVoidInitializer)
    $(GLINK2 expression, AssignExpression) $(D :) $(GLINK NonVoidInitializer)

$(GNAME StructInitializer):
    $(D {) $(GLINK StructMemberInitializers)$(OPT) $(D })

$(GNAME StructMemberInitializers):
    $(GLINK StructMemberInitializer)
    $(GLINK StructMemberInitializer) $(D ,)
    $(GLINK StructMemberInitializer) $(D ,) $(GSELF StructMemberInitializers)

$(GNAME StructMemberInitializer):
    $(GLINK NonVoidInitializer)
    $(GLINK_LEX Identifier) $(D :) $(GLINK NonVoidInitializer)
)

$(H2 $(LNAME2 declaration_syntax, Declaration Syntax))

$(P Declaration syntax generally reads right to left, including arrays:)

--------------------
int x;    // x is an int
int* x;   // x is a pointer to int
int** x;  // x is a pointer to a pointer to int

int[] x;  // x is an array of ints
int*[] x; // x is an array of pointers to ints
int[]* x; // x is a pointer to an array of ints

int[3] x;     // x is a static array of 3 ints
int[3][5] x;  // x is a static array of 5 static arrays of 3 ints
int[3]*[5] x; // x is a static array of 5 pointers to static arrays of 3 ints
--------------------

$(H3 $(LNAME2 pointers-to-functions, Pointers to Functions))

$(P
Pointers to functions are declared using the $(D function) keyword:
)

--------------------
int function(char) x; // x is a pointer to
                     // a function taking a char argument
                     // and returning an int
int function(char)[] x; // x is an array of
                     // pointers to functions
                     // taking a char argument
                     // and returning an int
--------------------

$(H3 $(LNAME2 c-style-declarations, C-Style Declarations))

$(P
C-style array, function pointer and pointer to array declarations are deprecated:
)

--------------------
int x[3];          // x is a static array of 3 ints
int x[3][5];       // x is a static array of 3 arrays of 5 ints

int (*x[5])[3];    // x is a static array of 5 pointers to static arrays of 3 ints
int (*x)(char);    // x is a pointer to a function taking a char argument
                   // and returning an int
int (*[] x)(char); // x is an array of pointers to functions
                   // taking a char argument and returning an int
--------------------

$(H3 $(LNAME2 declaring-multiple-symbols, Declaring Multiple Symbols))

$(P
In a declaration declaring multiple symbols, all the declarations
must be of the same type:
)

--------------------
int x,y;   // x and y are ints
int* x,y;  // x and y are pointers to ints
int[] x,y; // x and y are arrays of ints

// invalid C-style declarations
int x,*y;  // error, multiple types
int x[],y; // error, multiple types
--------------------

$(H2 $(LEGACY_LNAME2 AutoDeclaration, auto-declaration, Implicit Type Inference))

$(GRAMMAR
$(GNAME AutoDeclaration):
    $(GLINK StorageClasses) $(GLINK AutoAssignments) $(D ;)

$(GNAME AutoAssignments):
    $(GLINK AutoAssignment)
    $(GSELF AutoAssignments) $(D ,) $(GLINK AutoAssignment)

$(GNAME AutoAssignment):
    $(GLINK_LEX Identifier) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK Initializer)
)

        $(P If a declaration starts with a $(I StorageClass) and has
        a $(I NonVoidInitializer) from which the type can be inferred,
        the type on the declaration can be omitted.
        )

----------
static x = 3;      // x is type int
auto y = 4u;       // y is type uint

auto s = "Apollo"; // s is type immutable(char)[] i.e., string

class C { ... }

auto c = new C();  // c is a handle to an instance of class C
----------

        $(P The $(I NonVoidInitializer) cannot contain forward references
        (this restriction may be removed in the future).
        The implicitly inferred type is statically bound
        to the declaration at compile time, not run time.
        )

        $(P An $(GLINK2 expression, ArrayLiteral)
        is inferred to be a dynamic array
        type rather than a static array:)

        ---
        auto v = ["resistance", "is", "useless"]; // type is string[], not string[3]
        ---


$(H2 $(LNAME2 alias, Alias Declarations))

$(GRAMMAR
$(GNAME AliasDeclaration):
    $(D alias) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, BasicType) $(GLINK Declarators) $(D ;)
    $(D alias) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, BasicType) $(GLINK2 function, FuncDeclarator) $(D ;)
    $(D alias) $(GLINK AliasAssignments) $(D ;)

$(GNAME AliasAssignments):
    $(GLINK AliasAssignment)
    $(GSELF AliasAssignments) $(D ,) $(GLINK AliasAssignment)

$(GNAME AliasAssignment):
    $(GLINK_LEX Identifier) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, Type)
    $(GLINK_LEX Identifier) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK2 expression, FunctionLiteral)
    $(GLINK_LEX Identifier) $(GLINK2 template, TemplateParameters)$(OPT) $(D =) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, BasicType) $(GLINK2 function, Parameters) $(GLINK2 function, MemberFunctionAttributes)$(OPT)
)

    $(P $(I AliasDeclaration)s create a symbol that is an alias for another type,
        and can be used anywhere that other type may appear.
    )

--------------------
alias myint = abc.Foo.bar;
--------------------

        $(P
        Aliased types are semantically identical to the types they are aliased to. The
        debugger cannot distinguish between them, and there is no difference as far as function
        overloading is concerned. For example:
        )

--------------------
alias myint = int;

void foo(int x) { ... }
void foo(myint m) { ... } // error, multiply defined function foo
--------------------

    $(P A symbol can be declared as an $(I alias) of another symbol.
        For example:
    )

        ---
        import planets;

        alias myAlbedo = planets.albedo;
        ...
        int len = myAlbedo("Saturn"); // actually calls planets.albedo()
        ---

        $(P
        The following alias declarations are valid:
        )

--------------------
template Foo2(T) { alias t = T; }
alias t1 = Foo2!(int);
alias t2 = Foo2!(int).t;
alias t3 = t1.t;
alias t4 = t2;

t1.t v1;  // v1 is type int
t2 v2;    // v2 is type int
t3 v3;    // v3 is type int
t4 v4;    // v4 is type int

alias Fun = int(string p);
int fun(string){return 0;}
static assert(is(typeof(fun) == Fun));

alias MemberFun1 = int() const;
alias MemberFun2 = const int();
// leading attributes apply to the func, not the return type
static assert(is(MemberFun1 == MemberFun2));
--------------------

        $(P
        Aliased symbols are useful as a shorthand for a long qualified
        symbol name, or as a way to redirect references from one symbol
        to another:
        )

--------------------
version (Win32)
{
    alias myfoo = win32.foo;
}
version (linux)
{
    alias myfoo = linux.bar;
}
--------------------

        $(P
        Aliasing can be used to `import` a symbol from an import into the
        current scope:
        )

--------------------
alias strlen = string.strlen;
--------------------

        $(P
        Aliases can also `import` a set of overloaded functions, that can
        be overloaded with functions in the current scope:
        )

--------------------
class A
{
    int foo(int a) { return 1; }
}

class B : A
{
    int foo( int a, uint b ) { return 2; }
}

class C : B
{
    int foo( int a ) { return 3; }
    alias foo = B.foo;
}

class D : C
{
}

void test()
{
    D b = new D();
    int i;

    i = b.foo(1, 2u);   // calls B.foo
    i = b.foo(1);       // calls C.foo
}
--------------------

        $(P
        $(B Note:) Type aliases can sometimes look indistinguishable from
        alias declarations:
        )

--------------------
alias abc = foo.bar; // is it a type or a symbol?
--------------------

        $(P
        The distinction is made in the semantic analysis pass.
        )

        $(P Aliases cannot be used for expressions:)

-----------
struct S
{
    static int i;
    static int j;
}

alias a = S.i; // OK, `S.i` is a symbol
alias b = S.j; // OK. `S.j` is also a symbol
alias c = a + b; // illegal, `a + b` is an expression
a = 2;         // sets `S.i` to `2`
b = 4;         // sets `S.j` to `4`
-----------

$(H2 $(LNAME2 AliasAssign, Alias Assign))

$(GRAMMAR
$(GNAME AliasAssign):
    $(GLINK_LEX Identifier) $(D =) $(GLINK2 type, Type)
)

        $(P An $(GLINK AliasDeclaration) can have a new value assigned to it with an
        $(I AliasAssign):)

---
template Gorgon(T)
{
    alias A = long;
    A = T; // assign new value to A
    alias Gorgon = A;
}
pragma(msg, Gorgon!int); // prints int
---

$(UL
$(LI The $(I AliasAssign) and its corresponding $(I AliasDeclaration) must both be
declared in the same $(GLINK2 template, TemplateDeclaration).)

$(LI The corresponding $(I AliasDeclaration) must appear lexically before the
$(I AliasAssign).)

$(LI The corresponding $(I AliasDeclaration) may not refer to overloaded symbols.)

$(LI The value of an $(I AliasDeclaration) or left hand side (lvalue) of an $(I AliasAssign) may not be used prior
to another $(I AliasAssign) to the same lvalue other than in the right hand side of that $(I AliasAssign).)

)

        $(BEST_PRACTICE
        $(I AliasAssign) is particularly useful when using an iterative
        computation rather than a recursive one, as it avoids creating
        the large number of intermediate templates that the recursive one
        engenders.
---
template AliasSeq(T...) { alias AliasSeq = T; }

static if (0) // recursive method for comparison
{
    template Reverse(T...)
    {
        static if (T.length == 0)
            alias Reverse = AliasSeq!();
        else
            alias Reverse = AliasSeq!(Reverse!(T[1 .. T.length]), T[0]);
    }
}
else // iterative method minimizes template instantiations
{
    template Reverse(T...)
    {
        alias A = AliasSeq!();
        static foreach (t; T)
            A = AliasSeq!(t, A); // Alias Assign
        alias Reverse = A;
    }
}

enum X = 3;
alias TK = Reverse!(int, const uint, X);
pragma(msg, TK); // prints tuple(3, (const(uint)), (int))
---
        )

$(H2 $(LNAME2 alias-reassignment, Alias Reassignment))

$(GRAMMAR
$(GNAME AliasReassignment):
    $(GLINK_LEX Identifier) $(D =) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, Type)
    $(GLINK_LEX Identifier) $(D =) $(GLINK2 expression, FunctionLiteral)
    $(GLINK_LEX Identifier) $(D =) $(GLINK StorageClasses)$(OPT) $(GLINK2 type, BasicType) $(GLINK2 function, Parameters) $(GLINK2 function, MemberFunctionAttributes)$(OPT)
)

        $(P An alias declaration inside a template can be reassigned a new value.)

        ---
        template staticMap(alias F, T...)
        {
            alias A = AliasSeq!();
            static foreach (t; T)
                A = AliasSeq!(A, F!T); // alias reassignment
            alias staticMap = A;
        }
        ---

        $(P The $(I Identifier) must resolve to a lexically preceding $(GLINK AliasDeclaration).
        Both must be members of the same $(GLINK2 template, TemplateDeclaration).
        )

        $(P The right hand side of the $(I AliasReassignment) replaces the right hand side of the
        $(I AliasDeclaration).
        )

        $(P Once the $(I AliasDeclaration) has been referred to in any context other than the
        right hand side of an $(I AliasReassignment) it can no longer be reassigned.
        )

        $(RATIONALE Alias reassignment can result in faster compile times and lowered memory consumption,
        and requires significantly simpler code than the alternative recursive method.)



$(H2 $(LNAME2 extern, Extern Declarations))

$(P Variable declarations with the storage class $(D extern) are not allocated
storage within the module. They must be defined in some other object file with a
matching name which is then linked in.)

$(P An $(D extern) declaration can optionally be followed by an $(D extern)
$(LINK2 attribute.html$(HASH)linkage, linkage attribute). If there is no linkage
attribute it defaults to $(D extern(D)):)

---------------
// variable allocated and initialized in this module with C linkage
extern(C) int foo;
// variable allocated outside this module with C linkage
// (e.g. in a statically linked C library or another module)
extern extern(C) int bar;
---------------

        $(BEST_PRACTICE
        $(OL
        $(LI The primary usefulness of $(I Extern Declarations) is to
        connect with global variables declarations and functions in C or C++ files.)
        ))

$(H2 $(LNAME2 void_init, Void Initializations))

$(GRAMMAR
$(GNAME VoidInitializer):
    $(D void)
)

        $(P Normally, variables are initialized either with an explicit
        $(GLINK Initializer) or are set to the default value for the
        type of the variable. If the $(I Initializer) is $(D void),
        however, the variable is not initialized. If its value is
        used before it is set, undefined program behavior will result.
        )

        $(IMPLEMENTATION_DEFINED If a void initialized variable's value is
        used before it is set, its value is implementation defined.

        ---
        void bad()
        {
            int x = void;
            writeln(x);  // print implementation defined value
        }
        ---
        )

        $(UNDEFINED_BEHAVIOR If a void initialized variable's value is
        used before it is set, and the value is a reference, pointer or an instance
        of a struct with an invariant, the behavior is undefined.

        ---
        void muchWorse()
        {
            char[] p = void;
            writeln(p);  // may result in apocalypse
        }
        ---
        )

        $(BEST_PRACTICE
        $(OL
        $(LI Void initializers are useful when a static array is on the stack,
        but may only be partially used, such as as a temporary buffer.
        Void initializers will potentially speed up the code, but they introduce risk, since one must ensure
        that array elements are always set before read.)
        $(LI The same is true for structs.)
        $(LI Use of void initializers is rarely useful for individual local variables,
        as a modern optimizer will remove the dead store of its initialization if it is
        initialized later.)
        $(LI For hot code paths, it is worth profiling to see if the void initializer
        actually improves results.)
        )
        )

$(H2 $(LNAME2 global_static_init, Global and Static Initializers))

        $(P The $(GLINK Initializer) for a global or static variable must be
        evaluatable at compile time.
        Runtime initialization is done with static constructors.
        )

        $(IMPLEMENTATION_DEFINED
        $(OL
        $(LI Whether some pointers can be initialized with the addresses of other
        functions or data.)
        ))

$(H2 $(LNAME2 typequal_vs_storageclass, Type Qualifiers vs. Storage Classes))

        $(P Type qualifer and storage classes are distinct.)

        $(P A $(I type qualifier) creates a derived type from an existing base
        type, and the resulting type may be used to create multiple instances
        of that type.)

        $(P For example, the $(D immutable) type qualifier can be used to
        create variables of immutable type, such as:)

--------
immutable(int)   x; // typeof(x) == immutable(int)
immutable(int)[] y; // typeof(y) == immutable(int)[]
                    // typeof(y[0]) == immutable(int)

// Type constructors create new types that can be aliased:
alias ImmutableInt = immutable(int);
ImmutableInt z;     // typeof(z) == immutable(int)
--------

        $(P A $(I storage class), on the other hand, does not create a new
        type, but describes only the kind of storage used by the variable or
        function being declared. For example, a member function can be declared
        with the $(D const) storage class to indicate that it does not modify
        its implicit $(D this) argument:)

--------
struct S
{
    int x;
    int method() const
    {
        //x++;    // Error: this method is const and cannot modify this.x
        return x; // OK: we can still read this.x
    }
}
--------

        $(P Although some keywords can be used both as a type qualifier and a
        storage class, there are some storage classes that cannot be used to
        construct new types, such as $(D ref):)

--------
// ref declares the parameter x to be passed by reference
void func(ref int x)
{
    x++; // so modifications to x will be visible in the caller
}

void main()
{
    auto x = 1;
    func(x);
    assert(x == 2);

    // However, ref is not a type qualifier, so the following is illegal:
    ref(int) y; // Error: ref is not a type qualifier.
}
--------

        $(P Functions can also be declared as `ref`, meaning their return value is
        passed by reference:)
--------
ref int func2()
{
    static int y = 0;
    return y;
}

void main()
{
    func2() = 2; // The return value of func2() can be modified.
    assert(func2() == 2);

    // However, the reference returned by func2() does not propagate to
    // variables, because the 'ref' only applies to the return value itself,
    // not to any subsequent variable created from it:
    auto x = func2();
    static assert(is(typeof(x) == int)); // N.B.: *not* ref(int);
                                     // there is no such type as ref(int).
    x++;
    assert(x == 3);
    assert(func2() == 2); // x is not a reference to what func2() returned; it
                          // does not inherit the ref storage class from func2().
}
--------

        $(P Some keywords, such as $(D const), can be used
        both as a type qualifier and a storage class.
        The distinction is determined by the syntax where it appears.)

        ---
        struct S
        {
            /* Is const here a type qualifier or a storage class?
             * Is the return value const(int), or is this a const function that returns
             * (mutable) int?
             */
            const int* func() // a const function
            {
                ++p;          // error, this.p is const
                return p;     // error, cannot convert const(int)* to int*
            }

            const(int)* func() // a function returning a pointer to a const int
            {
                ++p;          // ok, this.p is mutable
                return p;     // ok, int* can be implicitly converted to const(int)*
            }

            int* p;
        }
        ---

        $(BEST_PRACTICE To avoid confusion, the type qualifier
        syntax with parentheses should be used for return types,
        and function storage classes should be written on the right-hand side of the
        declaration instead of the left-hand side where it may be visually
        confused with the return type:

        ---
        struct S
        {
            // Now it is clear that the 'const' here applies to the return type:
            const(int) func1() { return 1; }

            // And it is clear that the 'const' here applies to the function:
            int func2() const { return 1; }
        }
        ---
        )

$(SPEC_SUBNAV_PREV_NEXT module, Modules, type, Types)
)


Macros:
        CHAPTER=5
        TITLE=Declarations
