Ddoc

$(D_S D Programming Language,

$(SECTION1 ,

$(DIVC intro, $(DIV, $(DIV,
    $(DIV,
        $(TC p, pitch, $(B D) is a general-purpose programming language with
        static typing, systems-level access, and C-like syntax.
        With the $(B D Programming Language), write fast,
        read fast, and run fast.
        $(BR)$(BR)Fast code, fast.)

        $(DIVC download,
            $(DIVC btn-group-vertical,
              <a href="download.html" class="btn">Downloads</a>
              $(SPANC smallprint, Latest version: $(LATEST)
                  &ndash; $(LINK2 changelog/$(LATEST).html, Changelog))
            )
        )
    )
    $(DIVID your-code-here,
        $(DIVCID fa-select, your-code-here-select-example,)
        $(DIVC tip,
            $(LINK2 https://forum.dlang.org/newpost/general?subject=%5Byour+code+here%5D, your code here)
            $(DIV,
                $(P Got a brief example illustrating D?)
                $(P Submit your code to the digitalmars.D forum specifying
                    "[your code here]" in the subject.)
                $(P Upon approval it will be showcased here on a random schedule.)
            )
        )
$(EXTRA_EXAMPLE_RUNNABLE Compute average line length for stdin,
$(RUNNABLE_EXAMPLE_STDIN
The D programming language
Modern convenience.
Modeling power.
Native efficiency.)
----
void main()
{
    import std.range, std.stdio;

    auto sum = 0.0;
    auto count = stdin
        //Get an input range set up to read one line at a time
        .byLine
        //Perform a transparent operation (as in the shell command tee)
        .tee!(l => sum += l.length)
        .walkLength;

    writeln("Average line length: ",
        count ? sum / count : 0);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Round floating point numbers,
$(RUNNABLE_EXAMPLE_STDIN 2.4 plus 2.4 equals 5 for sufficiently large values of 2.)
----
import std.algorithm, std.conv, std.functional,
    std.math, std.regex, std.stdio;

alias round = pipe!(to!real, std.math.round, to!string);
static reFloatingPoint = ctRegex!`[0-9]+\.[0-9]+`;

void main()
{
    // Replace anything that looks like a real
    // number with the rounded equivalent.
    stdin
        .byLine
        .map!(l => l.replaceAll!(c => c.hit.round)
                                (reFloatingPoint))
        .each!writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort lines,
$(RUNNABLE_EXAMPLE_STDIN
Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune)
----
import std.stdio, std.array, std.algorithm;

void main()
{
    stdin
        .byLineCopy
        .array
        .sort!((a, b) => a > b) // descending order
        .each!writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort an Array at Compile-Time,
----
void main()
{
    import std.algorithm, std.stdio;

    "Starting program".writeln;

    enum a = [ 3, 1, 2, 4, 0 ];
    // Sort data at compile-time
    static immutable b = sort(a);

    // Print the result _during_ compilation
    pragma(msg, "Finished compilation: ", b);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Invoke external programs,
----
void main()
{
    import std.exception, std.stdio, std.process;

    auto result = ["whoami"].execute;
    enforce(result.status == 0);
    result.output.write;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Print hex dump,
----
void main()
{
    import std.algorithm, std.stdio, std.file, std.range;
    enum cols = 14;
    // Split file into 14-byte chunks per row
    thisExePath.File("rb").byChunk(cols).take(20).each!(chunk =>
        // Use range formatting to format the
        // hexadecimal part and align the text part
        writefln!"%(%02X %)%*s  %s"(
            chunk,
            3 * (cols - chunk.length), "", // Padding
            chunk.map!(c => // Replace non-printable
                c < 0x20 || c > 0x7E ? '.' : char(c))));
}
----
)
$(EXTRA_EXAMPLE Start a minimal web server,
----
#!/usr/bin/env dub
/+ dub.sdl:
dependency "vibe-d" version="~>0.8.0"
+/
void main()
{
    import vibe.d;
    listenHTTP(":8080", (req, res) {
        res.writeBody("Hello, World: " ~ req.path);
    });
    runApplication();
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Initialize an Array in parallel,
----
void main()
{
    import std.datetime.stopwatch : benchmark;
    import std.math, std.parallelism, std.stdio;

    auto logs = new double[100_000];
    auto bm = benchmark!({
        foreach (i, ref elem; logs)
            elem = log(1.0 + i);
    }, {
        foreach (i, ref elem; logs.parallel)
            elem = log(1.0 + i);
    })(100); // number of executions of each tested function
    writefln("Linear init: %s msecs", bm[0].total!"msecs");
    writefln("Parallel init: %s msecs", bm[1].total!"msecs");
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Sort in-place across multiple arrays,
----
void main()
{
    import std.stdio : writefln;
    import std.algorithm.sorting : sort;
    import std.range : chain;

    int[] arr1 = [4, 9, 7];
    int[] arr2 = [5, 2, 1, 10];
    int[] arr3 = [6, 8, 3];
    // @nogc functions are guaranteed by the compiler
    // to be without any GC allocation
    () @nogc {
        sort(chain(arr1, arr2, arr3));
    }();
    writefln("%s\n%s\n%s\n", arr1, arr2, arr3);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Count frequencies of all 2-tuples,
----
void main()
{
    import std.stdio : writefln;
    int[char[2]] aa;
    auto arr = "ABBBA";

    // Iterate over all pairs in the string and observe each pair
    // ('A', 'B'), ('B', 'B'), ('B', 'A'), ...
    // String slicing doesn't allocate a copy
    foreach (i; 0 .. arr.length - 1)
        aa[arr[i .. $][0 .. 2]]++;

    foreach (key, value; aa)
        writefln("key: %s, value: %d", key, value);
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Tiny RPN calculator,
$(RUNNABLE_EXAMPLE_STDIN 2 3 3 4 + * *)
----
void main()
{
    import std.stdio, std.string, std.algorithm, std.conv;

    // Reduce the RPN expression using a stack
    readln.split.fold!((stack, op)
    {
        switch (op)
        {
            // Generate operator switch cases statically
            static foreach (c; "+-*/")
                case [c]:
                    return stack[0 .. $ - 2] ~
                        mixin("stack[$ - 2] " ~ c ~
                            " stack[$ - 1]");
            default: return stack ~ op.to!real;
        }
    })((real[]).init).writeln;
}
----
)
$(EXTRA_EXAMPLE_RUNNABLE Subtyping with alias this,
----
struct Point
{
    private double[2] p;
    // Forward all undefined symbols to p
    alias p this;
    double dot(Point rhs)
    {
        return p[0] * rhs.p[0] + p[1] * rhs.p[1];
    }
}
void main()
{
    import std.stdio : writeln;
    // Point behaves like a `double[2]` ...
    Point p1, p2; p1 = [2, 1], p2 = [1, 1];
    assert(p1[$ - 1] == 1);
    // ... but with extended functionality
    writeln("p1 dot p2 = ", p1.dot(p2));
}
----
)

) $(COMMENT your-code-here)
))) $(COMMENT intro, div, div)

$(COMMENT
Picking the frontpage example after the page has loaded leads to reflows
and re-rendering. Hence, we pick the example as soon as possible
)
$(SCRIPT
    (function() {
    // randomly pick one example and bootstrap the runnable editor
    var examples = document.getElementsByClassName('your-code-here-extra');
    var rouletteIndex = Math.floor(Math.random() * examples.length);
    var rouletteChild = examples[rouletteIndex];
    rouletteChild.style.display = "block";

    // build a list of the titles of all examples and add an option chooser to
    // allow switching between them
    var titles = Array.prototype.map.call(examples, function(e) {
        return e.getElementsByClassName("your-code-here-title")[0].innerText;
    });
    var sel = document.createElement("select");
    Array.prototype.forEach.call(titles, function(title, i) {
        var el = document.createElement("option");
        el.value = i;
        el.innerText = title;
        sel.appendChild(el);
    });
    sel.selectedIndex = rouletteIndex;
    sel.addEventListener("change", function(e) {
        examples[rouletteIndex].style.display = "none";
        rouletteIndex = sel.selectedIndex;
        examples[rouletteIndex].style.display = "block";
    });
    var selEl = document.getElementById("your-code-here-select-example");
    selEl.appendChild(sel);
    })();
)

$(DIVC call_to_donate,
    <h2>Support the D language</h2>
    <p class="center">D is made possible through the hard work and dedication of many volunteers,
        with the coordination and outreach of the D Language Foundation, a 501(c)(3) non-profit organization.
        You can help further the development of the D language and help grow our
        community by supporting the Foundation.
    </p>
    <p class="center">
        <a href="$(ROOT_DIR)foundation/donate.html" class="btn call_to_donate_btn">Donate</a>
        <a href="$(ROOT_DIR)foundation/index.html" class="btn subdued">Learn More About The Foundation</a>
        $(BR)
        $(BR)
        Lots of $(WHY_D_ICON heart) to our $(LINK2 $(ROOT_DIR)foundation/sponsors.html, sponsors) and
        $(LINK2 $(ROOT_DIR)foundation/contributors, contributors).
    </p>
)

$(DIVC org_list_header,
    <h3 class="center">
        Industry Proven
    </h3>
)

$(DIVC org_list,
    <a href="https://medium.com/@NetflixTechBlog/introducing-vectorflow-fe10d7f126b8"><img src="$(ROOT_DIR)images/orgs-using-d/netflix_small.png" /></a>
    <a href="https://dlang.org/blog/2017/05/24/faster-command-line-tools-in-d/"><img src="$(ROOT_DIR)images/orgs-using-d/ebay.jpg" /></a>
    <a href="https://dconf.org/2017/talks/watson.html"><img src="$(ROOT_DIR)images/orgs-using-d/remedy.png" /></a>
    <a href="https://dconf.org/2016/talks/lucarella.html"><img src="$(ROOT_DIR)images/orgs-using-d/sociomantic.png" /></a>
    <a href="http://tech.adroll.com/blog/data/2014/11/17/d-is-for-data-science.html"><img src="$(ROOT_DIR)images/orgs-using-d/da_roll.png" /></a>
    <a href="https://dconf.org/2016/talks/zvibel.html"><img src="$(ROOT_DIR)images/orgs-using-d/weka.png" /></a>
)

$(DIVC org_list_footer,
    <div class="center">
        <div id="front-testimonial">
            <div id="front-testimonial-quote">
                $(FA_ICON quote-left) D shines from low-level control
                to high-level abstraction $(FA_ICON quote-right) $(BR)
            </div>
            $(FA_ICON heart) $(LINK2 $(ROOT_DIR)orgs-using-d.html, Success stories)
            $(FA_ICON history) $(LINK2 $(ROOT_DIR)areas-of-d-usage.html, What is D used for?)
        </div>
    </div>
)

$(DIVC more,

$(DIVID news,
    $(DIVID forum-summary,
    <iframe src="https://forum.dlang.org/frame-announcements"></iframe>
    <iframe src="https://forum.dlang.org/frame-discussions"></iframe>
    )
    $(DIVID twitter,
    <a class="twitter-timeline" data-height="420" href="https://twitter.com/D_Programming?ref_src=twsrc%5Etfw">Tweets by D_Programming</a>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
    )
)

$(DIVC boxes,

    $(DIVC row,
        $(TOUR newspaper-o, News,
            $(P Stay updated with the latest posts in the
                $(LINK2 http://blog.dlang.org,
                    <cite>Official D Blog</cite>) from $(DBLOG_LATEST_DATE_1):
                $(LINK2 $(DBLOG_LATEST_LINK_1), $(DBLOG_LATEST_TITLE_1)) by
                $(DBLOG_LATEST_AUTHOR_1).
            )
            $(P
                From $(DBLOG_LATEST_DATE_2):
                $(LINK2 $(DBLOG_LATEST_LINK_2), $(DBLOG_LATEST_TITLE_2)) by
                $(DBLOG_LATEST_AUTHOR_2).
            )
        )
        $(TOUR graduation-cap, Learn,
            $(P Take the $(LINK2 https://tour.dlang.org,
                Tour), explore
                $(LINK2 $(ROOT_DIR)overview.html, major features) in D,
                browse the $(LINK2 $(ROOT_DIR)comparison.html, quick overview),
                start with $(LINK2 $(ROOT_DIR)ctod.html, C) or
                $(LINK2 $(ROOT_DIR)cpptod.html, C++) background,
                and ask questions in the
                $(LINK2 https://forum.dlang.org/group/digitalmars.D.learn,
                    Learn forum).
            )
            $(P For a deeper dive into D
                check out $(LINK2 https://wiki.dlang.org/Books, books) or
                $(LINK2 https://wiki.dlang.org/Videos, videos)
                such as Ali Çehreli's free book
                $(LINK2 http://ddili.org/ders/d.en/index.html,
                <cite>Programming in D</cite>).
            )
        )
    )
    $(DIVC row,
        $(TOUR comments, Community,
            $(P Discuss D on the $(LINK2 https://forum.dlang.org/, forums), join
                the $(LINK2 irc://irc.libera.chat/d, IRC channel), read our
                $(LINK2 https://dlang.org/blog, official Blog), or follow us
                on $(LINK2 https://twitter.com/D_Programming, Twitter).
                Browse the $(LINK2 https://wiki.dlang.org/, wiki), where among
                other things you can find the
                $(LINK2 https://wiki.dlang.org/Vision/2018H1, high-level vision)
                of the $(LINK2 $(ROOT_DIR)foundation_overview.html, D Language Foundation).
            )
        )
        $(TOUR book, Documentation,
            $(P Refer to the
                $(LINK2 $(ROOT_DIR)spec/spec.html, language specification) and
                the documentation of
                $(LINK2 $(ROOT_DIR)phobos/index.html, Phobos), D's standard
                library. The
                $(LINK2 $(ROOT_DIR)dmd.html, DMD manual) tells you how
                to use the compiler. Read
                $(LINK2 $(ROOT_DIR)articles.html, various articles) to deepen
                your understanding.
            )
        )
    )
    $(DIVC row,
        $(TOUR code-fork, Contribute,
            $(P Report any bugs you find to our $(LINK2 $(ROOT_DIR)bugstats.html,
                bug tracker). If you can fix an issue, make a pull request on
                $(LINK2 https://github.com/dlang, GitHub).
                There are $(LINK2 https://wiki.dlang.org/Get_involved, many other ways)
                to help, too!
            )
        )
        $(TOUR cubes, Packages,
            $(P DUB is the package manager for D.
                $(LINK2 https://code.dlang.org/getting_started,
                    Get started with DUB), and check out the
                $(LINK2 https://code.dlang.org/, available packages).
            )
        )
    )
    $(DIVC row,
        $(TOUR play, Run,
            $(P Configure linting,
                formatting or
                completion for
                your favorite $(LINK2 https://wiki.dlang.org/IDEs, IDE),
                $(LINK2 https://wiki.dlang.org/Editors, editor) or
                use $(LINK2 https://run.dlang.io, run.dlang.io) to play and experiment
                with D code.
            )
        )
        $(TOUR forward, Explore,
            $(P
                Learn about $(LINK2 https://qznc.github.io/d-tut, pragmatic D),
                the $(LINK2 $(ROOT_DIR)dstyle.html, DStyle),
                $(LINK2 https://p0nce.github.io/d-idioms, common D idioms) and
                $(LINK2 https://github.com/PhilippeSigaud/D-templates-tutorial, templates),

                See what's coming upcoming with $(LINK2 $(ROOT_DIR)changelog/pending.html, next version),
                explore $(LINK2 https://github.com/dlang/DIPs, D Improvement Proposals),
                and don't fear $(LINK2 https://dlang.org/blog/the-gc-series, D's garbage collection).

            )
        )
    )
)

$(DIVC whyd, $(SECTION2 Fast code$(COMMA) fast.,

$(DIVC section,
$(DIV, $(SECTION3 $(WHY_D_ICON magic) Write Fast,

$(P D allows writing large code fragments without redundantly specifying types,
like dynamic languages do. On the other hand, static inference deduces types and other
code properties, giving the best of both the static and the
dynamic worlds. $(EXAMPLE 1,
----
void main()
{
    // Define an array of numbers, double[].
    // Compiler recognizes the common
    // type of all initializers.
    auto arr = [ 1, 2, 3.14, 5.1, 6 ];
    // Dictionary that maps string to int,
    // type is spelled int[string]
    auto dictionary = [ "one" : 1, "two" : 2,
        "three" : 3 ];
    // Calls the min function defined below
    auto x = min(arr[0], dictionary["two"]);
}
// Type deduction works for function results.
// This is important for generic functions,
// such as min below, which works correctly
// for all comparable types.
auto min(T1, T2)(T1 lhs, T2 rhs)
{
    return rhs < lhs ? rhs : lhs;
}
----

))

$(P Automatic memory management makes for safe, simple, and robust code.
D also supports scoped resource management (aka the
$(HTTPS en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization, RAII) idiom)
and $(LINK2 spec/statement.html#ScopeGuardStatement, $(D scope) statements) for
deterministic transactional code that is easy to write and read. $(EXAMPLE 2,

----
import std.stdio;

class Widget { }

void main()
{
    // Automatically managed.
    auto w = new Widget;
    // Code is executed in any case upon scope exit.
    scope(exit) { writeln("Exiting main."); }
    // File is closed deterministically at scope's end.
    foreach (line; File("text.txt").byLine())
    {
        writeln(line);
    }
    writeln();
}
----
)
)

$(P Built-in linear and associative arrays, slices, and ranges make daily
programming simple and pleasant for tasks, both small and large. $(EXAMPLE 3,
$(RUNNABLE_EXAMPLE_STDIN
The D programming language
Modern convenience.
Modeling power.
Native efficiency.)
----
// Compute average line length for stdin
void main()
{
    import std.range, std.stdio;

    auto sum = 0.0;
    auto count = stdin.byLine
        .tee!(l => sum += l.length).walkLength;

    writeln("Average line length: ",
        count ? sum / count : 0);
}
----
))

)))

$(DIVC section, $(DIV, $(SECTION3 $(WHY_D_ICON rocket) Read Fast,

$(P The best paradigm is to not impose something at the expense of others.
D offers classic polymorphism, value semantics, functional
style, generics, generative programming, contract programming,
and more&mdash;all harmoniously integrated. $(EXAMPLE 4,
----
// Interfaces and classes
interface Printable
{
   void print(uint level)
   // contract is part of the interface
   in { assert(level > 0); }
}

// Interface implementation
class Widget : Printable
{
   void print(uint level)
   in{ }
   body{ }
}

// Single inheritance of state
class ExtendedWidget : Widget
{
   override void print(uint level)
   in { /* weakening precondition is okay */  }
   body
   {
       //... level may be 0 here ...
   }
}

// Immutable data shared across threads
immutable string programName = "demo";
// Mutable data is thread-local
int perThread = 42;
// Explicitly shared data
shared int perApp = 5;

// Structs have value semantics
struct BigNum
{
    // intercept copying
    this(this) { }
    // intercept destructor
    ~this() { }
}

void main()
{
    // ...
}
----
))

$(P D offers an innovative approach to concurrency, featuring true
immutable data, message passing, no sharing by default, and
controlled mutable sharing across threads. $(HTTP
informit.com/articles/article.aspx?p=1609144, Read more).)

$(P From simple scripts to large projects, D has the breadth
to scale with any application's needs: unit testing,
information hiding, refined modularity, fast compilation, precise
interfaces. $(HTTP drdobbs.com/high-performance-computing/217801225,
Read more).)

)))

$(DIVC section, $(DIV, $(SECTION3 $(WHY_D_ICON bolt) Run Fast,

$(P D compiles naturally to efficient native code.)

$(P D is designed such that most "obvious" code is fast $(I and)
safe. On occasion a function might need to escape the confines of type
safety for ultimate speed and control. For such rare cases D offers
native pointers, type casts, access to any C function without any
intervening translation, manual memory management, custom allocators
and even inline assembly code. $(EXAMPLE 5,
----
import core.stdc.stdlib;

void livingDangerously()
{
    // Access to C's malloc and free primitives
    enum bytes = float.sizeof * 1024 * 1024;
    auto buf = malloc(bytes);
    // free automatically upon scope exit
    scope(exit) free(buf);
    // Interprets memory as an array of floats
    auto floats = cast(float[]) buf[0 .. bytes];
    // Even stack allocation is possible
    auto moreBuf = alloca(4096 * 100);
    //...
}

// Using inline asm for extra speed on x86
uint checked_multiply(uint x, uint y)
{
    uint result;
    version (D_InlineAsm_X86)
    {
        // Inline assembler "sees" D variables and labels.
        asm
        {
            mov     EAX,x        ;
            mul     EAX,y        ;
            mov     result,EAX   ;
            jc      Loverflow    ;
        }
        return result;
    }
    else
    {
        result = x * y;
        if (!y || x <= uint.max / y)
           return result;
   }
Loverflow:
   throw new Exception("multiply overflow");
}

void main()
{
    // ...
}
----
))

$(P The $(D @safe), $(D @trusted), and $(D @system) function
attributes allow the programmer to best decide the safety-efficiency
tradeoffs of an application, and have the compiler check for
consistency. $(LINK2 spec/memory-safe-d.html, Read more).)

)))

)) $(COMMENT SECTION2 Why D?, DIVC whyd)
) $(COMMENT more)
) $(COMMENT SECTION1)
) $(COMMENT D_S)

Macros:
    TITLE=Home
    TAG=<$1>$+</$1>
    TAG2=<$1 $2>$3</$1>
    D=<span class="d_inlinecode">$0</span>
    EXAMPLE=$(TAG2 a, id="a$1-control" class="example-control", )$(TAG2 div, id="a$1" class="example-box", $(RUNNABLE_EXAMPLE $2))
    EXTRA_EXAMPLE=<div class="your-code-here-extra" style="display:none">
        $(DIVC your-code-here-title, $1)
        $+
    </div>
    EXTRA_EXAMPLE_RUNNABLE=$(EXTRA_EXAMPLE $1, $(RUNNABLE_EXAMPLE $+))
    _=
    LAYOUT_PREFIX=
    LAYOUT_SUFFIX=
    $(SCRIPTLOAD $(ROOT_DIR)js/platform-downloads.js,  data-latest="$(LATEST)")
    LAYOUT_TITLE=
    TOUR=$(DIVC item, $(SECTION4 $(LINK2 $1, $(TC i, fa fa-$2 big-icon)$3), $4))
    TOUR=$(DIVC item, $(SECTION4 $(TC i, fa fa-$1 big-icon)$2, $3))
    WHY_D_ICON=$(TC i, fa fa-$1 why-d-icon)
    _=
    META_DESCRIPTION=D is a general-purpose programming language with static typing, systems-level access, and C-like syntax.
    EXTRA_HEADERS=$(T style,
        .why-d-icon {
            padding-right: 0.2em;
        }
        .call_to_donate
        {
            padding: 40px 140px;
        }
        .call_to_donate h2
        {
            text-align: center;
            margin: 0 0 20px 0;
        }
        .call_to_donate p
        {
            font-size: 14px;
            max-width: 1000px;
            margin: 20px auto;
        }
        .call_to_donate .btn
        {
            font-size: 16px;
            padding: 0.6em 1em;
        }
        a.call_to_donate_btn
        {
            background-color: #B03931;
            border-color: #98312A;
            color: white;
        }
        a.call_to_donate_btn:hover
        {
            background-color: #742620;
            border-color: #98312A;
            color: white;
        }
        #front-testimonial
        {
            display: inline-block;
            padding-top: 15px;
        }
        #front-testimonial-quote
        {
            padding-bottom: 10px;
            font-size: 16px;
        }

        body#Home #content > .intro #your-code-here
        {
            padding-left: 1em;
            position: relative;
            width: 32em;
            max-width: 32em;
        }

        body#Home #content > .intro #your-code-here .tip
        {
            position: absolute;
            top: 0.1em;
            right: 0.3em;
            z-index: 1;
        }

        body#Home #content #tools,
        body#Home #content > .intro
        {
            background: #F5F5F5;
        }

        body#Home #content > h1
        {
            margin: 0;
        }

        body#Home #content > .intro
        {
            padding: 1em 0 1em;
            border-bottom: 1px solid #E6E6E6;
        }

        body#Home #content > .intro > div > div
        {
            display: table;
            width: 100%;
        }

        body#Home #content > .intro > div > div > *
        {
            display: table-cell;
        }

        body#Home #content > .intro .pitch
        {
            font-size: large;
            font-weight: 300;
            margin: auto;
            width: 22em;
        }

        body#Home #content > .intro .download
        {
            margin-top: 3em;
            text-align: center;
        }

        body#Home #content > .intro .download .btn
        {
            margin: 0 0.3em 0.3em 0.3em;
        }

        body#Home #content > .intro .download .btn.action
        {
            border-color: #98312A;
            background-color: #B03931;
            color: white;
        }

        body#Home #content > .intro .download .btn.action:hover
        {
            border-color: #943029;
            background-color: #742620;
            color: white;
        }

        body#Home #content > .intro #your-code-here pre
        {
            margin: 0;
        }

        body#Home div#news
        {
            float: right;
            width: 252px;
        }

        body#Home div#forum-summary
        {
            color: white;
            width: 100%;
            margin-right: 1em;
        }

        body#Home div#forum-summary > iframe
        {
            border: 0;
            width: 100%;
            height: 210px;
        }

        body#Home .more .boxes, body#Home .more .whyd
        {
            margin-right: 252px; /* prevent overlapping with #news */
            padding-right: 4em;
        }

        body#Home .boxes .item .big-icon
        {
            padding-right: 0.5em;
        }

        body#Home .whyd .section
        {
            margin-bottom: 1.5em;
            border-left: 5px solid #B03931;
            border-radius: 4px;
        }
        body#Home .whyd .section > div
        {
            border: 1px solid #E6E6E6;
            border-left: none;
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;
            padding: 1.5em;
        }
        body#Home .whyd .section > div > *:first-child
        {
            margin-top: 0;
        }
        body#Home .whyd .section > div > *:last-child
        {
            margin-bottom: 0;
        }

        body#Home > .container
        {
            max-width: none;
            padding: 0;
        }

        .org_list_header h3
        {
            margin: 1em 0 .5em;
        }

        .org_list
        {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px 0;

            display: flex;
            align-items: center;
            flex-direction: row;
            justify-content: space-evenly;
            flex-wrap: wrap;
        }

        .org_list a img
        {
            max-width: 150px;
            max-height: 60px;
        }

        .org_list_footer
        {
            margin-bottom: 3em;
        }

        .org_list_footer a
        {
            display: inline-block;
            padding: 0;
        }
        .org_list_footer a:not(:last-child)
        {
            padding-right: 10px;
        }

        body#Menu #content li.expand-container a::after
        {
            content: "";
        }

        body#Menu #content li.expand-container ul
        {
            display: block;
        }

        /* Narrow layout stage 2: forum/twitter widgets disappear from
        the home page, intro pitch and your-code-here layed out vertically */
        @media only screen and (max-width:54em)
        {
            body#Home #content > .intro > div > div
            {
                display: block;
                width: auto;
            }

            body#Home #content > .intro > div > div > *
            {
                display: block;
            }

            body#Home #content > .intro .pitch
            {
                max-width: 22em;
                width: auto;
            }

            body#Home #content > .intro #your-code-here
            {
                padding: 0;
                margin: auto;
                margin-top: 2em;
            }

            body#Home #news
            {
                display: none;
            }

            body#Home .more .boxes, body#Home .more .whyd
            {
                margin-right: 0;
                padding-right: 0;
            }

            .org_list a img
            {
                padding: 1em 2em;
            }

            .call_to_donate
            {
                padding: 40px 80px;
            }
        }

        /* Narrow layout stage 3: no more two column boxes */
        @media only screen and (max-width: 40em)
        {
            body#Home #content > .intro #your-code-here
            {
                /* change width to max-width */
                width: auto;
                max-width: 32em;
            }

            body#Home #content > .intro #your-code-here .tip {
                display: none;
            }

            #your-code-here-select-example select {
                width: 100%;
            }

            .call_to_donate
            {
                padding: 5px;
            }
            .call_to_donate .call_to_donate_btn
            {
                margin-bottom: 0.75em;
            }
        }

    )
    $(COMMENT index.html only for now, until we can figure out
              how to generate a URL to the current page for og:url)
    <meta property="og:title" content="$(FULL_TITLE)" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://dlang.org/" />
    <meta property="og:image" content="https://dlang.org/images/dlogo_opengraph.png" />
    <meta property="og:description" content="$(META_DESCRIPTION)" />
