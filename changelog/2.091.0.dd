Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Mar 08, 2020, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 18 major changes and 66 fixed Bugzilla issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 55 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 deallocator,Class deallocator have been removed from the language))
$(LI $(RELATIVE_LINK2 gnu-error-style,Can now report line numbers in GNU error style))
$(LI $(RELATIVE_LINK2 headers,Added experimental `C++` header generation from `extern(C|C++)` declarations))

)

$(BUGSTITLE_TEXT_HEADER Runtime changes,

$(LI $(RELATIVE_LINK2 add_missing_pthread_attr_destroy,Added missing `pthread_attr_destroy` in some place.))
$(LI $(RELATIVE_LINK2 expanded_windows_security_bindings,Expanded bindings in core.sys.windows.security))
$(LI $(RELATIVE_LINK2 std_unique_ptr,Added `core.stdcpp.memory.unique_ptr`))
$(LI $(RELATIVE_LINK2 tfd_timer_cancel_on_set,Added `TFD_TIMER_CANCEL_ON_SET`.))

)

$(BUGSTITLE_TEXT_HEADER Library changes,

$(LI $(RELATIVE_LINK2 bigint-safe,`std.bigint` is now `@safe`))
$(LI $(RELATIVE_LINK2 isClose,Replaced `approxEqual` by `isClose` in std.math.))
$(LI $(RELATIVE_LINK2 mangle_removed,Removed deprecated `std.format.Mangle`.))
$(LI $(RELATIVE_LINK2 remove-stdio-structs,Removed deprecated structs `ByLine`, `ByChunk`, `ByRecord` from `std.stdio`.))
$(LI $(RELATIVE_LINK2 remove-string-functions,Removed deprecated functions from `std.string`))
$(LI $(RELATIVE_LINK2 schwartzSort,`std.algorithm.sorting.schwartzSort` supports binary transform functions too))
$(LI $(RELATIVE_LINK2 std-functional-curry,Added curry to std.functional))

)

$(BUGSTITLE_TEXT_HEADER Installer changes,

$(LI $(RELATIVE_LINK2 install-sh-windows,The install script now runs on Windows))
$(LI $(RELATIVE_LINK2 windows,The Windows installation has received a couple of updates))

)

$(BUGSTITLE_TEXT_HEADER Dub changes,

$(LI $(RELATIVE_LINK2 env_variable_source_files_added,Environment variable SOURCE_FILES added))
$(LI $(RELATIVE_LINK2 zsh-completion,DUB now has zsh completion))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 deallocator,Class deallocator have been removed from the language)
$(CHANGELOG_SOURCE_FILE dmd, changelog/deallocator.dd)
$(P
Class deallocator have been deprecated in v2.080.0
(see $(LINK2 https://dlang.org/changelog/2.080.0.html#deprecate_class_allocators, the changelog entry)),
and turned into an error in v2.087.0.
They have now been completely removed from the language, and the parser won't recognize them anymore.
)
)

$(LI $(LNAME2 gnu-error-style,Can now report line numbers in GNU error style)
$(CHANGELOG_SOURCE_FILE dmd, changelog/gnu-error-style.dd)
$(P
DMD now supports reporting errors and warnings in GNU error style, that is, `filename:line[:column]: message`.
This may ease compatibility with existing IDEs.
)

$(P
Enable this style by calling DMD with `-verror-style=gnu`.
)
)

$(LI $(LNAME2 headers,Added experimental `C++` header generation from `extern(C|C++)` declarations)
$(CHANGELOG_SOURCE_FILE dmd, changelog/headers.dd)
$(P
DMD can now write C++ header files which contain bindings for declarations
in existing D files that were marked as `extern(C)` or `extern(C++)`.
)

$(P
This feature is available via the following command line switches:
- `-HC`: Write the generated headers to standard output
- `-HCf=<file>`: Write the generated headers to file
- `-HCd=<directory>`: Write the generated headers to file (not implemented yet)
)

$(P
Consider the following example:
)

```
module a;

extern(C) int foo(int a) { ... }
extern(C++) void bar() { ... }
void ignored() { ... }
```
```
module b;

extern (C++) struct S
{
    string name;
    this (string name) { ... }
    bool bar() { ... }
}
```
```
module c;

import a, b;

extern (C++) class C
{
    S[] s;
    this () {}
    bool bar() { ...}
}

```

$(P
Compiling these modules with `dmd -c -o- -HC a.d b.d c.d` will generate the following header:
)

```
#pragma once

// Automatically generated by dmd -HC

#include <assert.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#define _d_void void
#define _d_bool bool
#define _d_byte signed char
#define _d_ubyte unsigned char
#define _d_short short
#define _d_ushort unsigned short
#define _d_int int
#define _d_uint unsigned
#define _d_long long long
#define _d_ulong unsigned long long
#define _d_float float
#define _d_double double
#define _d_real long double
#define _d_char char
#define _d_wchar wchar_t
#define _d_dchar unsigned
typedef _d_long d_int64;
#define _d_null NULL

// Parsing module a
// Parsing module b
// Parsing module c
struct S;
extern "C" _d_int foo(_d_int a);

extern _d_void bar();

// ignoring function a.ignored because of linkage
struct S
{
    DArray< _d_char > name;
    S(DArray< _d_char > name);
    _d_bool bar();
    S() : name() {}
};

class C
{
public:
    DArray< S > s;
    C();
    virtual _d_bool bar();
};
```

$(P
Refer to the $(LINK2 $(ROOT_DIR)/spec/cpp_interface.html, documentation) for further information regarding C++ interoperation.
)

$(P
Note that this feature is considered experimental and might not work correctly sometimes.
Please open an issue in the $(LINK2 https://issues.dlang.org, bug tracker) if you encounter a bug while using this feature.
)
)


)

$(BUGSTITLE_TEXT_BODY Runtime changes,

$(LI $(LNAME2 add_missing_pthread_attr_destroy,Added missing `pthread_attr_destroy` in some place.)
$(CHANGELOG_SOURCE_FILE druntime, changelog/add_missing_pthread_attr_destroy.dd)
$(P
Added missing `pthread_attr_destroy`, this prevents memory leak in some OSes such as freebsd or solaris.
)
)

$(LI $(LNAME2 expanded_windows_security_bindings,Expanded bindings in core.sys.windows.security)
$(CHANGELOG_SOURCE_FILE druntime, changelog/expanded_windows_security_bindings.dd)
$(P
Many enum members were missing, the list is now reasonably up-to-date.
)
)

$(LI $(LNAME2 std_unique_ptr,Added `core.stdcpp.memory.unique_ptr`)
$(CHANGELOG_SOURCE_FILE druntime, changelog/std_unique_ptr.dd)
$(P
Added `core.stdcpp.memory.unique_ptr`, which corresponds to C++ `std::unique_ptr`.
)
)

$(LI $(LNAME2 tfd_timer_cancel_on_set,Added `TFD_TIMER_CANCEL_ON_SET`.)
$(CHANGELOG_SOURCE_FILE druntime, changelog/tfd_timer_cancel_on_set.dd)
$(P
Added `TFD_TIMER_CANCEL_ON_SET` option, which marks a timer as cancelable if the realtime clock is used.
)
)


)

$(BUGSTITLE_TEXT_BODY Library changes,

$(LI $(LNAME2 bigint-safe,`std.bigint` is now `@safe`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/bigint-safe.dd)
$(P
Many `BigInt` operations used to be `@system` because of assembly routines and casts from mutable to immutable data.
These parts are now marked `@trusted`, so that `BigInt` can now be used in `@safe` code.
)
)

$(LI $(LNAME2 isClose,Replaced `approxEqual` by `isClose` in std.math.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/isClose.dd)
$(P
The template `approxEqual` for comparing floating point numbers has
been replaced by the template `isClose`, which has better default
values and is symmetric in its arguments.
)

$(P
To (almost) keep the current behaviour of `approxEqual(a, b)` use
`isClose(a, b, 1e-2, 1e-2)`, but we recommend to adjust the code to
make it work with `isClose(a, b)`.
)

$(P
In one of the next releases `approxEqual` will be deprecated and
eventually removed.
)
)

$(LI $(LNAME2 mangle_removed,Removed deprecated `std.format.Mangle`.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/mangle_removed.dd)
$(P
The deprecated enum `Mangle` containing mangled names of basic types has been
removed. Use `std.demangle.demangle` instead to parse mangled names.
)
)

$(LI $(LNAME2 remove-stdio-structs,Removed deprecated structs `ByLine`, `ByChunk`, `ByRecord` from `std.stdio`.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/remove-stdio-structs.dd)
$(P
The deprecated structs `ByLine`, `ByChunk`, `ByRecord` have been removed from
`std.stdio`. Use the functions `byLine`, `byChunk`, `byRecord` instead.
)
)

$(LI $(LNAME2 remove-string-functions,Removed deprecated functions from `std.string`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/remove-string-functions.dd)
$(P
The deprecated functions `inPattern`, `countchars`, `removechars`, `squeeze`
and `munch` in `std.string` have been removed. Any code that still needs
them can use [UndeaD](https://github.com/dlang/undeaD) instead.
)
)

$(LI $(LNAME2 schwartzSort,`std.algorithm.sorting.schwartzSort` supports binary transform functions too)
$(CHANGELOG_SOURCE_FILE phobos, changelog/schwartzSort.dd)
$(P
The `transform` template parameter of $(REF schwartzSort, std, algorithm, sorting)
isn't restricted to unary functions taking an element anymore, but can
also be a binary function taking an element and its index in the
original range.
)

$(P
The original index can therefore be used when computing the transformed
value to sort by.
)
)

$(LI $(LNAME2 std-functional-curry,Added curry to std.functional)
$(CHANGELOG_SOURCE_FILE phobos, changelog/std-functional-curry.dd)
$(P
Converts a function of multiple parameters to a function of 1 parameter that
returns a function of 1 parameter... until it runs out of parameters and
evaluates the function.  Essentially:  f(x, y, z) == curry(f)(x)(y)(z)
)
)


)

$(BUGSTITLE_TEXT_BODY Installer changes,

$(LI $(LNAME2 install-sh-windows,The install script now runs on Windows)
$(CHANGELOG_SOURCE_FILE installer, changelog/install-sh-windows.dd)
$(P
The D installation script (install.sh, available at
$(LINK2 https://dlang.org/install.sh, dlang.org/install.sh))
now supports POSIX-like environments on Windows.
This allows installing and using Windows versions of DMD, LDC, and Dub
from e.g. CygWin or MSys2, thus providing a unified way of installing
D compilers across supported platforms.
)
)

$(LI $(LNAME2 windows,The Windows installation has received a couple of updates)
$(CHANGELOG_SOURCE_FILE installer, changelog/windows.dd)
$(P
- the released dmd.exe is now built with LDC for a reduction of compilation
  times of 30-40%.
- 64-bit builds of dmd.exe, dub.exe and lld-link.exe have been added to the bin64 folder
- The bundled Windows libraries and definitions have been changed from MinGW 5.0.2
  to MinGW 7.0.0 (with additional wide string `main` entrypoints).
- The bundled LLD linker on Windows has been upgraded to 9.0.0 (including a
  patch that allows exceptions to work on Win32).
- The VC runtime linked with the MinGW import libraries has been upgraded to
  msvcr120.dll (the last version that allows simple copying and no dependency
  on the universal C runtime). The redistributable DLLs have been added to the
  respective bin folder for immediate use without running additional installers.
- The curl libraries/DLLs have been updated to 7.68.
- ancient windbg.exe has been removed from the installation.
- The installer now detects an installation of VS 2019. If no VC installation is
  found the proposed download is not VS 2017 anymore, but VS 2019.
)
)


)

$(BUGSTITLE_TEXT_BODY Dub changes,

$(LI $(LNAME2 env_variable_source_files_added,Environment variable SOURCE_FILES added)
$(CHANGELOG_SOURCE_FILE dub, changelog/env_variable_source_files_added.dd)
$(P
New environment variable `$SOURCE_FILES` added containing
source files from build settings.
)
)

$(LI $(LNAME2 zsh-completion,DUB now has zsh completion)
$(CHANGELOG_SOURCE_FILE dub, changelog/zsh-completion.dd)
$(P
A zsh completion script is now present in `scripts/zsh-completion/_zsh`.
It can be installed under the user's prefered `fpath` and provides completion
for options for the most common `dub` commands, as well as list of packages
(based on local packages), e.g. for `dub add`.
)
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regressions,

$(LI $(BUGZILLA 10100): Identifiers with double underscores and allMembers)
$(LI $(BUGZILLA 15812): static struct inside extern$(LPAREN)C++$(RPAREN) class cannot be used as key to associative array)
$(LI $(BUGZILLA 16709): [Reg 2.068] Error: common.to at common.d conflicts with common.to at common.d)
$(LI $(BUGZILLA 17098): Takes hours to -O compile then fails with Internal error: backend/cgreg.c 405)
$(LI $(BUGZILLA 17145): [REG2.066.0] Tuple expansion error in local enum declaration)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bugs,

$(LI $(BUGZILLA 9937): CTFE floats don't overflow correctly)
$(LI $(BUGZILLA 11847): sub-pkg not available as qualified name)
$(LI $(BUGZILLA 17257): Wrong recursive template destructor reflection)
$(LI $(BUGZILLA 18147): Debug information limited in size)
$(LI $(BUGZILLA 19479): Garbage .init in string mixins in static foreach in mixin templates)
$(LI $(BUGZILLA 19504): pragma$(LPAREN)mangle$(RPAREN) ignored for C++ destructors)
$(LI $(BUGZILLA 19515): POSIX,C++: Template argument pack wrongly mangled)
$(LI $(BUGZILLA 20362): dmd fails to infer scope parameter for delegate)
$(LI $(BUGZILLA 20375): std.typecons.RefCounted does not work with checkaction-context)
$(LI $(BUGZILLA 20421): Exceptions don't work when linking through lld-link)
$(LI $(BUGZILLA 20474): Deprecation warnings inside deprecated function template)
$(LI $(BUGZILLA 20507): Debug statements affect inference of templated functions attributes)
$(LI $(BUGZILLA 20514): obj-c info incorrectly placed in __objc_const section)
$(LI $(BUGZILLA 20530): is$(LPAREN)<...> == module/package$(RPAREN) does not work with string mixins)
$(LI $(BUGZILLA 20537): traits isPackage/isModule and is$(LPAREN)package/module$(RPAREN) fail on single level package.d import)
$(LI $(BUGZILLA 20538): malformed enum definition compiles)
$(LI $(BUGZILLA 20545): Segfault/Assertion failure when parsing invalid AA literal)
$(LI $(BUGZILLA 20547): Wrong error message when trying to "new" an associative array)
$(LI $(BUGZILLA 20551): In @safe code and using delegates, it's possible to escape references to function frame)
$(LI $(BUGZILLA 20592): [GCC ASM] [ICE] dmd/iasmgcc.d$(LPAREN)332$(RPAREN): Assertion failure)
$(LI $(BUGZILLA 20613): String switch in -betterC fails for 7+ labels)
)
$(BUGSTITLE_BUGZILLA DMD Compiler enhancements,

$(LI $(BUGZILLA 20569): [DIP1000] allow taking the address of a `scope` struct field if it has no indirections)
)
$(BUGSTITLE_BUGZILLA Phobos regressions,

$(LI $(BUGZILLA 7006): std.math.pow $(LPAREN)integral, integral$(RPAREN) crashes on negative exponents)
)
$(BUGSTITLE_BUGZILLA Phobos bugs,

$(LI $(BUGZILLA 5232): [patch] std.conv.to & std.conv.roundTo report invalid overflows for very large numbers)
$(LI $(BUGZILLA 5628): std.math unittest disabled - roundoff error in pow$(LPAREN)$(RPAREN) on SSE2)
$(LI $(BUGZILLA 7446): [TDPL] Trivial asynchronous file copy example crashes with OwnerTerminated)
$(LI $(BUGZILLA 8388): std.traits.MemberFunctionsTuple doesn't work with constructors or destructors)
$(LI $(BUGZILLA 12461): Typedef and opOpAssign)
$(LI $(BUGZILLA 15891): Compiler error when std.algorithm.cache after 2 layers of std.algorithm.map)
$(LI $(BUGZILLA 17427): std.concurrency internal errors on uninitialised mailbox)
$(LI $(BUGZILLA 20232): WhiteHole is unusable with @safe interface functions)
$(LI $(BUGZILLA 20259): [Function Socket.bind] Doesn't inform what Exception it throws)
$(LI $(BUGZILLA 20493): Incorrect result of BigInt * BigInt)
$(LI $(BUGZILLA 20521): Checking for and getting empty variables on Wine / XP fails)
$(LI $(BUGZILLA 20540): $(LPAREN)White|Black$(RPAREN)Hole does not work with return|scope functions)
$(LI $(BUGZILLA 20542): std.math.nextafter$(LPAREN)NaN, y$(RPAREN) and nextafter$(LPAREN)x, NaN$(RPAREN) should return NaN)
$(LI $(BUGZILLA 20544): socket.remoteAddress throws out of memory error with unix domain socket peer)
$(LI $(BUGZILLA 20585): std.stdio.File open$(LPAREN)$(RPAREN) failure leaves File in invalid state)
$(LI $(BUGZILLA 20639): Some BitArray methods should be const/pure/nothrow/...)
)
$(BUGSTITLE_BUGZILLA Phobos enhancements,

$(LI $(BUGZILLA 20146): Allow casting from std.bigint.BigInt to built-in floating point types)
$(LI $(BUGZILLA 20480): make std.getopt ready for DIP 1000)
$(LI $(BUGZILLA 20548): Use bit vector instead of bool[] in RandomCover when choices cannot be packed in a single word)
$(LI $(BUGZILLA 20566): std.sformat should avoid allocating memory when printing floating point values)
)
$(BUGSTITLE_BUGZILLA Druntime regressions,

$(LI $(BUGZILLA 19322): A lot of memory is consumed and not freed to the system when Exception is formatted with stacktrace in debug)
)
$(BUGSTITLE_BUGZILLA Druntime bugs,

$(LI $(BUGZILLA 15322): version$(LPAREN)Unicode$(RPAREN) should affect only default aliases)
$(LI $(BUGZILLA 16658): Win32API: default IE ver. set to 4.0 is too old)
$(LI $(BUGZILLA 19489): Null function call results in no stack trace)
$(LI $(BUGZILLA 19909): core.stdc.errno missing POSIX error code on Windows)
$(LI $(BUGZILLA 20459): Runtime arg parsing should stop at '--')
$(LI $(BUGZILLA 20468): emplace doesn't forward constructor arguments' $(LPAREN)l/r$(RPAREN)valueness)
$(LI $(BUGZILLA 20476): chainTogether leaks exception with -dip1008)
$(LI $(BUGZILLA 20512): Return type of memchr should be inout$(LPAREN)void$(RPAREN)* rather than void*)
$(LI $(BUGZILLA 20513): Return type of wmemchr should be inout$(LPAREN)wchar_t$(RPAREN)* rather than wchar_t*)
$(LI $(BUGZILLA 20591): ldc doesn't print files' directories when printing stack trace)
$(LI $(BUGZILLA 20629): atomicStore does not compile for struct using -m64)
)
$(BUGSTITLE_BUGZILLA Druntime enhancements,

$(LI $(BUGZILLA 19218): object.destroy should check for classes for static arrays)
$(LI $(BUGZILLA 20550): Use fixed seeds for treaps in GC)
$(LI $(BUGZILLA 20567): GC should not start threads for parallel marking in simple programs)
$(LI $(BUGZILLA 20577): Add missing symbols related to Windows UAC)
)
$(BUGSTITLE_BUGZILLA dlang.org bugs,

$(LI $(BUGZILLA 20500): running examples on the home page only displays '1 unittests passed')
)
$(BUGSTITLE_BUGZILLA Installer enhancements,

$(LI $(BUGZILLA 20489): Installer deleting files after install)
)
)
$(D_CONTRIBUTORS_HEADER 55)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR Adam D. Ruppe)
    $(D_CONTRIBUTOR aG0aep6G)
    $(D_CONTRIBUTOR Ahmet Sait)
    $(D_CONTRIBUTOR Alexandru Militaru)
    $(D_CONTRIBUTOR Andrei Alexandrescu)
    $(D_CONTRIBUTOR Asakusa Yakumo)
    $(D_CONTRIBUTOR Atila Neves)
    $(D_CONTRIBUTOR Bastiaan Veelo)
    $(D_CONTRIBUTOR Ben Jones)
    $(D_CONTRIBUTOR Bernhard Seckinger)
    $(D_CONTRIBUTOR Boris Carvajal)
    $(D_CONTRIBUTOR Daniel Kozák)
    $(D_CONTRIBUTOR Dennis Katsonis)
    $(D_CONTRIBUTOR dkorpel)
    $(D_CONTRIBUTOR Dragos Carp)
    $(D_CONTRIBUTOR drug007)
    $(D_CONTRIBUTOR dukc)
    $(D_CONTRIBUTOR Etienne Cimon)
    $(D_CONTRIBUTOR Hiroki Noda)
    $(D_CONTRIBUTOR Iain Buclaw)
    $(D_CONTRIBUTOR Jacob Carlborg)
    $(D_CONTRIBUTOR Jiyuan Zhang)
    $(D_CONTRIBUTOR Johan Engelen)
    $(D_CONTRIBUTOR John Colvin)
    $(D_CONTRIBUTOR Jonathan Marler)
    $(D_CONTRIBUTOR Julian Fondren)
    $(D_CONTRIBUTOR Kazuya Takahashi)
    $(D_CONTRIBUTOR Lance Bachmeier)
    $(D_CONTRIBUTOR Manish Khurana)
    $(D_CONTRIBUTOR Manu Evans)
    $(D_CONTRIBUTOR Marco de Wild)
    $(D_CONTRIBUTOR Mark)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Martin Nowak)
    $(D_CONTRIBUTOR Mathias Lang)
    $(D_CONTRIBUTOR Mathis Beer)
    $(D_CONTRIBUTOR Moonchild)
    $(D_CONTRIBUTOR MoonlightSentinel)
    $(D_CONTRIBUTOR Nathan Sashihara)
    $(D_CONTRIBUTOR Nicholas Wilson)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Petar Kirov)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Rasmus Thomsen)
    $(D_CONTRIBUTOR Razvan Nitu)
    $(D_CONTRIBUTOR Robert Schadek)
    $(D_CONTRIBUTOR Sebastiaan Koppe)
    $(D_CONTRIBUTOR Sebastian Wilzbach)
    $(D_CONTRIBUTOR skoppe)
    $(D_CONTRIBUTOR Stefan Koch)
    $(D_CONTRIBUTOR Steven Schveighoffer)
    $(D_CONTRIBUTOR Vladimir Panteleev)
    $(D_CONTRIBUTOR Walter Bright)
    $(D_CONTRIBUTOR Yazan Dabain)
    $(D_CONTRIBUTOR سليمان السهمي (Suleyman Sahmi))
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.091.0
    TITLE=Change Log: $(VER)
