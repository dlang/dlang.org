Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Feb 06, 2020, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 1 major change and 16 fixed Bugzilla issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 13 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 d1-operator-deprecation,D1-style operator now have a lower priority than D2-style))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 d1-operator-deprecation,D1-style operator now have a lower priority than D2-style)
$(CHANGELOG_SOURCE_FILE dmd, changelog/d1-operator-deprecation.dd)
$(P
D1 operator overloads have been deprecated in $(LINK2 https://dlang.org/changelog/2.088.0.html, v2.088.0).
They historically had priority over D2 operator overload, and that priority was kept as is even after deprecating them.
)

$(P
One main difference between D1 and D2 operator overload is that D1's are `virtual` by default,
while the D2 operator overloading scheme relies on template, and so cannot be virtual.
Code relying on virtuality of operator can be trivially adapted by providing a D2-style operator
overload that forwards to a virtual method.
)

$(P
However, as D1 operator overloads take priority, the deprecation message will be issued even if a D2
operator overload is present.
This means that code relying on virtual operators would need not only to introduce the aforementioned
D2-style overload, but also to rename their method not to match the reserved D1 names.
This in turns forces libraries to introduce a breaking change in order to silence the deprecation.
)

$(P
Starting from this release, D2-style operator overloads take priority over D1-style,
making it trivial to forward the former to the later.
)
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regressions,

$(LI $(BUGZILLA 20391): [REG 2.089] DMD compile times increased by 40% because ENABLE_RELEASE=0 in build)
$(LI $(BUGZILLA 20488): AA.length in multiple modules causes opDispatch failure)
$(LI $(BUGZILLA 20518): simple import ICE regression)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bugs,

$(LI $(BUGZILLA 19542): Forward reference segfault with string namespace C++ syntax)
$(LI $(BUGZILLA 20530): is$(LPAREN)<...> == module/package$(RPAREN) does not work with string mixins)
$(LI $(BUGZILLA 20549): Initialization with a tuple of a module symbol referencing itself could crash dmd)
$(LI $(BUGZILLA 20559): Reference type + alias this + AA + AA.clear causes SEGV)
)
$(BUGSTITLE_BUGZILLA Phobos regressions,

$(LI $(BUGZILLA 19738): std.range.choose assignment breaks @safe-ty)
$(LI $(BUGZILLA 20511): Can't format JSONValue to OutputRange due to @safe)
)
$(BUGSTITLE_BUGZILLA Phobos bugs,

$(LI $(BUGZILLA 17441): std.traits.moduleName gives wrong answer for modules imported under a different name in a mixin)
$(LI $(BUGZILLA 20495): std.range.choose range is not safe when calling save)
$(LI $(BUGZILLA 20527): std.json CTFE cannot read integer)
)
$(BUGSTITLE_BUGZILLA Druntime regressions,

$(LI $(BUGZILLA 19902): hasElaborateCopyConstructor doesn't know about copy constructors)
$(LI $(BUGZILLA 20447): [REG 2.089] importing core.thread exposes unistd, hiding object.dup)
)
$(BUGSTITLE_BUGZILLA Druntime bugs,

$(LI $(BUGZILLA 20497): thread with limited stackspace crashes depending on size of TLS)
)
$(BUGSTITLE_BUGZILLA dlang.org bugs,

$(LI $(BUGZILLA 20500): running examples on the home page only displays '1 unittests passed')
)
)
$(D_CONTRIBUTORS_HEADER 13)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR Atila Neves)
    $(D_CONTRIBUTOR Bernhard Seckinger)
    $(D_CONTRIBUTOR Boris Carvajal)
    $(D_CONTRIBUTOR Don Clugston)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Martin Nowak)
    $(D_CONTRIBUTOR Mathias Lang)
    $(D_CONTRIBUTOR Mathis Beer)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Sebastian Wilzbach)
    $(D_CONTRIBUTOR Steven Schveighoffer)
    $(D_CONTRIBUTOR Walter Bright)
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.090.1
    TITLE=Change Log: $(VER)
