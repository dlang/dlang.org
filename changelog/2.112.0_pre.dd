Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Oct 01, 2025, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 21 major changes and 127 fixed Bugzilla issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 72 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 dmd.aa-lowered-to-templates,The compiler now lowers associative array operations to a templated implementation in druntime))
$(LI $(RELATIVE_LINK2 dmd.auto-ref-return,Keywords `auto` and `ref` must be adjacent for `auto ref` return.))
$(LI $(RELATIVE_LINK2 dmd.bitfields,Bitfields Are Now Incorporated))
$(LI $(RELATIVE_LINK2 dmd.dangling-else,An error is now issued for dangling `else` statements))
$(LI $(RELATIVE_LINK2 dmd.extern-std-cpp23,The compiler now accepts `-extern-std=c++23`))
$(LI $(RELATIVE_LINK2 dmd.external-import-path,External import path switch))
$(LI $(RELATIVE_LINK2 dmd.truncating.conversion,Implicit integer conversions in `int op= float` assignments has been deprecated))

)

$(BUGSTITLE_TEXT_HEADER Runtime changes,

$(LI $(RELATIVE_LINK2 druntime._d_arraysetlengthT_Template,Templatized `_d_arraysetlengthT` to remove `TypeInfo` dependency))
$(LI $(RELATIVE_LINK2 druntime.d_arrayappendcTX_template,Templatize `_d_arrayappendcTX` runtime hook))
$(LI $(RELATIVE_LINK2 druntime.d_arraysetcapacity_template,Templatize `_d_arraysetcapacity` runtime hook))
$(LI $(RELATIVE_LINK2 druntime.int128,`core.int128`: Add `mul` and `udivmod` overloads for 64-bit operands))
$(LI $(RELATIVE_LINK2 druntime.macos-15-4-segfault,Fixed generated binaries crashing on macOS 15.4))
$(LI $(RELATIVE_LINK2 druntime.macro-templates,C Macro translations in druntime have been translated to templates))

)

$(BUGSTITLE_TEXT_HEADER Library changes,

$(LI $(RELATIVE_LINK2 add_lazycache_function,Add lazyCache to std.algorithm.iteration))
$(LI $(RELATIVE_LINK2 emulate_getrandom,`getrandom()` backwards compatibility shim))
$(LI $(RELATIVE_LINK2 entropy_system,Add an internal multi-backend entropy system))
$(LI $(RELATIVE_LINK2 unicode-17,std.uni has been upgraded from Unicode 16.0.0 to 17.0.0))
$(LI $(RELATIVE_LINK2 uuidv7,Add uuid v7 support to `std.uuid`))
$(LI $(RELATIVE_LINK2 write-text,Add `writeText`, `writeWText`, and `writeDText` to `std.conv`))

)

$(BUGSTITLE_TEXT_HEADER Dub changes,

$(LI $(RELATIVE_LINK2 add-dest,Added `--dest` command line build option.))
$(LI $(RELATIVE_LINK2 add-frameworks,Add `frameworks` dubfile key.))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 dmd.aa-lowered-to-templates,The compiler now lowers associative array operations to a templated implementation in druntime)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.aa-lowered-to-templates.dd)
$(P
The compiler now lowers associative array operations to templates defined in `core.internal.newaa`
instead of relying on a precompiled implementation based on `TypeInfo`.
)

$(P
In addition to better performance by not having to go through `TypeInfo` and allowing inlining of
simple operations, this paves the way for proper inference of
function attributes inherited from key and value constructors, `toHash()` on the key and comparison of
key values. This inference is currently mostly avoided to keep backward compatibility with
the runtime implementation that doesn't check function attributes.
)

$(P
Some changes that are the result of the refactoring:
)

$(P
- AA support no longer available at CTFE without `object.d`/`newaa.d`. Some operations used to work,
  but now need the lowerings before these can be intercepted by the interpreter.
)

$(P
- creating an AA literal at runtime passes keys and values as arguments normally, not with
  special move/blit operations, so more postblit/destructor operations can happen
)

$(P
- `_d_assocarrayliteralTXTrace` removed. Apart from the creation of associative array literals
  no other AA operation is hooked for `-profile-gc`. You will now see the allocations as done
  by the AA implementation.
)

$(P
- `aa[key] = S()` with `S.__ctor` and `S.opAssign` is no longer a double lookup
)

$(P
- `aa.remove(key)` now works with alias this
)
)

$(LI $(LNAME2 dmd.auto-ref-return,Keywords `auto` and `ref` must be adjacent for `auto ref` return.)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.auto-ref-return.dd)
$(P
Similar to `auto ref` parameters in 2.111, it's now deprecated to declare an `auto ref` return type without putting those two keywords next to each other as well.
)

---
ref auto int f() => 3;
auto { ref int g() => 3; }

// Correction:
auto ref f() => 3;
auto ref g() => 3;
---
)

$(LI $(LNAME2 dmd.bitfields,Bitfields Are Now Incorporated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.bitfields.dd)
$(P
There is no longer a requirement to throw the switch `-preview=bitfields`.
)
)

$(LI $(LNAME2 dmd.dangling-else,An error is now issued for dangling `else` statements)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.dangling-else.dd)
$(P
This used to give a warning when compiled with `-w` and now gives an error:
)
```
int i, j;
if (i)
    if (j)
        return 1;
    else    // Error: else is dangling, add { } after condition `if (i)`
        return 2;
```
)

$(LI $(LNAME2 dmd.extern-std-cpp23,The compiler now accepts `-extern-std=c++23`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.extern-std-cpp23.dd)
$(P
The compiler now accepts c++23 as a supported standard for `-extern-std=`.
Currently this only changes the value of `__traits(getTargetInfo, "cppStd")`.
)
)

$(LI $(LNAME2 dmd.external-import-path,External import path switch)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.external-import-path.dd)
$(P
A new switch is added, the external import path (``-extI``).
It is similar to the import path switch (``-I``) except it indicates that a module found from it is external to the currently compiling binary.
)

$(P
It is used on Windows when the ``dllimport`` override switch is set to anything other than ``none`` to force an external module's symbols as DllImport.
)

$(P
If a build system supports the external import path switch, it is recommend to **not** use the ``all`` option for the ``dllimport`` override switch which applies to symbols that should not be getting DllImport'd.
)
)

$(LI $(LNAME2 dmd.truncating.conversion,Implicit integer conversions in `int op= float` assignments has been deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.truncating.conversion.dd)
$(P
This is to prevent potential mistakes when `op=` assignment would implicitly
truncate the right hand side expression from a non-zero value to zero.
)
```
uint a;
float b = 0.1;
a += b; // Deprecation: `uint += float` is performing truncating conversion
```

$(P
The corrective action if truncating was intentional is to explicitly cast the
floating point expression to integer.
)
```
a += cast(uint) b;
```
)


)

$(BUGSTITLE_TEXT_BODY Runtime changes,

$(LI $(LNAME2 druntime._d_arraysetlengthT_Template,Templatized `_d_arraysetlengthT` to remove `TypeInfo` dependency)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime._d_arraysetlengthT_Template.dd)
$(P
The internal runtime function `_d_arraysetlengthT` was templatized to
operate directly on the type `T`, removing its dependency on `TypeInfo`.
This improves type safety, reduces runtime reflection, and allows the
compiler to generate specialized code paths for different array element types.
)

$(P
This change preserves the semantics of `.length` assignment on dynamic arrays,
ensuring memory allocation, element initialization, and postblit handling
continue to work as expected.
)

-------
/**
Resize a dynamic array by setting its `.length` property.

New elements are initialized according to their type:
- Zero-initialized if applicable
- Default-initialized via `emplace`
- Or `memcpy` if trivially copyable
*/
size_t _d_arraysetlengthT(Tarr : T[], T)(return ref scope Tarr arr, size_t newlength);
-------
-------
int[] a = [1, 2];
a.length = 3; // becomes _d_arraysetlengthT!(int)(a, 3)
-------

$(P
This reduces runtime dependency on `TypeInfo`, making the function more predictable and performant.
)

$(P
See also: $(LINK2 https://github.com/dlang/dmd/pull/21151, PR #21151)
)
)

$(LI $(LNAME2 druntime.d_arrayappendcTX_template,Templatize `_d_arrayappendcTX` runtime hook)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.d_arrayappendcTX_template.dd)
$(P
This refactorization discards the `TypeInfo` parameter, replacing it with a template type parameter.
)
)

$(LI $(LNAME2 druntime.d_arraysetcapacity_template,Templatize `_d_arraysetcapacity` runtime hook)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.d_arraysetcapacity_template.dd)
$(P
This refactorization discards the `TypeInfo` parameter, replacing it with a template type parameter.
)
)

$(LI $(LNAME2 druntime.int128,`core.int128`: Add `mul` and `udivmod` overloads for 64-bit operands)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.int128.dd)
$(P
These map to a single x86_64 instruction and have accordingly been optimized via inline assembly.
)

---
import core.int128;

ulong a, b;
Cent product128 = mul(a, b);

ulong divisor64 = …;
ulong modulus64;
ulong quotient64 = udivmod(product128, divisor64, modulus64);
---
)

$(LI $(LNAME2 druntime.macos-15-4-segfault,Fixed generated binaries crashing on macOS 15.4)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.macos-15-4-segfault.dd)
$(P
macOS 15.4 has introduced an undocumented ABI change to the format of
thread local variable section, which causes almost all executable built with
previous D compiler versions to crash during initialization, if they use
DRuntime. This release introduces a mitigation for this issue that is
backwards compatible with previous versions of macOS.
)
)

$(LI $(LNAME2 druntime.macro-templates,C Macro translations in druntime have been translated to templates)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.macro-templates.dd)
$(P
This prevents linking errors when using `-betterC`.
For example:
)

---
import core.sys.posix.stdlib;
import core.sys.posix.unistd;

extern(C) int main()
{
    int status, pid = vfork();
    if (pid == 0)
    {
        // ...
        return 0;
    }

    waitpid(pid, &status, 0);
    if (WIFEXITED(status))
    {
        // ...
    }
    return 0;
}
---

$(P
This would fail to compile with the `-betterC` flag:
)

---
$(CONSOLE
Error: undefined reference to `core.sys.posix.sys.wait.WIFEXITED(int)`
       referenced from `main`
)
---

$(P
The reason is that `WIFEXITED` is a C macro that was translated to a D function in druntime, which requires linking with druntime to use.
Now that it's a template, it will be lazily instantiated and the program compiles.
)
)


)

$(BUGSTITLE_TEXT_BODY Library changes,

$(LI $(LNAME2 add_lazycache_function,Add lazyCache to std.algorithm.iteration)
$(CHANGELOG_SOURCE_FILE phobos, changelog/add_lazycache_function.dd)
$(P
The new `lazyCache` function provides a lazily evaluated range caching mechanism.
Unlike `cache`, which eagerly evaluates range elements during construction,
`lazyCache` defers evaluation until elements are explicitly requested.
)

---
auto result = iota(-4, 5).map!(a => tuple(a, expensiveComputation(a)))().lazyCache();
// No computations performed at this point

auto firstElement = result.front;
// First element is now evaluated
---

$(P
See the $(REF lazyCache, std,algorithm,iteration) documentation for more details.
)
)

$(LI $(LNAME2 emulate_getrandom,`getrandom()` backwards compatibility shim)
$(CHANGELOG_SOURCE_FILE phobos, changelog/emulate_getrandom.dd)
$(P
To restore compatibility with older Linux platforms where `getrandom()` is
unavailable either due to an outdated kernel or a legacy C library, Phobos now
ships with a shim that emulates a limited subset of `getrandom()`’s behavior
by reading random bytes from `/dev/urandom`.
)

$(P
To enable the shim, build DMD and Phobos with the environment variable
`LINUX_LEGACY_EMULATE_GETRANDOM` set to `1`.
)

```
cd phobos
LINUX_LEGACY_EMULATE_GETRANDOM=1 make
```

$(P
This functionality is a temporary fix and expected to be removed again soon
by an upcoming release (approx. v2.112.0 or v2.113.0).
The expected change is to replace the current “binding or shim” solution with
a syscall wrapper and automatic `/dev/urandom` fallback.
)
)

$(LI $(LNAME2 entropy_system,Add an internal multi-backend entropy system)
$(CHANGELOG_SOURCE_FILE phobos, changelog/entropy_system.dd)
$(P
This Phobos release introduces an internal multi-backend system for the
retrieval of entropy (as in cryptographically-secure random numbers obtained
from a suitable random number generator provided by the operating system).
)

$(P
The current implementation supports the `getrandom` syscall on Linux.
)

$(P
On BSD systems `arc4random_buf` or `getentropy` are used — depending on
which is implemented by the OS and powered by a secure (non-RC4) algorithm.
)

$(P
Additionally, reading entropy from the character devices `/dev/urandom` and
`/dev/random` is available on all POSIX targets.
)

$(P
On Windows `BCryptGenRandom` (from the
$(I Cryptography API: Next Generation (“BCrypt”))) is provided as a backend.
`CryptGenRandom` from the legacy $(I CryptoAPI) is not supported for the time
being.
)

$(P
Furthermore, this replaces the `getrandom` backwards compatibility shim
that had been added by v2.111.1 for Linux targets.
Instead backwards compatibility is now provided by a hunt strategy algorithm
that tries potentially available entropy sources one by one to find one that
is available on the running system.
Given that the character devices serve as a fallback option here,
`urandom` is favored over `random`. That is because modern kernel versions —
where `random` would exhibit the usually more preferable behavior of blocking
only until the entropy pool has been initialized — will also provide the
`getrandom` syscall in the first place. Performing the syscall, in turn, is
even better as it does not depend on the runtime environment exposing the
special devices in predefined locations, thus working also within chroot
environments.
)
)

$(LI $(LNAME2 unicode-17,std.uni has been upgraded from Unicode 16.0.0 to 17.0.0)
$(CHANGELOG_SOURCE_FILE phobos, changelog/unicode-17.dd)
$(P
This Unicode update was released September 9, 2025, and adds new blocks with characters.
See: https://www.unicode.org/versions/Unicode17.0.0/
)

```
import std;

void main()
{
    const alphaCount = iota(0, dchar.max).filter!(std.uni.isAlpha).walkLength;
    writeln(alphaCount);
    // formerly: 142759
    // now:      147421
}
```
)

$(LI $(LNAME2 uuidv7,Add uuid v7 support to `std.uuid`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/uuidv7.dd)
$(P
Add uuid v7 support to the UUID type located in `std.uuid`.
The first 48 bits of v7 stores the milliseconds since the unix epoch
(1970-01-01), additionally 74 bit are used to store random data.
)

$(P
Example:
)
---
SysTime st = DateTime(2025, 8, 19, 10, 38, 45);
UUID u = UUID(st);
SysTime o = u.v7Timestamp();
assert(o == st);

string s = u.toString();
UUID u2 = UUID(s);
SysTime o2 = u2.v7Timestamp();
assert(o2 == st);
---
)

$(LI $(LNAME2 write-text,Add `writeText`, `writeWText`, and `writeDText` to `std.conv`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/write-text.dd)
$(P
These functions are variants of the existing `text`, `wtext`, and `dtext`
functions. Instead of returning a string, they write their output to an output
range.
)

$(P
Like `text`, `writeText` can accept an
$(LINK2 $(ROOT_DIR)spec/istring.html, interpolated expression sequence) as an
argument.
)

$(P
Example:
)

---
import std.conv : writeText;
import std.array : appender;

auto output = appender!string();
output.writeText(i"2 + 2 == $(2 + 2)");
assert(output.data == "2 + 2 == 4");
---
)


)

$(BUGSTITLE_TEXT_BODY Dub changes,

$(LI $(LNAME2 add-dest,Added `--dest` command line build option.)
$(CHANGELOG_SOURCE_FILE dub, changelog/add-dest.dd)
$(P
Adds support for specifying a root directory for staging, essentially
acts as a prefix to the `targetPath` and `workingDirectory` dubfile
entries.
)
)

$(LI $(LNAME2 add-frameworks,Add `frameworks` dubfile key.)
$(CHANGELOG_SOURCE_FILE dub, changelog/add-frameworks.dd)
$(P
Adds support for specifying macOS frameworks to link against,
this replaces the need to manually specify frameworks via lflags or dflags.
)

$(P
Before:
)
-------
lflags "-framework" "Cocoa"
-------

$(P
After:
)
-------
frameworks "Cocoa" "OpenGL"
-------
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regression fixes,

$(LI $(BUGZILLA 10440): shared library on osx: worked in 2.062, fails in 2.063 / 2.063.2)
$(LI $(BUGZILLA 10577): 2.063 Mixin Regression $(LPAREN)works with 2.062$(RPAREN))
$(LI $(BUGZILLA 17481): [REG 2.069.0] synchronized: Access Violation with dmd -O on win32)
$(LI $(BUGZILLA 21258): Tuple parameters with defaults use the first tuple element for all defaults since 2.094.0-beta.1)
$(LI $(BUGZILLA 21414): Spurious "non-constant expression" error with immutable constructors)
$(LI $(BUGZILLA 21660): [REG 2.066.0] cannot convert unique immutable$(LPAREN)int$(RPAREN)** to immutable)
$(LI $(BUGZILLA 21740): Typeof mixin regression with v2.096)
$(LI $(BUGZILLA 21744): [REG 2.092.0] NRVO sometimes not performed when it should be)
$(LI $(BUGZILLA 21813): [REG-master] Bootstrap broken from dmd-cxx baseline.)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bug fixes,

$(LI $(BUGZILLA 2): Hook up new dmd command line arguments)
$(LI $(BUGZILLA 722): mixin as return value: expression.c:775: virtual void Expression::toMangleBuffer$(LPAREN)OutBuffer*$(RPAREN): Assertion `0' failed.)
$(LI $(BUGZILLA 4184): associative array with certain key types results in corrupt values during iteration)
$(LI $(BUGZILLA 4191): [FreeBSD] real constants are rounded to double precision)
$(LI $(BUGZILLA 4217): Function overloads are not distinguished when instantiating templates)
$(LI $(BUGZILLA 4224): alias this and opDispatch)
$(LI $(BUGZILLA 4251): Hole in the const system: immutable$(LPAREN)T$(RPAREN)[] implicitly casts to ref const$(LPAREN)T$(RPAREN)[])
$(LI $(BUGZILLA 4267): forward reference error when 2-fold aliasing a template instance)
$(LI $(BUGZILLA 9829): rdmd passes '--' to dmd)
$(LI $(BUGZILLA 10506): Purity should not be checked in a mixin statement)
$(LI $(BUGZILLA 10513): pure overriding method cannot call impure out contract of base class)
$(LI $(BUGZILLA 10540): variable used before set for empty static arrays, with -inline -O)
$(LI $(BUGZILLA 10742): CTFE of std.digest.digest.digest$(LPAREN)$(RPAREN) crashes DMD.)
$(LI $(BUGZILLA 10775): druntime is not set up to handle dynamically loaded shared libraries in linux)
$(LI $(BUGZILLA 10785): Interface diamond covariance causes silent breakage)
$(LI $(BUGZILLA 10811): Order dependent IFTI failure)
$(LI $(BUGZILLA 10840): [CTFE] *this._data.arr is not yet implemented at compile time)
$(LI $(BUGZILLA 17462): Order of base interfaces affects compiler behavior)
$(LI $(BUGZILLA 17804): Accessing `enum' or `static' member allocates gc closure)
$(LI $(BUGZILLA 18263): selective import with same name masks out this reference in mixin template)
$(LI $(BUGZILLA 18614): dmd source uses bool return inconsistently $(LPAREN)true should mean success$(RPAREN))
$(LI $(BUGZILLA 19788): compiler crash on slicing a enum typed as vector)
$(LI $(BUGZILLA 20092): void[1] auto slicing makes the compiler hang)
$(LI $(BUGZILLA 20114):  -checkaction=context evaluates operand second time on assertion failure)
$(LI $(BUGZILLA 20318): Illegal instruction $(LPAREN)core dumped$(RPAREN))
$(LI $(BUGZILLA 20365): Copy constructor not invoked on static arrays of structs but the postblit works)
$(LI $(BUGZILLA 20499): bad error message caused by UFCS attempt on the identifier matching to an import)
$(LI $(BUGZILLA 20855): stack overflow when compiling large file)
$(LI $(BUGZILLA 20901): static foreach must deep-copy front$(LPAREN)$(RPAREN) per iteration)
$(LI $(BUGZILLA 20917): stacking alias this, drops data during assignment)
$(LI $(BUGZILLA 21052): buildkite ldc-developers/ldc log file contains not a clue what it is attempting to do)
$(LI $(BUGZILLA 21054): Test Suite test/run.d has no documentation on how the dmd under test is specified)
$(LI $(BUGZILLA 21126): d_do_test should be built with bootstrap compiler, not compiler being tested)
$(LI $(BUGZILLA 21153): DWARF: DMD emits the mangled name for DW_AT_name)
$(LI $(BUGZILLA 21179): Test Suite: circleci times out with useless log message)
$(LI $(BUGZILLA 21207): Mixin get processed in lexical order, resulting in forward reference issues)
$(LI $(BUGZILLA 21225): preview=dtorfields inserts unnecessary dtor call in nothrow ctors)
$(LI $(BUGZILLA 21271): C++ header generation ignores extern$(LPAREN)D$(RPAREN) class methods affecting vtable layout)
$(LI $(BUGZILLA 21280): No error output "cast$(LPAREN)ubyte[4]$(RPAREN)$(LPAREN)"ABCDEF"[0..4]$(RPAREN);")
$(LI $(BUGZILLA 21298): Missing error when overriding interface method without in contract with class method with contract)
$(LI $(BUGZILLA 21303): Segfault with -preview=dip1021 and -inline on trivial std.socket code)
$(LI $(BUGZILLA 21304): dtoh silently ignore default parameters, leading to invalid headers)
$(LI $(BUGZILLA 21406): CatAssign wrong evaluation/load order at run-time)
$(LI $(BUGZILLA 21416): betterC mode program with C++ interface fails to link)
$(LI $(BUGZILLA 21476): [codegen] 64 bit C ABI not followed when returning struct with 3 floats)
$(LI $(BUGZILLA 21478): Setting a default value to an object field which is a 2D array may cause memory corruption)
$(LI $(BUGZILLA 21479): ternary operator returns wrong val with ref return)
$(LI $(BUGZILLA 21504): Incorrect eponymous overload called by codegen)
$(LI $(BUGZILLA 21549): array ignored in alias declaration)
$(LI $(BUGZILLA 21619): Parameter-less function literal in expression statement fails to parse)
$(LI $(BUGZILLA 21665): Void initialization should not be allowed for instances of struct with invariant)
$(LI $(BUGZILLA 21690): Unable to dynamic cast extern$(LPAREN)C++$(RPAREN) classes)
$(LI $(BUGZILLA 21693): extern$(LPAREN)C++$(RPAREN) class instance dtors are never called, breaking RAII)
$(LI $(BUGZILLA 21745): Closure created in struct constructor passed to class constructor refers to expired stack frame)
$(LI $(BUGZILLA 21874): The test suite fails with most recent GDB versions)
)
$(BUGSTITLE_BUGZILLA DMD Compiler enhancements,

$(LI $(BUGZILLA 10491): Type inference for function arguments with default value)
$(LI $(BUGZILLA 10523): Don't call array op functions for short vector ops)
$(LI $(BUGZILLA 20075): allow cast$(LPAREN)ref T$(RPAREN)lvalue for casting lvalues)
$(LI $(BUGZILLA 20157): [diagnostic] Name suggest for override should only list virtual functions)
$(LI $(BUGZILLA 20334): posix.mak clean target does not remove all generated files)
$(LI $(BUGZILLA 21033): enhancement: allow assign to field when the shared owing object has been locked already without cast)
$(LI $(BUGZILLA 21098): poor diagnostic when trying to assign a string literal to a `char*`)
$(LI $(BUGZILLA 21142): TypeInfo_Class.offTi$(LPAREN)$(RPAREN) not available via introspection)
$(LI $(BUGZILLA 21203): Accept pragma$(LPAREN)mangle$(RPAREN) on aggregate types)
$(LI $(BUGZILLA 21247): AssertArguments should allow for tuple auto expansion)
$(LI $(BUGZILLA 21259): struct initialization with deprecated fields should issue deprecation warnings)
$(LI $(BUGZILLA 21317): Copy constructor defined but blitting still occurs)
$(LI $(BUGZILLA 21562): Allow mixin template declarations without parentheses)
$(LI $(BUGZILLA 21605): Instead of giving error on printf format mismatch, correct it)
$(LI $(BUGZILLA 21630): assert$(LPAREN)0$(RPAREN) and assert$(LPAREN)false$(RPAREN) should not be marked for coverage)
$(LI $(BUGZILLA 21718): Preview switches have insufficient descriptions)
)
$(BUGSTITLE_BUGZILLA Phobos regression fixes,

$(LI $(BUGZILLA 21435): The windows .win64 make file for phobos depends on the make.exe that is part of the dmd folder.)
$(LI $(BUGZILLA 21663): std.concurrency.receiveOnly doesn't work with tuples)
$(LI $(BUGZILLA 21757): log2 does not work with reals on CTFE with FreeBSD)
$(LI $(BUGZILLA 21774): "formatException is not constant" instead of "static assert error")
)
$(BUGSTITLE_BUGZILLA Phobos bug fixes,

$(LI $(BUGZILLA 4234): Cannot create a std.socket.Socket from an fd)
$(LI $(BUGZILLA 4260): windows & basename)
$(LI $(BUGZILLA 4305): Take, Chain on top of ranges w/o moveFront$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 10550): Xorshift32 and Xorshift160 do not generate uniformly-distributed random numbers)
$(LI $(BUGZILLA 10796): std.regex: ctRegex bug with '.' and $ in multi-line mode)
$(LI $(BUGZILLA 10801): std.regex: support for lookbehind in ctRegex)
$(LI $(BUGZILLA 10802): std.regex: ctRegex fails to compile with backreference)
$(LI $(BUGZILLA 18950): Std.zip vulnerable to arbitrary file write)
$(LI $(BUGZILLA 20301): std.regex.regex doesn't accept a const/immutable array of patterns)
$(LI $(BUGZILLA 20502): Converting std.typecons.RefCounted!T to a string gives T's storage location instead of T's fields when T is a struct without an explicit toString)
$(LI $(BUGZILLA 21210): std.traits : isAssignable false positive on disabled copy struct)
$(LI $(BUGZILLA 21215): std.range.recurrence leads to an infinite loop)
$(LI $(BUGZILLA 21382): std.random.uniform!T$(LPAREN)urng$(RPAREN) when T is an integer type and urng.front is floating point is broken)
$(LI $(BUGZILLA 21384): std.random.uniform!T$(LPAREN)$(RPAREN) and std.random.uniform!T$(LPAREN)urng$(RPAREN) when T is dchar with any qualifiers can exceed dchar.max)
$(LI $(BUGZILLA 21429): Cannot sort large tuple arrays at compile time)
$(LI $(BUGZILLA 21452): isCallable erroneously returns false on function templates)
$(LI $(BUGZILLA 21456): std.format does not accept enum member with string base type as template parameter)
$(LI $(BUGZILLA 21679): Assertion failure in Base64.encoder for empty input range of ranges)
)
$(BUGSTITLE_BUGZILLA Phobos enhancements,

$(LI $(BUGZILLA 4266): add support for structs in std.format.doFormat)
$(LI $(BUGZILLA 18101): allow Tuple for BetterC)
$(LI $(BUGZILLA 19587): std.range.generate's range calls its argument one time too many)
$(LI $(BUGZILLA 19983): Add fast path using slice assignment to std.internal.cstring.tempCString)
$(LI $(BUGZILLA 20184): String maxsplit)
$(LI $(BUGZILLA 21068): Cannot sort a RandomAccessFinite range)
$(LI $(BUGZILLA 21267): Make std.complex work with -betterC)
$(LI $(BUGZILLA 21397): Nullable doesn't define copy constructors)
$(LI $(BUGZILLA 21408): Make std.math.nextUp and nextDown and nextafter work in CTFE for extended-precision real)
$(LI $(BUGZILLA 21523): Microsoft Windows std.stdio.File.lock$(LPAREN)$(RPAREN), tryLock$(LPAREN)$(RPAREN), unlock$(LPAREN)$(RPAREN): do not allocate memory for error messages when they are not needed)
$(LI $(BUGZILLA 21615): indexOf for arrays)
)
$(BUGSTITLE_BUGZILLA Druntime bug fixes,

$(LI $(BUGZILLA 4222): druntime should apply @safe/@system/@trusted)
$(LI $(BUGZILLA 9584): Exceptions in D are ludicrously slow $(LPAREN)far worse than Java$(RPAREN))
$(LI $(BUGZILLA 10701): [GC] segfault in GC)
$(LI $(BUGZILLA 18018): Locale not available when linking against snn.lib)
)
$(BUGSTITLE_BUGZILLA Druntime enhancements,

$(LI $(BUGZILLA 9585): [AA] Implement getPair$(LPAREN)$(RPAREN) for Associative Arrays)
$(LI $(BUGZILLA 21426): `dup`, `idup` for arrays plus `keys`, `values` for associative arrays: call postblits directly instead of via TypeInfo function pointer)
)
$(BUGSTITLE_BUGZILLA dlang.org bug fixes,

$(LI $(BUGZILLA 10731): byLine description incorrect)
$(LI $(BUGZILLA 21150): The specification is unclear $(LPAREN)static foreach$(RPAREN))
$(LI $(BUGZILLA 21189): Plain Old Data and copy constructors)
$(LI $(BUGZILLA 21241): html display of changelog does not work in Chrome browser)
)
$(BUGSTITLE_BUGZILLA dlang.org enhancements,

$(LI $(BUGZILLA 18127): homepage: Fast code, fast.)
$(LI $(BUGZILLA 21105): Casting from a function pointer to a delegate)
$(LI $(BUGZILLA 21161): [Variadic Templates] uses outdated example from D1 / Tango)
)
$(BUGSTITLE_BUGZILLA Installer bug fixes,

$(LI $(BUGZILLA 20473): Missing file & directory)
)
)
$(D_CONTRIBUTORS_HEADER 72)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR Abhay Pratap)
    $(D_CONTRIBUTOR abul)
    $(D_CONTRIBUTOR Abul Hossain Khan)
    $(D_CONTRIBUTOR Adam Wilson)
    $(D_CONTRIBUTOR Aditya Chincholkar)
    $(D_CONTRIBUTOR Akshat Sharma)
    $(D_CONTRIBUTOR Akshat(DeterminedSage))
    $(D_CONTRIBUTOR Albert24GG)
    $(D_CONTRIBUTOR Aleksandr Treyger)
    $(D_CONTRIBUTOR Andrei Horodniceanu)
    $(D_CONTRIBUTOR Artha)
    $(D_CONTRIBUTOR Ay1nDas)
    $(D_CONTRIBUTOR Ayan Das)
    $(D_CONTRIBUTOR bangbangsheshotmedown)
    $(D_CONTRIBUTOR Ben Jones)
    $(D_CONTRIBUTOR Brian Callahan)
    $(D_CONTRIBUTOR David Isinta Nyakawa)
    $(D_CONTRIBUTOR Denis Feklushkin)
    $(D_CONTRIBUTOR Dennis)
    $(D_CONTRIBUTOR Dennis Korpel)
    $(D_CONTRIBUTOR drpriver)
    $(D_CONTRIBUTOR Elias Batek)
    $(D_CONTRIBUTOR Emily)
    $(D_CONTRIBUTOR Emmankoko)
    $(D_CONTRIBUTOR Emmanuel Ferdman)
    $(D_CONTRIBUTOR Emmanuel Nyarko)
    $(D_CONTRIBUTOR fossdd)
    $(D_CONTRIBUTOR George-Alex-Berea)
    $(D_CONTRIBUTOR Georgy Markov)
    $(D_CONTRIBUTOR gulugulubing)
    $(D_CONTRIBUTOR H. S. Teoh)
    $(D_CONTRIBUTOR Hiroki Noda)
    $(D_CONTRIBUTOR Iain Buclaw)
    $(D_CONTRIBUTOR Inkrementator)
    $(D_CONTRIBUTOR jmh530)
    $(D_CONTRIBUTOR Jonathan M Davis)
    $(D_CONTRIBUTOR Manu Evans)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Mathias Lang)
    $(D_CONTRIBUTOR Matthew Qiu)
    $(D_CONTRIBUTOR Mike Parker)
    $(D_CONTRIBUTOR Mindy Batek)
    $(D_CONTRIBUTOR Mohamed El Shorbagy)
    $(D_CONTRIBUTOR Nayaab Zameer)
    $(D_CONTRIBUTOR naydef)
    $(D_CONTRIBUTOR Nicholas Wilson)
    $(D_CONTRIBUTOR Nick Treleaven)
    $(D_CONTRIBUTOR papadil)
    $(D_CONTRIBUTOR Parmar Mahipalsinh)
    $(D_CONTRIBUTOR Patrick Schlüter)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Per Nordlöw)
    $(D_CONTRIBUTOR Prthmsh7)
    $(D_CONTRIBUTOR Quirin F. Schroll)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Richard (Rikki) Andrew Cattermole)
    $(D_CONTRIBUTOR Robert burner Schadek)
    $(D_CONTRIBUTOR Samrendra Pratap Singh)
    $(D_CONTRIBUTOR Sergei Giniatulin)
    $(D_CONTRIBUTOR Sergii K)
    $(D_CONTRIBUTOR Sertonix)
    $(D_CONTRIBUTOR Shivang Shukla)
    $(D_CONTRIBUTOR shivangshukla7020)
    $(D_CONTRIBUTOR Steven Schveighoffer)
    $(D_CONTRIBUTOR Sönke Ludwig)
    $(D_CONTRIBUTOR Teodor Dutu)
    $(D_CONTRIBUTOR Tim Schendekehl)
    $(D_CONTRIBUTOR Timon Gehr)
    $(D_CONTRIBUTOR Tomas Fabrizio Orsi)
    $(D_CONTRIBUTOR Tony Edgin)
    $(D_CONTRIBUTOR Vladimir Panteleev)
    $(D_CONTRIBUTOR Walter Bright)
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.112.0
    TITLE=Change Log: $(VER)
