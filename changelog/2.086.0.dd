Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION May 04, 2019, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 17 major changes and 69 fixed Bugzilla issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 51 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 1_deprecation_to_error_visibility,Turn deprecation into error for privately imported symbols inside aggregate declarations))
$(LI $(RELATIVE_LINK2 alias_this_opEquals,Generated `opEquals` takes precedence over aliased this member `opEquals`))
$(LI $(RELATIVE_LINK2 copy_constructor,Copy Constructor))
$(LI $(RELATIVE_LINK2 dephexstrings,HexString literals are now obsolete))
$(LI $(RELATIVE_LINK2 error_visibility,Turn deprecation into error for selectively imported symbols in imported modules.))
$(LI $(RELATIVE_LINK2 funcliteralsbyref,Function literals can now return by reference))
$(LI $(RELATIVE_LINK2 lowmem,New command-line option `-lowmem` to reduce compiler memory requirements))
$(LI $(RELATIVE_LINK2 traits,Enable private member access for traits))

)

$(BUGSTITLE_TEXT_HEADER Runtime changes,

$(LI $(RELATIVE_LINK2 core_sync_event,New module core.sync.event))

)

$(BUGSTITLE_TEXT_HEADER Library changes,

$(LI $(RELATIVE_LINK2 comparison_bug,Fixed comparison bug in `std.algorithm.comparison.levenshteinDistance`))
$(LI $(RELATIVE_LINK2 std-all,`std.experimental.all` has been moved to `std`))

)

$(BUGSTITLE_TEXT_HEADER Installer changes,

$(LI $(RELATIVE_LINK2 lld-8,The bundled LLD Linker has been upgraded to 8.0.0))

)

$(BUGSTITLE_TEXT_HEADER Dub changes,

$(LI $(RELATIVE_LINK2 custom-dub-init-type,Support of custom dub init type))
$(LI $(RELATIVE_LINK2 dmd-mscoff-default,DUB will no longer use OPTLINK as default on Windows))
$(LI $(RELATIVE_LINK2 dub-run,`dub run` will now automatically fetch a package if it's not found locally))
$(LI $(RELATIVE_LINK2 remove-dub-list-installed,Remove `dub list-installed` command))
$(LI $(RELATIVE_LINK2 single-api-requests,DUB uses single API requests to upgrade/resolve dependencies.))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 1_deprecation_to_error_visibility,Turn deprecation into error for privately imported symbols inside aggregate declarations)
$(CHANGELOG_SOURCE_FILE dmd, changelog/1_deprecation_to_error_visibility.dd)
$(P
With this release DMD will issue an error when a symbol that is privately imported in the scope of an aggregate declaration is used as a member of the aggregate outside of the module where the aggregate is defined. Example:
)

---
// a.d
class Foobar
{
    int a;
    this(int a)
    {
        this.a = a;
    }
    static int smeth()
    {
        return 1;
    }
}
void fun() {}

// b.d
struct AST
{
    import a;
}

// c.d
void main()
{
    import b;
    AST.Foobar t;        // triggered a deprecation, but will now trigger an error
    AST.Foobar.smeth();  // error
    AST.fun();           // error
}
---
)

$(LI $(LNAME2 alias_this_opEquals,Generated `opEquals` takes precedence over aliased this member `opEquals`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/alias_this_opEquals.dd)
$(P
Before this patch, if a `struct` had an aliased this member that defined an
`opEquals` method, the aliased this `opEquals` would have been preferred
instead of the `struct` one:
)

---
struct A
{
    int a, b;
    bool opEquals(ref A rhs) const
    {
        return a == rhs.a && b == rhs.b;
    }
}

struct B
{
    int n;
    A a;
    alias a this;
}

void main()
{
    B a, b;
    assert(a == b);    // rewritten to a.a.opEquals(b.a)
}
---

$(P
Although the compiler generates an `opEquals` for `struct B` that does member-wise
equality comparison (`==`), the aliased this one is wrongfully preferred.
)

$(P
This patch corrects this issue by always choosing the defined `opEquals` (even if it is
generated by the compiler) instead of the alias this one. If the behavior prior to this
patch is desired, an explicit `opEquals` needs to be provided.
)

$(P
References:
[1] https://issues.dlang.org/show_bug.cgi?id=16657
[2] https://github.com/dlang/dmd/pull/9289
[3] https://github.com/dlang/dlang.org/pull/2593
)
)

$(LI $(LNAME2 copy_constructor,Copy Constructor)
$(CHANGELOG_SOURCE_FILE dmd, changelog/copy_constructor.dd)
$(P
With this release, the D language compiler implements the full functionality of the
copy constructor described extensively in this DIP [1].
)

$(P
$(P Copy constructors are used to initialize a `struct` instance from
another `struct` of the same type.)
)

$(P
$(P A constructor declaration is a copy constructor declaration if and only if it is a constructor
declaration that takes only one non-default parameter by reference that is
of the same type as `typeof(this)`, followed by any number of default parameters:)
)

---
struct A
{
    this(ref return scope A rhs) {}                        // copy constructor
    this(ref return scope const A rhs, int b = 7) {}       // copy constructor with default parameter
}
---

$(P
$(P The copy constructor is type checked as a normal constructor.)
)

$(P
$(P If a copy constructor is defined, implicit calls to it will be inserted
in the following situations:)
)

$(OL
$(LI When a variable is explicitly initialized:)
---
struct A
{
    this(ref return scope A rhs) {}
}

void main()
{
    A a;
    A b = a; // copy constructor gets called
}
---

$(LI When a parameter is passed by value to a function:)
---
struct A
{
    this(ref return scope A another) {}
}

void fun(A a) {}

void main()
{
    A a;
    fun(a);    // copy constructor gets called
}
---

$(LI When a parameter is returned by value from a function and Named Returned Value Optiomization (NRVO)
cannot be performed:)
---
struct A
{
    this(ref return scope A another) {}
}

A fun()
{
    A a;
    return a;       // NRVO, no copy constructor call
}

A a;
A gun()
{
    return a;       // cannot perform NRVO, rewrite to: return (A __tmp; __tmp.copyCtor(a));
}

void main()
{
    A a = fun();
    A b = gun();
}
---
)

$(P
$(P When a copy constructor is defined for a `struct`, all
implicit blitting is disabled for that `struct`:
)
)
---
struct A
{
    int[] a;
    this(ref return scope A rhs) {}
}

void fun(immutable A) {}

void main()
{
    immutable A a;
    fun(a);          // error: copy constructor cannot be called with types (immutable) immutable
}
---

$(P
$(P The copy constructor can be overloaded with different qualifiers applied
to the parameter (copying from a qualified source) or to the copy constructor
itself (copying to a qualified destination):
)
)
---
struct A
{
    this(ref return scope A another) {}                        // 1 - mutable source, mutable destination
    this(ref return scope immutable A another) {}              // 2 - immutable source, mutable destination
    this(ref return scope A another) immutable {}              // 3 - mutable source, immutable destination
    this(ref return scope immutable A another) immutable {}    // 4 - immutable source, immutable destination
}

void main()
{
    A a;
    immutable A ia;

    A a2 = a;      // calls 1
    A a3 = ia;     // calls 2
    immutable A a4 = a;     // calls 3
    immutable A a5 = ia;    // calls 4
}
---

$(P
$(P The `inout` qualifier may be applied to the copy constructor parameter in
order to specify that mutable, `const`, or `immutable` types are treated the same:
)
)
---
struct A
{
    this(ref return scope inout A rhs) immutable {}
}

void main()
{
    A r1;
    const(A) r2;
    immutable(A) r3;

    // All call the same copy constructor because `inout` acts like a wildcard
    immutable(A) a = r1;
    immutable(A) b = r2;
    immutable(A) c = r3;
}
---

$(P
$(P A copy constructor is generated implicitly by the compiler for a `struct S`
if all of the following conditions are met:)
)

$(P
$(OL
$(LI `S` does not explicitly declare any copy constructors;)
$(LI `S` defines at least one direct member that has a copy constructor, and that
member is not overlapped (by means of `union`) with any other member.)
)
)

$(P
$(P If the restrictions above are met, the following copy constructor is generated:)
)
---
this(ref return scope inout(S) src) inout
{
    foreach (i, ref inout field; src.tupleof)
        this.tupleof[i] = field;
}
---

$(P
$(P If the generated copy constructor fails to type check, it will receive the `@disable` attribute.)
)

$(P
$(P f an `union S` has fields that define a copy constructor, whenever an object of type `S`
is initialized by copy, an error will be issued. The same rule applies to overlapped fields
(anonymous unions).)
)

$(P
$(P A `struct` that defines a copy constructor is not a POD.)
)

$(P
[1] https://github.com/dlang/DIPs/blob/master/DIPs/accepted/DIP1018.md
)
)

$(LI $(LNAME2 dephexstrings,HexString literals are now obsolete)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dephexstrings.dd)
$(P
$(LINK2 http://dlang.org/spec/lex.html#HexString, HexString literals) are obsolete.
)

$(P
Prior to this release, usage of hex string literals would emit a deprecation warning.  Starting with this release they will emit an error.
)

$(P
Use $(LINK2 https://dlang.org/phobos/std_conv.html#hexString, `std.conv.hexString`) instead.
)
)

$(LI $(LNAME2 error_visibility,Turn deprecation into error for selectively imported symbols in imported modules.)
$(CHANGELOG_SOURCE_FILE dmd, changelog/error_visibility.dd)
$(P
With this release DMD will issue an error when a symbol that is privately and selectively imported in `module A` is accessed in `module B` that imports `module A` non-selectively. Example:
)

---
// a.d
import fun : foo;

// b.d
import a;

void main()
{
    foo();     // deprecation up until now; error from now on
}
---

$(P
To make the above code compile, the import in `a.d` needs to be made `public`.
)
)

$(LI $(LNAME2 funcliteralsbyref,Function literals can now return by reference)
$(CHANGELOG_SOURCE_FILE dmd, changelog/funcliteralsbyref.dd)
$(P
Prior to this release, there was no way to declare a function that would return a reference by using an anonymous function.
$(BR)(It was possible to return a pointer but it's not worth mentioning.)
)

$(P
Here this function returns by value:
)
---
alias fn = () => a += 2;
---
$(P
In order to return by reference, we needed to define a named function to assign from:
)
---
ref int func()        // a static or non-nested function to mimic a `function` literal
{                     // or a non-static nested function to mimic a `delegate` literal
    return a += 2;
}
alias fn = func;
---
$(P
Now it's possible to use the `ref` keyword to indicate a return by reference:
)
---
function ref () { return x; }    // `=>` shorthand is there too
delegate ref () { return x; }
ref () { return x; }
---
$(P
For example:
)
---
int x = 1;
alias add2 = ref () => x += 2;
add2() += 7;    // add2 as a lvalue
assert(x == 10);
---
)

$(LI $(LNAME2 lowmem,New command-line option `-lowmem` to reduce compiler memory requirements)
$(CHANGELOG_SOURCE_FILE dmd, changelog/lowmem.dd)
$(P
It enables the garbage collector for the compiler, trading compile times for (in some cases, significantly) less memory requirements.
)

$(P
E.g., compiling DMD's test tool d_do_test (`dmd -c [-lowmem] test/tools/d_do_test.d`) requires about 75% less memory (~1,630 MB -> 410) at the cost of a runtime increase by ~30% (~4.8 secs -> 6.3).
)
)

$(LI $(LNAME2 traits,Enable private member access for traits)
$(CHANGELOG_SOURCE_FILE dmd, changelog/traits.dd)
$(P
The following traits can now access non-public members:
$(UL
    $(LI getMember)
    $(LI getOverloads)
)
)

$(P
This fixes a long-standing issue in D where the allMembers trait would correctly return non-public members but those non-public members would be inaccessible to other traits.
)

$(P
See BugZilla issue $(LINK2 https://issues.dlang.org/show_bug.cgi?id=15371, 15371)
)
)


)

$(BUGSTITLE_TEXT_BODY Runtime changes,

$(LI $(LNAME2 core_sync_event,New module core.sync.event)
$(CHANGELOG_SOURCE_FILE druntime, changelog/core_sync_event.dd)
$(P
This module provides a cross-platform interface for lightweight signaling of other threads.
It can be used to start execution of multiple waiting threads simultaneously.
)
)


)

$(BUGSTITLE_TEXT_BODY Library changes,

$(LI $(LNAME2 comparison_bug,Fixed comparison bug in `std.algorithm.comparison.levenshteinDistance`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/comparison_bug.dd)
$(P
Previously the algorithm was allocating the amount of memory which was equal to
the size of the biggest range, that is $(BIGOH max(s.length, t.length)).
This is now fixed to be $(BIGOH min(s.length, t.length)).
For more details see $(REF levenshteinDistance, std, algorithm, comparison).
)
)

$(LI $(LNAME2 std-all,`std.experimental.all` has been moved to `std`)
$(CHANGELOG_SOURCE_FILE phobos, changelog/std-all.dd)
$(P
`std.experimental.all` allowed the convenient use of all Phobos modules
with one import (`import std.experimental.all;`). With this release, this
convenience module has been stabilized and moved to `std`. From now on, the
convenience module can be accessed with `import std;`:
)

---
import std;
void main()
{
    5f.iota.map!exp2.sum; // 31
}
---

$(P
Scripts and experimental code often use long and frequently changing
lists of imports from the standard library.
)

$(P
With this release it is possible to use `import std;` for importing the entire
standard library at once. This can be used for fast prototyping or REPLs:
)

---
import std;
void main()
{
    6.iota
      .filter!(a => a % 2) // 1 3 5
      .map!(a => a * 2) // 2 6 10
      .tee!writeln // peek into the processed stream
      .substitute(6, -6) // 2 -6 10
      .mean // (2 - 6 + 10) / 3
      .reverseArgs!writefln("Sum: %.2f"); // 2
}
---

$(P
As before, symbol conflicts will only arise if a symbol with collisions is used.
In this case, $(LINK2 $(ROOT)spec/module.html#static_imports, static imports) or
$(LINK2 $(ROOT)spec/module.html#renamed_imports, renamed imports) can be used
to uniquely select a specific symbol.
)

$(P
The baseline cost for `import std;`
is less than half a second (varying from system to system) and
work is in progress to reduce this overhead even further.
)
)


)

$(BUGSTITLE_TEXT_BODY Installer changes,

$(LI $(LNAME2 lld-8,The bundled LLD Linker has been upgraded to 8.0.0)
$(CHANGELOG_SOURCE_FILE installer, changelog/lld-8.dd)
$(P
The bundled LLD Linker on Windows binaries has been upgraded to 8.0.0.
)
)


)

$(BUGSTITLE_TEXT_BODY Dub changes,

$(LI $(LNAME2 custom-dub-init-type,Support of custom dub init type)
$(CHANGELOG_SOURCE_FILE dub, changelog/custom-dub-init-type.dd)
$(P
Command dub init now supports custom dub packages for argument `-t`.
$(CONSOLE
\> dub init -n myPackage --format sdl -t custom-dub-init-dubpackage -- --foo=bar
)
)

$(P
Dub init will be invoked like before. The package `custom-dub-init-dubpackage`
contains a sub package `init-exec` which will be invoked afterwards to create a custom
package skeleton. Additional arguments could be passed e.g. `-- --foo=bar`.
)
)

$(LI $(LNAME2 dmd-mscoff-default,DUB will no longer use OPTLINK as default on Windows)
$(CHANGELOG_SOURCE_FILE dub, changelog/dmd-mscoff-default.dd)
$(P
DMD's $(LINK2 https://digitalmars.com/ctg/optlink.html, OPTLINK) has many limitations. Apart from long-standing issues in the underlying DigitalMars runtime,
the maximum number of symbols is limited as well, which is why most big DUB
libraries can't be compiled with OPTLINK for years. This has been a cause of
grief and pain for many users and impacted the newcomer experience severly.
)

$(P
With this release, `dub` will no longer use `OPTLINK` as default on Windows, but
use `-m32mscoff` (MSCOFF) on 32-bit Windows systems and `-m64` (MSCOFF) on 64-bit
Windows.
)

$(P
Users can still manually instruct `dub` to use OPTLINK with the `--arch=x86` switch of `dub`:
)

$(P
$(CONSOLE
\> dub --arch=x86
)
)
)

$(LI $(LNAME2 dub-run,`dub run` will now automatically fetch a package if it's not found locally)
$(CHANGELOG_SOURCE_FILE dub, changelog/dub-run.dd)
$(P
Starting with this release, `dub run <mypackage>` makes sure that the package is available locally.
This means that now a `dub fetch <mypackage>` is no longer required and all a user of a library needs to run your dub package is `dub run`:
)

$(P
$(CONSOLE
\> dub run gitcompatibledubpackage
gitcompatibledubpackage wasn't found locally, but it's available online:
&dash;--
Description: Example of a DUB package also usable as git submodule. For DUB test suite.
Version: 1.0.4
&dash;--
Do you want to fetch gitcompatibledubpackage? [Y/n]:
)
)

$(P
An optional `--yes` (`-y`) flag is provided to confirm fetching non-interactively:
)

$(P
$(CONSOLE
\> dub run --yes gitcompatibledubpackage
gitcompatibledubpackage wasn't found locally, but it's available online:
&dash;--
Description: Example of a DUB package also usable as git submodule. For DUB test suite.
Version: 1.0.4
&dash;--
Fetching gitcompatibledubpackage 1.0.4...
Building package gitcompatibledubpackage in /home/seb/.dub/packages/gitcompatibledubpackage-1.0.4/gitcompatibledubpackage/
Performing "debug" build using dmd for x86_64.
gitcompatibledubpackage 1.0.4: building configuration "exe"...
Linking...
Running ../../.dub/packages/gitcompatibledubpackage-1.0.4/gitcompatibledubpackage/gitcompatibledubpackage
Hello DUB
)
)

$(P
An optional `--non-interactive` (`-n`) flag is provided to skip searching online packages:
)

$(P
$(CONSOLE
\> dub run --non-interactive gitcompatibledubpackage
Failed to find a package named 'gitcompatibledubpackage'.
)
)

$(P
If one wants to run a specific version of a package, it can be passed to `dub run` too:
)

$(P
$(CONSOLE
\> dub run gitcompatibledubpackage@1.0.3
Fetching gitcompatibledubpackage 1.0.3...
Building package gitcompatibledubpackage in /home/seb/.dub/packages/gitcompatibledubpackage-1.0.3/gitcompatibledubpackage/
Performing "debug" build using dmd for x86_64.
gitcompatibledubpackage 1.0.3: building configuration "exe"...
Linking...
Running ../../.dub/packages/gitcompatibledubpackage-1.0.3/gitcompatibledubpackage/gitcompatibledubpackage
Hello DUB
)
)
)

$(LI $(LNAME2 remove-dub-list-installed,Remove `dub list-installed` command)
$(CHANGELOG_SOURCE_FILE dub, changelog/remove-dub-list-installed.dd)
$(P
`dub list-installed` command was deprecated and renamed to `list` at $(LINK2 https://github.com/dlang/dub/pull/150, in 2013).
)
)

$(LI $(LNAME2 single-api-requests,DUB uses single API requests to upgrade/resolve dependencies.)
$(CHANGELOG_SOURCE_FILE dub, changelog/single-api-requests.dd)
$(P
`dub` now uses single API request to upgrade/resolve dependencies.
For more details, see $(LINK2 https://github.com/dlang/dub/pull/1366, pull #1366).
)
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regressions,

$(LI $(BUGZILLA 17684): [REG 2.062] `static alias this` bug or incomplete implementation?)
$(LI $(BUGZILLA 18810): root/ctfloat depends upon backend)
$(LI $(BUGZILLA 19519): cannot determine length of static array at compile time)
$(LI $(BUGZILLA 19691): ICE on null default value for struct parameter in constructor)
$(LI $(BUGZILLA 19722): botched implementation of semantic3Errors causes compiler assert fail)
$(LI $(BUGZILLA 19774): wrong code caused by opIndex)
$(LI $(BUGZILLA 19778): ICE when accessing empty array at compile time)
$(LI $(BUGZILLA 19782): `alias this` appends `null` instead of inner/aliased element to array)
$(LI $(BUGZILLA 19804): fails to compile with fixes size array T[1]... argument)
$(LI $(BUGZILLA 19822): 2.086 regression wrt. union initializers)
$(LI $(BUGZILLA 19833): The member as template cannot be acquired by getMember)
$(LI $(BUGZILLA 19840): Ice in e2ir.d visit$(LPAREN)CastExp$(RPAREN) assert$(LPAREN)false, "This case should have been rewritten to `__ArrayCast` in the semantic phase"$(RPAREN);)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bugs,

$(LI $(BUGZILLA 5050): No way to declare delegates with ref return)
$(LI $(BUGZILLA 10806): Interface covariance for more than one interface at once also broken)
$(LI $(BUGZILLA 11934): Allow `ref` in `foreach` over range iff `front` returns by `ref`)
$(LI $(BUGZILLA 15875): case of undetected circular reference in function parameter)
$(LI $(BUGZILLA 17285): Segfault when types are used in array literals)
$(LI $(BUGZILLA 17289): With Xcode 8.3 linker, warnings of "pointer not aligned")
$(LI $(BUGZILLA 17290): DMD crash due to circular reference in function return type)
$(LI $(BUGZILLA 17651): Segfault when parsing Ddoc ESCAPES macro)
$(LI $(BUGZILLA 18573): cast$(LPAREN)void$(RPAREN) leads to floating point return value not being popped from FPU stack)
$(LI $(BUGZILLA 19051): Undefined functions Set/GetWindowLongPtr in mingw libs)
$(LI $(BUGZILLA 19099): Struct with field that has postblit or destructor makes struct assignable)
$(LI $(BUGZILLA 19442): multiple argument string mixin dont support char literals)
$(LI $(BUGZILLA 19463): DIP1008 - _d_newclass is called instead of _d_newThrowable)
$(LI $(BUGZILLA 19540): ICE when using `typeof$(LPAREN)new class {}$(RPAREN)` as default value for template parameter)
$(LI $(BUGZILLA 19563): extern$(LPAREN)C++$(RPAREN) Incorrect ABI passing small struct)
$(LI $(BUGZILLA 19569): overload resolution not right?)
$(LI $(BUGZILLA 19658): C++ enum mangling is wrong on Windows for other integer types)
$(LI $(BUGZILLA 19679): variable escapes unnoticed when referenced in function called from function whose address is taken)
$(LI $(BUGZILLA 19688): [ICE] Default function argument concatenation crashes DMD)
$(LI $(BUGZILLA 19717): case of segfault due to undetected forward reference)
$(LI $(BUGZILLA 19719): Debugging string mixins using -mixin doesn't work)
$(LI $(BUGZILLA 19731): auto struct methods whose address is taken don't test invariants)
$(LI $(BUGZILLA 19734): isDataseg returns true for non-static declarations)
$(LI $(BUGZILLA 19735): Error: variable extern symbols cannot have initializers)
$(LI $(BUGZILLA 19744): Confusing error message when annotating a non-member function with `return`)
$(LI $(BUGZILLA 19747): No debug line info for code in scope$(LPAREN)exit$(RPAREN))
$(LI $(BUGZILLA 19775): multiple argument string mixin doesn't expand tuples)
$(LI $(BUGZILLA 19797): File.seek$(LPAREN)$(RPAREN) terminates ungracefully on incorrect origin for -m32mscoff and -m64)
)
$(BUGSTITLE_BUGZILLA DMD Compiler enhancements,

$(LI $(BUGZILLA 8065): No way to write function/delegate literals returning ref T)
$(LI $(BUGZILLA 12330): array.reserve at compile time too)
$(LI $(BUGZILLA 15361): Incomprehensible error message: function declaration without return type.)
$(LI $(BUGZILLA 15371): __traits$(LPAREN)getMember$(RPAREN) should bypass the protection)
$(LI $(BUGZILLA 16271): Should be able to express that a lambda returns by reference)
$(LI $(BUGZILLA 16657): alias this interacts with generated opCmp and opEquals)
$(LI $(BUGZILLA 18825): No syntax for function literal returning a reference)
$(LI $(BUGZILLA 19441): alias this causes partial assignment)
$(LI $(BUGZILLA 19809): `override` block affects passing lambda as argument)
)
$(BUGSTITLE_BUGZILLA Phobos regressions,

$(LI $(BUGZILLA 19777): [REG2.086a] SortedRange.opSlice is wrongly `@trusted`)
)
$(BUGSTITLE_BUGZILLA Phobos bugs,

$(LI $(BUGZILLA 18728): std.math.fdim does not handle nan correctly)
$(LI $(BUGZILLA 19042): Chunking a padRight'ed range leads to range violations)
$(LI $(BUGZILLA 19151): std.utf.toUTF16z$(LPAREN)$(RPAREN) can not be used for LPWSTR)
$(LI $(BUGZILLA 19681): std.range.padRight.popFront does not correctly adjust length)
$(LI $(BUGZILLA 19689): large types cannot be moved)
$(LI $(BUGZILLA 19751): std.stdio.File should not retry fclose after error)
$(LI $(BUGZILLA 19799): templated string formatting fails with const Nullable!string)
$(LI $(BUGZILLA 19806): phobos/std/uri.d: ietf link outdated)
)
$(BUGSTITLE_BUGZILLA Phobos enhancements,

$(LI $(BUGZILLA 15853): std.random save methods must be const)
$(LI $(BUGZILLA 18806): minIndex should be able to take an input range but does not)
$(LI $(BUGZILLA 19412): std.algorithm.cmp with default ordering can use memcmp for all size 1 unsigned types $(LPAREN)instead of just char$(RPAREN))
$(LI $(BUGZILLA 19686): sgn is too greedy)
)
$(BUGSTITLE_BUGZILLA Druntime regressions,

$(LI $(BUGZILLA 18530): [Reg 2.079] src/rt/tracegc.d$(LPAREN)43$(RPAREN): Deprecation: The delete keyword has been deprecated)
$(LI $(BUGZILLA 19796): druntime PR#1982 broke array ops on double[] due to wrong assumption of integral element type)
)
$(BUGSTITLE_BUGZILLA Druntime bugs,

$(LI $(BUGZILLA 19810): destroy does not work for C++ classes without destructor)
$(LI $(BUGZILLA 19830): core.memory.__delete destructs arrays of structs in the wrong order)
)
$(BUGSTITLE_BUGZILLA dlang.org bugs,

$(LI $(BUGZILLA 11161): Document the default struct equality comparison and operator overloading)
$(LI $(BUGZILLA 19621): The specification is self-contradictory on immutability)
)
$(BUGSTITLE_BUGZILLA Installer regressions,

$(LI $(BUGZILLA 18522): [REG 2.079-b2] MinGW import libraries interfere with platform SDK)
)
)
$(D_CONTRIBUTORS_HEADER 51)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR aG0aep6G)
    $(D_CONTRIBUTOR Ali Çehreli)
    $(D_CONTRIBUTOR Andrea Fontana)
    $(D_CONTRIBUTOR Andrei Alexandrescu)
    $(D_CONTRIBUTOR Andy Kurnia)
    $(D_CONTRIBUTOR Arun Chandrasekaran)
    $(D_CONTRIBUTOR Basile Burg)
    $(D_CONTRIBUTOR Basile-z)
    $(D_CONTRIBUTOR Bastiaan Veelo)
    $(D_CONTRIBUTOR Ben Jones)
    $(D_CONTRIBUTOR Boris Carvajal)
    $(D_CONTRIBUTOR Cameron Ross)
    $(D_CONTRIBUTOR David Gileadi)
    $(D_CONTRIBUTOR David Nadlinger)
    $(D_CONTRIBUTOR Dejan Lekic)
    $(D_CONTRIBUTOR Eduard Staniloiu)
    $(D_CONTRIBUTOR Flying-Toast)
    $(D_CONTRIBUTOR Hiroki Noda)
    $(D_CONTRIBUTOR Iain Buclaw)
    $(D_CONTRIBUTOR Ilya Yaroshenko)
    $(D_CONTRIBUTOR Jacob Carlborg)
    $(D_CONTRIBUTOR John Colvin)
    $(D_CONTRIBUTOR Jon Degenhardt)
    $(D_CONTRIBUTOR kinke)
    $(D_CONTRIBUTOR lempiji)
    $(D_CONTRIBUTOR look-at-me)
    $(D_CONTRIBUTOR majiang)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Martin Nowak)
    $(D_CONTRIBUTOR Mathis Beer)
    $(D_CONTRIBUTOR Mike Franklin)
    $(D_CONTRIBUTOR Mike Parker)
    $(D_CONTRIBUTOR Nathan Sashihara)
    $(D_CONTRIBUTOR Nicholas Wilson)
    $(D_CONTRIBUTOR Nick Treleaven)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Petar Kirov)
    $(D_CONTRIBUTOR Radu Racariu)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Razvan Nitu)
    $(D_CONTRIBUTOR Sebastian Wilzbach)
    $(D_CONTRIBUTOR Simen Kjærås)
    $(D_CONTRIBUTOR Sönke Ludwig)
    $(D_CONTRIBUTOR tibi77)
    $(D_CONTRIBUTOR TJesionowski)
    $(D_CONTRIBUTOR Vasniktel)
    $(D_CONTRIBUTOR Vasyl Teliman)
    $(D_CONTRIBUTOR Vladimir Panteleev)
    $(D_CONTRIBUTOR Walter Bright)
    $(D_CONTRIBUTOR XyjVam)
    $(D_CONTRIBUTOR سليمان السهمي  (Suleyman Sahmi))
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.086.0
    TITLE=Change Log: $(VER)
