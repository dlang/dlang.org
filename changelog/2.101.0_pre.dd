Ddoc

$(CHANGELOG_NAV_INJECT)

$(VERSION Nov 14, 2022, =================================================,

$(CHANGELOG_HEADER_STATISTICS
$(VER) comes with 38 major changes and 737 fixed Bugzilla issues.
        A huge thanks goes to the
        $(LINK2 #contributors, 299 contributors)
        who made $(VER) possible.)

$(BUGSTITLE_TEXT_HEADER Compiler changes,

$(LI $(RELATIVE_LINK2 dmd.bitfields,Add bit fields to D))
$(LI $(RELATIVE_LINK2 dmd.class_instance_alignment,Added `__traits(classInstanceAlignment)`))
$(LI $(RELATIVE_LINK2 dmd.crt_constructor_signature,Relaxed `pragma(crt_constructor)` / `pragma(crt_destructor)` linkage check))
$(LI $(RELATIVE_LINK2 dmd.d_optimized,Add predefined version `D_Optimized` when compiling with `-O`))
$(LI $(RELATIVE_LINK2 dmd.deprecate_throwing_nothrow_contracts,Throwing from contracts of `nothrow` functions has been deprecated))
$(LI $(RELATIVE_LINK2 dmd.deprecate_version_int,Using integers for `version` or `debug` conditions has been deprecated))
$(LI $(RELATIVE_LINK2 dmd.dip1000_deprecation_warnings,Print deprecations for `scope` pointer errors))
$(LI $(RELATIVE_LINK2 dmd.dtoh-improvements,Improvements for the C++ header generation))
$(LI $(RELATIVE_LINK2 dmd.fix-immutable-conv,`-preview=fixImmmutableConv` has been added))
$(LI $(RELATIVE_LINK2 dmd.fix22134,Returning a discarded void value from a function is now deprecated))
$(LI $(RELATIVE_LINK2 dmd.importc_typeof,ImportC now recognizes the `typeof(...)` operator))
$(LI $(RELATIVE_LINK2 dmd.markdown,Removed the `-transition=markdown` and `-revert=markdown` switches))
$(LI $(RELATIVE_LINK2 dmd.new-aa,`new` can now allocate an associative array))
$(LI $(RELATIVE_LINK2 dmd.previewInLink,`-preview=in` can now be used with `extern(C++)`, disabled for other non-D linkage))
$(LI $(RELATIVE_LINK2 dmd.shortenedMethodsEnabled,The shortened method syntax is now available by default.))

)

$(BUGSTITLE_TEXT_HEADER Runtime changes,

$(LI $(RELATIVE_LINK2 druntime.cpuid-add-avx512f,Added avx512f detection to `core.cpuid`))
$(LI $(RELATIVE_LINK2 druntime.drt-oncycle-deprecate,`--DRT-oncycle=deprecate` is removed))
$(LI $(RELATIVE_LINK2 druntime.posix_gc_signals,Posix (excl. Darwin): Switch default GC signals from SIGUSR1/2 to SIGRTMIN/SIGRTMIN+1))

)

$(BUGSTITLE_TEXT_HEADER Library changes,

$(LI $(RELATIVE_LINK2 borrow_for_refcounted,Added `SafeRefCounted`, that can be used in `@safe` with `-preview=dip1000`.))
$(LI $(RELATIVE_LINK2 logger,Move logger out of experimental.))
$(LI $(RELATIVE_LINK2 logger_remove_compile_time_loglevel,remove std.experimental.logger's capability to set the minimal LogLevel at compile time))
$(LI $(RELATIVE_LINK2 logger_sharedLog_returning_shared_logger,Change std.experimental.logger.core.sharedLog to return shared(Logger)))
$(LI $(RELATIVE_LINK2 remove-experimental-typecons,std.experimental.typecons has been removed))
$(LI $(RELATIVE_LINK2 remove-std-digest-digest,std.digest.digest has been removed))
$(LI $(RELATIVE_LINK2 remove-std-xml,std.xml has been removed))
$(LI $(RELATIVE_LINK2 scopesocket,`std.socket.Socket` methods now accept only `scope` arrays.))
$(LI $(RELATIVE_LINK2 std_outbuffer_align,Add custom fill value to std.outbuffer.OutBuffer class))

)

$(BUGSTITLE_TEXT_HEADER Dub changes,

$(LI $(RELATIVE_LINK2 build_unittest,Building the special test runner configuration))
$(LI $(RELATIVE_LINK2 colored_output,Output will now be colorized))
$(LI $(RELATIVE_LINK2 configy_stricter_parsing,dub will now warn on unrecognized settings or selections file))
$(LI $(RELATIVE_LINK2 cov_ctfe,The two new build types `cov-ctfe` and `unittest-cov-ctfe` have been added.))
$(LI $(RELATIVE_LINK2 dpath,DUB settings & packages directory placement overhauled))
$(LI $(RELATIVE_LINK2 exitcodes,DUB command exit codes have been made more consistent))
$(LI $(RELATIVE_LINK2 install_uninstall,'install' and 'uninstall' commands have been removed))
$(LI $(RELATIVE_LINK2 make-copies-writable,When `copyFiles` is used to copy read-only files, it now makes the copy writable.))
$(LI $(RELATIVE_LINK2 overrides_deprecated,The override system is deprecated))
$(LI $(RELATIVE_LINK2 subpackage_short_syntax,The shortcut syntax for "dub run" is now also available for sub packages.))
$(LI $(RELATIVE_LINK2 subpackage_upgrade,Upgrading all sub packages at once))

)

$(CHANGELOG_SEP_HEADER_TEXT_NONEMPTY)

$(CHANGELOG_SEP_HEADER_TEXT)

$(BUGSTITLE_TEXT_BODY Compiler changes,

$(LI $(LNAME2 dmd.bitfields,Add bit fields to D)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.bitfields.dd)
$(P
They work just like the bit fields in ImportC do.
)

$(P
https://github.com/dlang/dlang.org/pull/3190
)

---
struct B
{
    int x:3, y:2;
}

static assert(B.sizeof == 4);

int vaporator(B b)
{
    b.x = 4;
    b.y = 2;
    return b.x + b.y; // returns 6
}
---
)

$(LI $(LNAME2 dmd.class_instance_alignment,Added `__traits(classInstanceAlignment)`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.class_instance_alignment.dd)
$(P
To complement `__traits(classInstanceSize)`, providing the required
alignment for manual buffers etc.:
)

---
align(__traits(classInstanceAlignment, C))
void[__traits(classInstanceSize, C)] buffer;
---
)

$(LI $(LNAME2 dmd.crt_constructor_signature,Relaxed `pragma(crt_constructor)` / `pragma(crt_destructor)` linkage check)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.crt_constructor_signature.dd)
$(P
`extern(C)` isn't a requirement for CRT con/destructors anymore when
using the default `void ()` signature.
)
)

$(LI $(LNAME2 dmd.d_optimized,Add predefined version `D_Optimized` when compiling with `-O`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.d_optimized.dd)
$(P
It allows code to distinguish whether it's being compiled with optimizations enabled (the `-O` flag was provided).
This is orthogonal to whether `-release` mode is active - for that see the
predefined versions `assert`, `D_NoBoundsChecks`, `D_Invariants`, etc.
)
)

$(LI $(LNAME2 dmd.deprecate_throwing_nothrow_contracts,Throwing from contracts of `nothrow` functions has been deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecate_throwing_nothrow_contracts.dd)
$(P
Up until now, the compiler accepted `in` and `out` contracts of `nothrow`
functions to throw exceptions and call throwing functions. As this breaks
`nothrow` guarantees, a deprecation notice is now triggered.
)

---
// deprecated:
float sqrt(float n) nothrow
in
{
    if (n < 0)
        throw new Exception("n must be positive");
}
do
{
    // ...
}

// fix: remove nothrow attribute or use assertions
float sqrt(float n) nothrow
in
{
    assert(n >= 0);
}
do
{
    // ...
}
---
)

$(LI $(LNAME2 dmd.deprecate_version_int,Using integers for `version` or `debug` conditions has been deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.deprecate_version_int.dd)
$(P
The problem is that it only provides a single number namespace without any meaning.
It's better to use version identifiers describing the feature they enable.
See also [this thread on the forum](https://forum.dlang.org/post/chtcuqdjzddlesdhablo@forum.dlang.org).
)

---
// now deprecated:
version = 3;
version (2) { }

debug = 4;
debug (5) { }

// use identifiers instead:
version = HasX;

version (HasX)
    void x() { /* ... */ }
else
    void x() {}
---
)

$(LI $(LNAME2 dmd.dip1000_deprecation_warnings,Print deprecations for `scope` pointer errors)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.dip1000_deprecation_warnings.dd)
$(P
The `scope` attribute has existed for a long time, but the compiler would only verify its semantics when the `-preview=dip1000` switch was passed, to avoid breaking code.
Pointers or references stored in a scope variable are not allowed to escape the scope in which the variable is defined.
)

$(P
Usually, it is not necessary to mark variables `scope`, since the [Garbage Collector](https://dlang.org/spec/garbage.html) (GC) takes care of freeing memory.
However, D allows creating pointers / slices that point to local variables, which use [Stack-based memory allocation](https://en.wikipedia.org/wiki/Stack-based_memory_allocation) and are destructed at the end of their scope.
It is important that in `@safe` code, creating such pointers is either disallowed, or has `scope` semantics enforced, but the compiler would formerly fail to do that:
)

---
@safe:
int[] getSlice()
{
    int[4] stackBuffer;
    int[] slice = stackBuffer[]; // slice points to local variable allocated on stack
    return slice; // dangling pointer!
}

struct S
{
    int x;

    int* get()
    {
        int* y = &this.x; // this struct instance could be a local variable
        return y; // dangerous!
    }
}
---

$(P
Starting with this release, `scope` semantics are enforced in `@safe` code on pointers to stack memory, but only as deprecation warnings.
Eventually, they will be turned into errors.
To turn them into errors immediately, use `-preview=dip1000`.
To disable the deprecations, use `-revert=dip1000`.
)

$(P
Note that [the original DIP1000 text](https://dlang.org/dips/1000) is outdated, so please refer to the specification pages for documentation:
)

$(P
$(UL
    $(LI $(DDSUBLINK spec/memory-safe-d, scope-return-params, Scope and Return Parameters) )
    $(LI $(DDSUBLINK spec/attribute, scope, scope Attribute) )
    $(LI $(DDSUBLINK spec/function, scope-parameters, Scope Parameters) )
    $(LI $(DDSUBLINK spec/function, return-scope-parameters, Return Scope Parameters) )
    $(LI $(DDSUBLINK spec/function, return-ref-scope-parameters, Ref Return Scope Parameters) )
    $(LI $(DDSUBLINK spec/function, pure-scope-inference, Inferred scope parameters in pure functions) )
)
)
)

$(LI $(LNAME2 dmd.dtoh-improvements,Improvements for the C++ header generation)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.dtoh-improvements.dd)
$(P
The following features/bugfixes/improvements were implemented for the
experimental C++ header generator:
)

$(P
- Overriding virtual functions are now marked with the `override` keyword when
  generating C++11 compatible headers.
- Final virtual functions are now marked with the `final` keyword when
  generating C++11 compatible headers.
)

$(P
Note: The header generator is still considered experimental, so please submit
      any bugs encountered to [the bug tracker](https://issues.dlang.org).
)
)

$(LI $(LNAME2 dmd.fix-immutable-conv,`-preview=fixImmmutableConv` has been added)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.fix-immutable-conv.dd)
$(P
The compiler allows implicitly converting a return value with indirections to immutable if it determines the result must be unique.
Formerly, this check would inspect the types of the indirections, and forget to take into account conversions, such as `int[]` to `void[]`:
)

---
int[] f(ref void[] m) pure
{
    auto result = new int[5];
    m = result;
    return result;
}

void main()
{
    void[] v;
    immutable x = f(v);
    // `v` is now a mutable alias to immutable variable `x`
}
---

$(P
This was filed as [issue 15660](https://issues.dlang.org/show_bug.cgi?id=15660), which has been fixed some time ago by making the check more strict: the called function must be strongly pure.
However, to avoid breaking code, the fix was only active with the `-preview=dip1000` switch.
Since it is unrelated to dip1000 (which is about `scope` pointers), the fix has been moved to a new `-preview=fixImmmutableConv` switch.
)
)

$(LI $(LNAME2 dmd.fix22134,Returning a discarded void value from a function is now deprecated)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.fix22134.dd)
$(P
An expression statement of type void that has no side effects should
be discarded since it has no effect. The compiler, generally, does not
allow such statements, however, in the case of return statements this
error is circumvented. For example:
)

---
struct StackBuffer
{
    auto opIndex(size_t i)
    {
        return arr[i];
    }

private:
    void[] arr;
}
---

$(P
Although this code compiles, any call to `opIndex` is going to result in an
error because the return type must either be stored somewhere (and variables
cannot be of type void) or the call will have no effect.
)

$(P
Starting with this release, returning a discarded void value from a function
is deprecated. Such code can be deleted as it most certainly is dead code.
)
)

$(LI $(LNAME2 dmd.importc_typeof,ImportC now recognizes the `typeof(...)` operator)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.importc_typeof.dd)
$(P
ISO C does not specify a `typeof` operator, but it is a widely-implemented vendor extension.
ImportC now implements this extension as well.
)

$(P
Only the form `typeof(...)` is recognized, other compilers also support (or only support one of)
`__typeof__(...)` and `__typeof(...)`. Imported C using these forms will need to be normalized with `#define`s.
)
)

$(LI $(LNAME2 dmd.markdown,Removed the `-transition=markdown` and `-revert=markdown` switches)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.markdown.dd)
$(P
This release removes the `-transition=markdown`, which prints markdown substitutions
made when processing markdown in ddoc documentation blocks, and `-revert=markdown`
switches which disables markdown substitutions in ddoc documentation blocks.
)

$(P
Markdown substitutions have been the default for some time now, and as of this release
is always performed.
)
)

$(LI $(LNAME2 dmd.new-aa,`new` can now allocate an associative array)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.new-aa.dd)
$(P
This allows two associative array references to point to the same
associative array instance before any keys have been inserted.
)

---
int[string] a = new int[string];
auto b = a;
...
a["seven"] = 7;
assert(b["seven"] == 7);
---

$(P
Note: Calling `new` is not needed before inserting keys on a null
associative array reference - the instance will be allocated if it
doesn't exist.
)
)

$(LI $(LNAME2 dmd.previewInLink,`-preview=in` can now be used with `extern(C++)`, disabled for other non-D linkage)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.previewInLink.dd)
$(P
The intent of `-preview=in` is to make `in` the go-to storage class for input parameters in D.
However, it is D centric, as it is an enhanced version of `scope const ref`.
As non-`extern(D)` functions usually are expected to match a specific ABI,
using `in` is hardly a good idea.
)

$(P
As C++ also has a "go to" storage class for input parameters (`const T&`),
`in` can also be applied on `extern(C++)` function in order to bind to `const T&` parameters.
This also allows to expose a closer API for a function than via `const ref`,
as `in` will allow to bind rvalues to `const T&`, as in C++.
)
)

$(LI $(LNAME2 dmd.shortenedMethodsEnabled,The shortened method syntax is now available by default.)
$(CHANGELOG_SOURCE_FILE dmd, changelog/dmd.shortenedMethodsEnabled.dd)
$(P
[DIP 1043---Shortened Method Syntax](https://forum.dlang.org/thread/ahswpyijfidyorixgaqm@forum.dlang.org) has been accepted, the flag `-preview=shortenedMethods`
is no longer required to write shortened function bodies:
)

---
int add(int x, int y) pure => x + y;

// equivalent full function body:
int add(int x, int y) pure
{
    return x + y;
}
---

$(P
The preview flag will still work until it is deprecated in a future release.
)
)


)

$(BUGSTITLE_TEXT_BODY Runtime changes,

$(LI $(LNAME2 druntime.cpuid-add-avx512f,Added avx512f detection to `core.cpuid`)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.cpuid-add-avx512f.dd)
$(P
The feature flag `core.cpuid.avx512f` has been added to allow detection at
run-time CPUs with 512-bit vector support.
)
)

$(LI $(LNAME2 druntime.drt-oncycle-deprecate,`--DRT-oncycle=deprecate` is removed)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.drt-oncycle-deprecate.dd)
$(P
The option was [introduced in 2.072.2](https://dlang.org/changelog/2.072.2.html#drt-cycle-deprecated) to help transition code that relied on the old faulty cycle checker for module constructors.
It now prints a warning and does the same as the default, `--DRT-oncycle=abort`.
See also: $(DDSUBLINK spec/module, order_of_static_ctor, Order of Static Construction) in the specification.
)
)

$(LI $(LNAME2 druntime.posix_gc_signals,Posix (excl. Darwin): Switch default GC signals from SIGUSR1/2 to SIGRTMIN/SIGRTMIN+1)
$(CHANGELOG_SOURCE_FILE dmd, changelog/druntime.posix_gc_signals.dd)
$(P
As the SIGUSR ones might be used by 'system' libraries (e.g., Android
Dalvik VM or LLVM libFuzzer), while the SIGRT ones are reserved for
user-defined purposes and less likely to collide.
)

$(P
The used signals can still be customized with an early call to
`core.thread.osthread.thread_setGCSignals()`.
)
)


)

$(BUGSTITLE_TEXT_BODY Library changes,

$(LI $(LNAME2 borrow_for_refcounted,Added `SafeRefCounted`, that can be used in `@safe` with `-preview=dip1000`.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/borrow_for_refcounted.dd)
$(P
`RefCounted` is only available for `@system` code, because of the possibility of
escaping a reference to its payload past the end of its lifetime. a modified
copy of it, `std.typecons.SafeRefCounted` has been added. Also added is a
`borrow` function, that lets one safely access and modify the payload.
`-preview=dip1000` prevents escaping a reference to it in `@safe` code.
)

-------
@safe pure nothrow void fun()
{
    import std.typecons;

    auto rcInt = safeRefCounted(5);
    assert(rcInt.borrow!(theInt => theInt) == 5);
    auto sameInt = rcInt;
    assert(sameInt.borrow!"a" == 5);

    // using `ref` in the function
    auto arr = [0, 1, 2, 3, 4, 5, 6];
    sameInt.borrow!(ref (x) => arr[x]) = 10;
    assert(arr == [0, 1, 2, 3, 4, 10, 6]);

    // modifying the payload via an alias
    sameInt.borrow!"a*=2";
    assert(rcInt.borrow!"a" == 10);
}
-------

$(P
Direct access to the payload unfortunately has to be `@system`, though. While
`-dip1000` could prevent escaping the reference, it is possible to destroy the
last reference before the end of it's scope:
)

-------
int destroyFirstAndUseLater()
{
    import std.typecons;

    auto rc = SafeRefCounted!int(123);
    int* ptr = &rc.refCountedPayload();
    destroy(rc);
    return *ptr; // Reads from freed memory. Don't do this.
}
-------

$(P
As a side effect, this enabled us to make $(REF dirEntries, std, file) `@safe`
with `-preview=dip1000`.
)

$(P
Some member functions of `RefCounted` that are `@safe` are not so in
`SafeRefCounted`. The `RefCounted` type and `refCounted` function are still
available for the old behaviour. However, their main purpose is backwards
compatibility. They are not recommended for new code.
)
)

$(LI $(LNAME2 logger,Move logger out of experimental.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/logger.dd)
$(P
The std.experimental.logger package is now std.logger. The old package and modules are
still available and publicly import the new ones. To avoid breakage in modules that compile
with deprecations as errors, for now the old modules aren't deprecated, but they will be.
)
)

$(LI $(LNAME2 logger_remove_compile_time_loglevel,remove std.experimental.logger's capability to set the minimal LogLevel at compile time)
$(CHANGELOG_SOURCE_FILE phobos, changelog/logger_remove_compile_time_loglevel.dd)
$(P
Before this change std.experimental.logger had the capability to disable
logging at compile time.
It was also possible to set the minimal LogLevel at compile time.
The trade-off between gained capability, added complexity, and error-proneness
was too heavily tilted towards the second two items.
This change removes these compile time features.
)
)

$(LI $(LNAME2 logger_sharedLog_returning_shared_logger,Change std.experimental.logger.core.sharedLog to return shared(Logger))
$(CHANGELOG_SOURCE_FILE phobos, changelog/logger_sharedLog_returning_shared_logger.dd)
$(P
To make unsafe code more explicit std.experimental.logger.sharedLog
now returns a shared(Logger) instead of a Logger.
)
)

$(LI $(LNAME2 remove-experimental-typecons,std.experimental.typecons has been removed)
$(CHANGELOG_SOURCE_FILE phobos, changelog/remove-experimental-typecons.dd)
$(P
This was an attempt to update `std.typecons.wrap` with an implementation that could work with struct, but it did not go anywhere.
See [this post on the forum](https://forum.dlang.org/post/ialskabybaxtqamgtwge@forum.dlang.org).
)
)

$(LI $(LNAME2 remove-std-digest-digest,std.digest.digest has been removed)
$(CHANGELOG_SOURCE_FILE phobos, changelog/remove-std-digest-digest.dd)
$(P
This module was initially deprecated in 2.076.1, and has been empty since
2.092.0 when all deprecated symbols were removed in favour of importing
`std.digest` or its submodules instead.
)
)

$(LI $(LNAME2 remove-std-xml,std.xml has been removed)
$(CHANGELOG_SOURCE_FILE phobos, changelog/remove-std-xml.dd)
$(P
This module is considered out-dated and not up to Phobos' current standards.
If you still need it, go to $(LINK https://github.com/DigitalMars/undeaD)
)
)

$(LI $(LNAME2 scopesocket,`std.socket.Socket` methods now accept only `scope` arrays.)
$(CHANGELOG_SOURCE_FILE phobos, changelog/scopesocket.dd)
$(P
To comply with dip1000, `std.socket.Socket` methods now all have `scope`
attributes applied to any slice parameters. This includes `receive` and `send`
flavors, and also `setOption`. While not technically a breaking change for
users of `Socket`, if you derive from it, you must apply those attributes to your
derivatives or it will fail to compile. However, applying the attributes is
backwards compatible with previous versions of Phobos, so there is no need for
a migration path.
)
)

$(LI $(LNAME2 std_outbuffer_align,Add custom fill value to std.outbuffer.OutBuffer class)
$(CHANGELOG_SOURCE_FILE phobos, changelog/std_outbuffer_align.dd)
$(P
Extend the fill, alignSize, align{2,4} methods of `std.outbuffer.OutBuffer` to specify value to write
when filling (up to an alignment).
)

$(P
For flash device images it is desirable to use 0xff as the fill value,
because 0xff is the value of the unprogrammed flash memory cell. Padding
with 0 requires to programm the flash cell from 0xff to 0x00, which
increases wear and tear on the flash memory device. Usually there is some
larger block at the end if the flash memory image, which must be padded
up to the size of the flash device (usually a power of two). Instead
of padding with 0x00 the PR allows to fill with 0xff instead.
)

$(P
There might be also some other use-cases, where it might be reasonable to fill
the alignment gaps with some other value than 0x00, e.g. when debugging
and viewing output data in a hex editor. It is easier to spot gaps, when
the padded spaces contain a custom value like 0x55 or 0xaa.
)

$(P
A new fill method was added, which allows filling with a user-defined value
instead of the 0 as in the previous implementation.
)

-------
OutBuffer buf = new OutBuffer();
buff.fill( 1234, 42 ); // Fills 1234 bytes with 42 starting at buf.offset
buff.fill( 10 );       // Same as fill0( 10 );
-------

$(P
The alignSize, align{2,4} methods were modified to use some user-defined
value for padding to the requested alignment boundary.
)

-------
OutBuffer buf = new OutBuffer();
buf.write(cast(ubyte) 1);
buf.align2(0x55);
assert(buf.toBytes() == "\x01\x55");
buf.write(cast(ubyte) 2);
buf.align4(0x55);
assert(buf.toBytes() == "\x01\x55\x02\x55");
buf.write(cast(ubyte) 3);
buf.alignSize(8, 0x55);
assert(buf.toBytes() == "\x01\x55\x02\x55\x03\x55\x55\x55");
-------
)


)

$(BUGSTITLE_TEXT_BODY Dub changes,

$(LI $(LNAME2 build_unittest,Building the special test runner configuration)
$(CHANGELOG_SOURCE_FILE dub, changelog/build_unittest.dd)
$(P
`dub build --config=unittest --build=unittest[-cov]` can now be used to
mimic building the test runner executable of `dub test [--coverage]`.
Note that this doesn't require an existing `unittest` configuration.
)

$(P
`dub describe --config=unittest` allows to derive the path to the
executable.
)
)

$(LI $(LNAME2 colored_output,Output will now be colorized)
$(CHANGELOG_SOURCE_FILE dub, changelog/colored_output.dd)
$(P
Dub output has been improved to be more human readable,
which means the most important informations in the output
will now be colorized / bold.
)

$(P
As is usual with CLI tools, this behavior is automatically
turned on whether the output is a TTY. To force the old output
in the presence of a TTY, use `--color=off`. To force colored
output in the absence of a TTY, use `--color=on`.
)

$(P
The `--color` flag, if set to `on` or `off`, is automatically
forwarded to the compiler. This is especially useful for CI
pipelines to ensure human-readable output.
)
)

$(LI $(LNAME2 configy_stricter_parsing,dub will now warn on unrecognized settings or selections file)
$(CHANGELOG_SOURCE_FILE dub, changelog/configy_stricter_parsing.dd)
$(P
Previously, dub was silently accepting anything it didn't recognize
in `[dub.]settings.json` and `dub.selections.json`. While the original
intent was to make forward-compatibility easy, it proved detrimental
as typos would just mean the user setting was ignored.
)

$(P
From this release, dub will now warn about any entry in its configuration files
or in `dub.selections.json`. After 10 releases, those warnings will turn into errors.
)
)

$(LI $(LNAME2 cov_ctfe,The two new build types `cov-ctfe` and `unittest-cov-ctfe` have been added.)
$(CHANGELOG_SOURCE_FILE dub, changelog/cov_ctfe.dd)
$(P
These extend the existing build types `cov` and `unittest-cov` respectively by
appending `-cov=ctfe` to the set of flags passed to the compiler.
)
)

$(LI $(LNAME2 dpath,DUB settings & packages directory placement overhauled)
$(CHANGELOG_SOURCE_FILE dub, changelog/dpath.dd)
$(P
You can now configure where DUB places its downloaded packages and where the user configuration is stored through environment variables or through the dub configuration. You need to use an environment variable or the system-wide dub configuration to specify where the user configuration is stored.
)

$(P
By default DUB stores the packages on
- Windows: `%APPDATA%/dub/settings.json` + `%LOCALAPPDATA%/dub/packages/`
- Posix: `$HOME/.dub/{packages/,settings.json}`
)

$(P
now if the `DUB_HOME` environment variable is set it instead stores the packages (and other config) in
- `$DUB_HOME/{packages/,settings.json}`
)

$(P
alternatively if `DUB_HOME` isn't set, but `DPATH` is set, the following path is used:
- `$DPATH/dub/{packages/,settings.json}`
)

$(P
The `DPATH` environment variable is intended to be used by all D tooling related things doing user-space installation of things. It can be used to avoid cluttering the home folder.
)

$(P
Additionally to environment variables it is possible to configure the package placement path + settings.json path through DUB's settings.json file. To configure where the user-editable settings.json is placed you need to adjust the system-wide dub configuration.
)

$(P
In the settings.json you can set the following fields:
)

```json
{
    "dubHome": "/path/to/dub", // sets both package store and config location
}
```

$(P
Additionally, these config paths will have environment variables using the `$VARIABLE` syntax resolved.
)

$(P
The following list describes which path is going to be picked, from top to bottom, stopping whenever one is found:
)

$(P
- `$DUB_HOME` environment variable
- `$DPATH` environment variable
- system-wide settings.json: `"dubHome"` property (only for userSettings)
- most specific settings.json: `"dubHome"` property (only for localRepository)
)
)

$(LI $(LNAME2 exitcodes,DUB command exit codes have been made more consistent)
$(CHANGELOG_SOURCE_FILE dub, changelog/exitcodes.dd)
$(P
Some dub commands have been adjusted to return exit code 2 instead of exit code 1. Exit code 1 is now always used for usage errors, while exit code 2 is the more generic any error occurred or package failed to load.
)

$(P
The following commands are affected:
)

$(P
- dub clean
- dub add
- dub search
- dub convert
)
)

$(LI $(LNAME2 install_uninstall,'install' and 'uninstall' commands have been removed)
$(CHANGELOG_SOURCE_FILE dub, changelog/install_uninstall.dd)
$(P
Those commands were long-deprecated aliases to `fetch` and `remove`,
respectively, and usage of them triggered a warning.
They are no longer listed as command in help and dub will no longer recognize them.
)
)

$(LI $(LNAME2 make-copies-writable,When `copyFiles` is used to copy read-only files, it now makes the copy writable.)
$(CHANGELOG_SOURCE_FILE dub, changelog/make-copies-writable.dd)
$(P
Previously, if the target file would already exist due to a prior run of Dub, `copyFiles` would produce an access
denied error because the read-only target could not be overwritten. Note that if you were affected by this behaviour,
you will need to remove those files by hand once to eliminate these errors.
)

$(P
It is common for version control systems to mark binary files read-only in the working copy, to prevent concurrent
edits of files in unmergeable formats.
)
)

$(LI $(LNAME2 overrides_deprecated,The override system is deprecated)
$(CHANGELOG_SOURCE_FILE dub, changelog/overrides_deprecated.dd)
$(P
Dub had an "override" system, allowing a specific version or version range
to be overriden by a specific package.
This override system was developed with a purely version-based approach in mind,
however since its inception, more ways to specify dependencies have been added,
making the override approach redundant and less flexible than other approaches.
From this release, dub will warn you if it finds an override file,
or when using the `dub add-override` / `dub remove-override` commands.
)
)

$(LI $(LNAME2 subpackage_short_syntax,The shortcut syntax for "dub run" is now also available for sub packages.)
$(CHANGELOG_SOURCE_FILE dub, changelog/subpackage_short_syntax.dd)
$(P
Invoking dub as "dub :subpackage" is now equivalent to "dub run :subpackage",
analogous to just "dub" being equivalent to "dub run".
)
)

$(LI $(LNAME2 subpackage_upgrade,Upgrading all sub packages at once)
$(CHANGELOG_SOURCE_FILE dub, changelog/subpackage_upgrade.dd)
$(P
A new "-s" switch allows to "dub upgrade" all sub packages together with the
base package. This aims to provide a better workflow for fully reproducible
builds and tests.
)
)


)

$(CHANGELOG_SEP_TEXT_BUGZILLA)

$(BUGSTITLE_BUGZILLA DMD Compiler regression fixes,

$(LI $(BUGZILLA 4854): Regression$(LPAREN)2.047, Mac 10.5 only$(RPAREN) writefln Segmentation fault if no globals)
$(LI $(BUGZILLA 7375): Regression$(LPAREN)2.057$(RPAREN): Invalid downcast permitted with derived/aliased template classes)
$(LI $(BUGZILLA 7995): regression$(LPAREN)2.059$(RPAREN): D runtime initialization from C fails on OSX in 2.059, worked in 2.058)
$(LI $(BUGZILLA 9052): [2.061 alpha] AA.length in a const context tries to call opAssign + no error line number)
$(LI $(BUGZILLA 10106): [ICE] Ice in glue.c:1215 + 2 error messages without lines)
$(LI $(BUGZILLA 10440): shared library on osx: worked in 2.062, fails in 2.063 / 2.063.2)
$(LI $(BUGZILLA 11203): extern $(LPAREN)C++$(RPAREN) classes broken)
$(LI $(BUGZILLA 11344): [2.064 beta] Error: object.destroy called with argument types matches both)
$(LI $(BUGZILLA 12580): [REG2.066a] dup$(LPAREN)$(RPAREN) won't accept void[])
$(LI $(BUGZILLA 13025): Tools repository does not build on Ubuntu)
$(LI $(BUGZILLA 13034): [Reg] core.stdc.stdio - deprecation warning with dmd -inline)
$(LI $(BUGZILLA 14104): aa with pointer key type doesn't find existing value)
$(LI $(BUGZILLA 14573): [REG2.067] Extreme memory usage when `synchronized$(LPAREN) object $(RPAREN)` is used)
$(LI $(BUGZILLA 14926): Programs compiled using dmd 2.068 are generating dummy profilegc.log files)
$(LI $(BUGZILLA 15430): [REG2.069] amdMmx hangs up)
$(LI $(BUGZILLA 15947): [REG 2.069.0?] simple multithreaded program + "-profile=gc" = crash)
$(LI $(BUGZILLA 17876): [REG 2.074] Internal error when comparing inout$(LPAREN)Foo[][]$(RPAREN) with Foo[][])
$(LI $(BUGZILLA 18068): No file names and line numbers in stack trace)
$(LI $(BUGZILLA 20809): return statement might access memory from destructed temporary)
$(LI $(BUGZILLA 21197): Wrong lifetime inference with DIP1000 in dmd 2.093.0)
$(LI $(BUGZILLA 22300): [REG 2.098-rc.2] `-checkaction=context` of a `shared` type with an `opCast` fails to compile)
$(LI $(BUGZILLA 22844): [REG 2.089] SIGBUS, Bus error in _d_newitemU)
$(LI $(BUGZILLA 23019): Missing filename when -of points to an existing directory)
$(LI $(BUGZILLA 23046): [REG][CODEGEN] __simd$(LPAREN)XMM.LODLPS$(RPAREN) bad codegen)
$(LI $(BUGZILLA 23076): SIMD assert fail with -inline -O converting float to short)
$(LI $(BUGZILLA 23247): Deprecation: argument 0.0L for format specification "%La" must be double, not real)
$(LI $(BUGZILLA 23271): `goto` skips declaration of variable `bugred.A.test.__appendtmp4`)
$(LI $(BUGZILLA 23291): Members of arrays of shared classes cannot be compared)
$(LI $(BUGZILLA 23337): Wrongly elided postblit/copy ctor for array construction $(LPAREN)_d_arrayctor lowering$(RPAREN))
$(LI $(BUGZILLA 23386): Segfault on enum member UDA inside template)
)
$(BUGSTITLE_BUGZILLA DMD Compiler bug fixes,

$(LI $(BUGZILLA 1): asm enter and leave bug)
$(LI $(BUGZILLA 2): Hook up new dmd command line arguments)
$(LI $(BUGZILLA 1761): TypeInfo.toString for function types always indicates no-parameter function)
$(LI $(BUGZILLA 2384): abi spec is unclear on parameter passing)
$(LI $(BUGZILLA 2396):  -O causes very long execution time on foreach loop of large array of structs)
$(LI $(BUGZILLA 2834): Struct Destructors are not called by the GC, but called on explicit delete.)
$(LI $(BUGZILLA 2952): Segfault on exit when using array ops with arrays of doubles larger than 8 elements)
$(LI $(BUGZILLA 3831): writeln of a delegate typeid)
$(LI $(BUGZILLA 4583): PIC code not working: EBX register set incorrectly)
$(LI $(BUGZILLA 5689): [64-Bit] uniform$(LPAREN)$(RPAREN) fails with -profile)
$(LI $(BUGZILLA 5835): `TypeInfo_Array.getHash` creates raw data hash instead using array element hash function)
$(LI $(BUGZILLA 5842): hash table corruption)
$(LI $(BUGZILLA 5995): string append negative integer causes segfault)
$(LI $(BUGZILLA 8366): Overriding const member function in conjunction with mutable overload causes a strange error)
$(LI $(BUGZILLA 8828): Long compilation time of a destroy$(LPAREN)$(RPAREN) on a large fixed-sized matrix)
$(LI $(BUGZILLA 9092): GC.extend allocates less then it reports)
$(LI $(BUGZILLA 9161): Linker error on linux if struct has @disabled ~this$(LPAREN)$(RPAREN);)
$(LI $(BUGZILLA 10277): Incorrect error file and line on redeclaration of TypeInfo)
$(LI $(BUGZILLA 10747): Win64: warning about non-existing vc100.pdb)
$(LI $(BUGZILLA 11653): No error when forgetting break with range cases.)
$(LI $(BUGZILLA 12962): osver.mak should use isainfo on Solaris to determine model)
$(LI $(BUGZILLA 13123): Disallow throwing contracts for nothrow functions)
$(LI $(BUGZILLA 13661): static array init does not call destructors)
$(LI $(BUGZILLA 13732): Regular templates can use "template this", and they allow any type to be passed)
$(LI $(BUGZILLA 14024): [CTFE] unstable postblit/destructor call order on static array assignment)
$(LI $(BUGZILLA 14617): PTHREAD_MUTEX_INITIALIZER does not work on OSX)
$(LI $(BUGZILLA 14694): Functions nested within functions need their body in the generated .di file)
$(LI $(BUGZILLA 14905): duplicate error message: 'Warning: statement is not reachable')
$(LI $(BUGZILLA 15290): length of  associative array literal with duplicate keys is wrong)
$(LI $(BUGZILLA 15353): std.experimental.allocator cannot free memory in its destructor if the GC is an ancestor)
$(LI $(BUGZILLA 15525): SEGV running semantic analysis on non-root decl that has errors.)
$(LI $(BUGZILLA 16575): [ICE] extern$(LPAREN)C++$(RPAREN) function with D specific types)
$(LI $(BUGZILLA 16743): Intrinsic recognition sometimes fails if a software implementation is available)
$(LI $(BUGZILLA 17764): [scope][DIP1000] Escape checker defeated by composition transformations)
$(LI $(BUGZILLA 18828): [-betterC] helpless error in object.d)
$(LI $(BUGZILLA 18973):  @disable on const toHash causes unresolved symbol error)
$(LI $(BUGZILLA 19178): Static initialization of 2d static arrays in structs produces garbage or doesn't compile sometimes)
$(LI $(BUGZILLA 19285): false positive GC inferred)
$(LI $(BUGZILLA 19635):  -checkaction=context not working with attributes)
$(LI $(BUGZILLA 19783): Fail to emplace struct with betterC)
$(LI $(BUGZILLA 19831): throw/catch in scope$(LPAREN)exit$(RPAREN) crashes with illegal instruction)
$(LI $(BUGZILLA 20019): Symbol not found: _dyld_enumerate_tlv_storage on macOS 10.15)
$(LI $(BUGZILLA 20048): [Windows] Program segfaults when running tests)
$(LI $(BUGZILLA 20365): Copy constructor not invoked on static arrays of structs but the postblit works)
$(LI $(BUGZILLA 20559): Reference type + alias this + AA + AA.clear causes SEGV)
$(LI $(BUGZILLA 20613): String switch in -betterC fails for 7+ labels)
$(LI $(BUGZILLA 20823): [DIP 1000] un-@safe code fails with dip1000)
$(LI $(BUGZILLA 21314): ICE on extern$(LPAREN)c++$(RPAREN) static class variables)
$(LI $(BUGZILLA 21416): betterC mode program with C++ interface fails to link)
$(LI $(BUGZILLA 21432): [CTFE] Cannot declare enum array in function scope)
$(LI $(BUGZILLA 21472): `-checkaction=context` doesn't work with `tupleof`)
$(LI $(BUGZILLA 21477): TypeInfo errors in betterC are cryptic)
$(LI $(BUGZILLA 21676): [ICE][SIMD] DMD crashing with SIMD + optimizations + inlining)
$(LI $(BUGZILLA 21956): ice on foreach over an AA of noreturn)
$(LI $(BUGZILLA 22108): DIP1000 parameter mistakenly interpreted as return scope instead of scope)
$(LI $(BUGZILLA 22124): Corrupted closure when compiling with -preview=dip1000)
$(LI $(BUGZILLA 22126):  -checkaction=context should not print overlapped struct members)
$(LI $(BUGZILLA 22134): Deprecate returning a discarded void value from a function)
$(LI $(BUGZILLA 22179): core.stdcpp.utility is missing in dmd binary dist)
$(LI $(BUGZILLA 22283):  -preview=in -inline leads to strange error inside object.d)
$(LI $(BUGZILLA 22351): extern$(LPAREN)C++$(RPAREN) function contravariant in D, but not C++)
$(LI $(BUGZILLA 22390): Compiler crash when iterating empty array of bottom types)
$(LI $(BUGZILLA 22429): importC: designator-list not supported yet)
$(LI $(BUGZILLA 22535): ImportC: gcc/clang math intrinsics are rejected.)
$(LI $(BUGZILLA 22553): ImportC: undefined identifier `__uint128_t`)
$(LI $(BUGZILLA 22598): importC: Add support for __extension__ keyword)
$(LI $(BUGZILLA 22610): ImportC: 3 extra initializer$(LPAREN)s$(RPAREN) for struct __tag21)
$(LI $(BUGZILLA 22626): Can't use synchronized member functions with -nosharedaccess)
$(LI $(BUGZILLA 22652): importC: Braceless initializer of nested struct is rejected.)
$(LI $(BUGZILLA 22664): Disassembler mistakes rdtscp for invlpg  ECX)
$(LI $(BUGZILLA 22674): ImportC: compatible types declared in different translation units are not treated equivalent in D.)
$(LI $(BUGZILLA 22680):  @safe hole with destructors)
$(LI $(BUGZILLA 22706): Bad error on explicit instantiation of function template with auto ref parameter)
$(LI $(BUGZILLA 22717): object.TypeInfo_Struct.equals swaps lhs and rhs parameters)
$(LI $(BUGZILLA 22724): ImportC: VC extension __pragma$(LPAREN)pack$(RPAREN) is not implemented)
$(LI $(BUGZILLA 22756): ImportC: no __builtin_offsetof)
$(LI $(BUGZILLA 22784): pragma$(LPAREN)printf$(RPAREN) applies to nested functions)
$(LI $(BUGZILLA 22830): Solaris: error: module 'core.stdc.math' import 'signbit' not found)
$(LI $(BUGZILLA 22846): [REG 2.066] SIGBUS, Bus error in _d_newarrayiT)
$(LI $(BUGZILLA 22865): __traits$(LPAREN)compiles$(RPAREN) affects inferrence of attributes)
$(LI $(BUGZILLA 22875): importC: cannot assign const typedef with pointers to non-const one)
$(LI $(BUGZILLA 22925): importC: multi-dimensional array is not a static and cannot have static initializer)
$(LI $(BUGZILLA 22952): Compiler fails to find package.d modules via -mv map)
$(LI $(BUGZILLA 22973): importC: sizeof with array and pointer access gives array type has incomplete element type)
$(LI $(BUGZILLA 23006): importC: dmd segfaults on static initializer for multi-dimensional array inside struct)
$(LI $(BUGZILLA 23007): importC: dmd segfaults for extra braces in array initializer)
$(LI $(BUGZILLA 23009): [CODEGEN][SIMD] SIMD + optimizations + inlining + double)
$(LI $(BUGZILLA 23010): mixed in aliaseqs used as type dont initualize)
$(LI $(BUGZILLA 23012): importC: asm label to set symbol name not applied from forward declaration)
$(LI $(BUGZILLA 23018): importC: syntax error for sizeof with postfix operator on parenthesized expression)
$(LI $(BUGZILLA 23022): [dip1000] typesafe variadic parameter should not infer return)
$(LI $(BUGZILLA 23027): ImportC: Array of struct is not a static and cannot have static initializer)
$(LI $(BUGZILLA 23030): importC: errors using typedef struct after first use as const)
$(LI $(BUGZILLA 23037): importC: type with only type-qualifier doesn't work)
$(LI $(BUGZILLA 23038): importC: sizeof inside struct has struct members in scope)
$(LI $(BUGZILLA 23039): importC: declaration with array length has itself in scope)
$(LI $(BUGZILLA 23042):  -betterC still includes RTInfo)
$(LI $(BUGZILLA 23044): importC: comma expression with function call parsed as declaration)
$(LI $(BUGZILLA 23045): importC: casted function type is missing extern$(LPAREN)C$(RPAREN))
$(LI $(BUGZILLA 23047): [ICE][SIMD] Do not SROA vector types)
$(LI $(BUGZILLA 23050): Incorrect disassembly of code with -vasm and 0xBE and 0xBF opcodes)
$(LI $(BUGZILLA 23054): importC: struct compound-literal assigned by pointer has wrong storage duration)
$(LI $(BUGZILLA 23056): importC: dmd asserts for missing return statement in CTFE function)
$(LI $(BUGZILLA 23057): importC: dmd segfault on invalid syntax)
$(LI $(BUGZILLA 23063): It is possible to return a noreturn value)
$(LI $(BUGZILLA 23068): [betterC] BetterC does not respect -checkaction=halt)
$(LI $(BUGZILLA 23073): [dip1000] scope inference from pure doesn't consider self-assignment)
$(LI $(BUGZILLA 23088): spurious case of "`expression` has no effect")
$(LI $(BUGZILLA 23105): `__trait$(LPAREN)getMember$(RPAREN)` and `mixin$(LPAREN)$(RPAREN)` of the same code as a string behave differently)
$(LI $(BUGZILLA 23112): code passes @nogc, allocates anyway)
$(LI $(BUGZILLA 23123):  -vasm wrong result for cmpxchg16b)
$(LI $(BUGZILLA 23135): Covariance rules for C++ member functions mismatch D)
$(LI $(BUGZILLA 23138): Overrides of member functions of an inherited class ignores attribute "downcast")
$(LI $(BUGZILLA 23159): [betterC] scope$(LPAREN)failure$(RPAREN) use in betterC gives confusing error)
$(LI $(BUGZILLA 23167): inaccurate diagnostic for internal tuple bound violation)
$(LI $(BUGZILLA 23168): [DIP1000] return scope wrongly rewritten for structs with no indirections)
$(LI $(BUGZILLA 23169): [DIP1000] Mangling does not distinguish return and return scope)
$(LI $(BUGZILLA 23173): "Error: signed integer overflow" for compiler generated string of `long.min`)
$(LI $(BUGZILLA 23174): Can't alias tuple when it's part of dot expression following a struct literal)
$(LI $(BUGZILLA 23176):  -vasm misses immediates for some SSE2 instructions)
$(LI $(BUGZILLA 23178): Unknown error using alias to `__traits` evaluated as expression)
$(LI $(BUGZILLA 23192): Can't iterate aggregate fields with static foreach inside a member function)
$(LI $(BUGZILLA 23205): Can't declare mixin template inside a function)
$(LI $(BUGZILLA 23206): ImportC: __declspec$(LPAREN)noreturn$(RPAREN) does not compile)
$(LI $(BUGZILLA 23207): dmd hangs compiling druntime/src/core/stdc/errno.c)
$(LI $(BUGZILLA 23213): ImportC - variable length array does not compile)
$(LI $(BUGZILLA 23214): ImportC: typedef with unsigned types does not compile)
$(LI $(BUGZILLA 23217): ImportC: extra initializer$(LPAREN)s$(RPAREN) error for array of structs)
$(LI $(BUGZILLA 23222): vcg-ast segfaults on aliases to parent module)
$(LI $(BUGZILLA 23223): Aliases to modules print the modules contents into ast dump)
$(LI $(BUGZILLA 23224): ImportC: memory model switch is not passed to C preprocessor)
$(LI $(BUGZILLA 23225): OpenBSD: cpp invocation cannot find files)
$(LI $(BUGZILLA 23230): cannot implicitly convert expression define of type char[7] to char)
$(LI $(BUGZILLA 23235): [DIP1000] typesafe variadic parameters should automatically be scope)
$(LI $(BUGZILLA 23236): can't initialize a @mustuse member in constructor)
$(LI $(BUGZILLA 23241): __traits getMember breaks compilation when hit an alias)
$(LI $(BUGZILLA 23249): Deprecation: argument &p for format specification "%m" must be char*, not char**)
$(LI $(BUGZILLA 23251): Deprecation: format specifier "%[a-z]" is invalid)
$(LI $(BUGZILLA 23252): Deprecation: format specifier "%[]]" is invalid)
$(LI $(BUGZILLA 23254): Deprecation: format specifier "%S" and "%C" are invalid)
$(LI $(BUGZILLA 23256): must supply -mscrtlib manually when compiling for Windows)
$(LI $(BUGZILLA 23262): typesafe variadic function parameter cannot infer return)
$(LI $(BUGZILLA 23293): ImportC: _Bool bit fields layout does not match gcc)
$(LI $(BUGZILLA 23308): Can't resolve overload of varargs function if one parameter is the result of a ternary expression)
$(LI $(BUGZILLA 23327): [ICE] SEGV in AssocArray!$(LPAREN)Identifier, Dsymbol$(RPAREN).AssocArray.opIndex$(LPAREN)const$(LPAREN)Identifier$(RPAREN)$(RPAREN) at src/dmd/root/aav.d:313)
$(LI $(BUGZILLA 23331): implicit cast from noreturn crashes compiler in various ways)
$(LI $(BUGZILLA 23338): braceless subarray initalizers for struct fields fails)
$(LI $(BUGZILLA 23340): std.path: expandTilde erroneously raises onOutOfMemory on failed getpwam_r$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 23342): ImportC: Array compound literals use the GC)
$(LI $(BUGZILLA 23343): ImportC: functions declared with asm label to set symbol name gets extra underscore prepended)
$(LI $(BUGZILLA 23345): ImportC: out of order designated initializers initialize to wrong value)
$(LI $(BUGZILLA 23346): ImportC: pragma pack is not popped)
$(LI $(BUGZILLA 23347): ImportC: pragma pack causes asm label to set symbol name to be ignored)
$(LI $(BUGZILLA 23348): not handling braceless sub structs in initializers)
$(LI $(BUGZILLA 23351): A bunch of Mayonix's dmd-segfaulting programs)
$(LI $(BUGZILLA 23355): invalid template parameter loses error location in some cases)
$(LI $(BUGZILLA 23357): ImportC: compatible types with definitions leads to redeclaration error when used from D.)
$(LI $(BUGZILLA 23379): Cast of expressions with type noreturn result in ice)
$(LI $(BUGZILLA 23380): [dip1000] class parameter should not be treated as ref qua lifetime)
$(LI $(BUGZILLA 23406): [seg fault] enums can cause compile time seg faults with assignments using alias this)
)
$(BUGSTITLE_BUGZILLA DMD Compiler enhancements,

$(LI $(BUGZILLA 3952): pragma$(LPAREN)msg,...$(RPAREN) has bugs + alternative idea)
$(LI $(BUGZILLA 7243): Compiler should call separate function when allocating a struct on the heap)
$(LI $(BUGZILLA 7372): Error provides too little information to diagnose the problem $(LPAREN)error: undefined identifier$(RPAREN))
$(LI $(BUGZILLA 9726): Add minimum % coverage required for -cov testing)
$(LI $(BUGZILLA 12330): array.reserve at compile time too)
$(LI $(BUGZILLA 13138): add peek/poke as compiler intrinsics)
$(LI $(BUGZILLA 14690): pragma$(LPAREN)inline, true$(RPAREN) functions must have their bodies emitted in the .di file)
$(LI $(BUGZILLA 14755): Could -profile=gc also give the number of allocations that led to X bytes being allocated?)
$(LI $(BUGZILLA 16394): TypeInfo.init$(LPAREN)$(RPAREN) for static arrays returns single element instead of whole array)
$(LI $(BUGZILLA 16558): [Mir] Generic unaligned load/store like $(LPAREN)like LDC loadUnaligned and storeUnaligned$(RPAREN))
$(LI $(BUGZILLA 16701): Remove Restriction of "package.d" Source File Module Forced to All Lowercase)
$(LI $(BUGZILLA 17575): named mixin template error message)
$(LI $(BUGZILLA 21243): Allow lambdas to return auto ref)
$(LI $(BUGZILLA 21673): [SIMD][Win64] Wrong codegen for _mm_move_ss)
$(LI $(BUGZILLA 22880): importC: support __restrict__ __signed__ __asm__)
$(LI $(BUGZILLA 22911): dtoh: make include directives sorted for generated headers)
$(LI $(BUGZILLA 23079): [dip1000] be more lenient when taking address of `ref` return)
$(LI $(BUGZILLA 23141): Improve -release switch description)
$(LI $(BUGZILLA 23142): Scope should not apply to unittests)
$(LI $(BUGZILLA 23143): ImportC: forward enum declarations need to be supported)
$(LI $(BUGZILLA 23165): lambda functions are not inlined)
$(LI $(BUGZILLA 23191): [dip1000] scope parameter can be returned in @system code)
$(LI $(BUGZILLA 23216): Better Error Message For foreach_reverse Without Bidirectional Range)
$(LI $(BUGZILLA 23284): Enhance floating point not representable error message)
$(LI $(BUGZILLA 23295): [dip1000] explain why scope inference failed)
$(LI $(BUGZILLA 23306):  @disable new$(LPAREN)$(RPAREN) ought not disable `scope A = new A`)
$(LI $(BUGZILLA 23369): Confusing error message for duplicate import)
$(LI $(BUGZILLA 23376): Allow multi-code-point HTML entities)
$(LI $(BUGZILLA 23384): Suggest calling matching base class method when hidden)
)
$(BUGSTITLE_BUGZILLA Phobos regression fixes,

$(LI $(BUGZILLA 11309): std.concurrency: OwnerTerminated message doesn't work)
$(LI $(BUGZILLA 20354): interface is not supported by CanCAS in core.internal.atomic)
$(LI $(BUGZILLA 23245): [REG 2.099] std.format ignores non-const toString method of static array element)
$(LI $(BUGZILLA 23246): [REG 2.099] std.format ignores non-const toString method of associative array value)
$(LI $(BUGZILLA 23268): clamp no longer accepts shorts)
)
$(BUGSTITLE_BUGZILLA Phobos bug fixes,

$(LI $(BUGZILLA 64): Unhandled errors should go to stderr)
$(LI $(BUGZILLA 3798): core.cpuid locks systems with Xeon E5530 CPU)
$(LI $(BUGZILLA 9025): core.thread.Fiber seems to crash on Win64)
$(LI $(BUGZILLA 10469): WinAPI declarations in std.process should be moved to core.sys.windows.windows)
$(LI $(BUGZILLA 11192): std.demangle doesn't demangle alias template arguments)
$(LI $(BUGZILLA 14543): std.algorithm.searching.until does not handle range sentinels nicely)
$(LI $(BUGZILLA 16034): map should be possible with a reference only)
$(LI $(BUGZILLA 16232): std.experimental.logger.core.sharedLog isn't thread-safe)
$(LI $(BUGZILLA 17966): chunkBy cannot accept an input range $(LPAREN)from multiwayMerge$(RPAREN))
$(LI $(BUGZILLA 18631): std.random.choice does not work with const arrays)
$(LI $(BUGZILLA 22637): std.conv `to!double` and `parse!double` dont throw on under/overflow)
$(LI $(BUGZILLA 22683): core.math.rndtonl can't be linked)
$(LI $(BUGZILLA 23182): Can't assign struct with opAssign to SumType in CTFE)
$(LI $(BUGZILLA 23196): File constructor fails to preallocate oom error, uses exception instead)
$(LI $(BUGZILLA 23215): calling std.file.remove with null string segfaults in strlen)
$(LI $(BUGZILLA 23250): Unicode regional indicators are not paired correctly)
$(LI $(BUGZILLA 23270): std.random.dice is poorly documented)
$(LI $(BUGZILLA 23288): zlib: Fix potential buffer overflow)
$(LI $(BUGZILLA 23324): Incorrect source link in std.format docs)
$(LI $(BUGZILLA 23350): Nondeterministic test failure in std.concurrency)
$(LI $(BUGZILLA 23362): Permutations should be a forward range)
)
$(BUGSTITLE_BUGZILLA Phobos enhancements,

$(LI $(BUGZILLA 13893): "rawRead must take a non-empty buffer")
$(LI $(BUGZILLA 15128): "IP_ADD_MEMBERSHIP" error in winsock2.d)
$(LI $(BUGZILLA 18735): all versions of find and canfind should identify usage of predicate)
$(LI $(BUGZILLA 20869): `std.algorithm.mutation : move` is overly trusting of `opPostMove`)
$(LI $(BUGZILLA 21000):  -preview=nosharedaccess precludes use of stdin,stdout,stderr)
$(LI $(BUGZILLA 23101): [std.sumtype] canMatch does not account ref)
$(LI $(BUGZILLA 23298): std.string wrap wraps early)
$(LI $(BUGZILLA 23333): DList range can be @nogc)
$(LI $(BUGZILLA 23370): std.base64 can have more @nogc functions)
)
$(BUGSTITLE_BUGZILLA Druntime regression fixes,

$(LI $(BUGZILLA 1180): the GC failes to handle large allocation requests propperly)
$(LI $(BUGZILLA 7365): [Regression after 2.057] AAs broken for Object keys and values with opEquals)
$(LI $(BUGZILLA 8477): [2.060 beta] Strange error calling member func from overridden Exception::toString$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 8633): core.atomic not documented)
$(LI $(BUGZILLA 9099): core.atomic.atomicLoad$(LPAREN)$(RPAREN) cannot handle non-POD structs)
$(LI $(BUGZILLA 10976): thread_joinAll after main exit performed too late)
$(LI $(BUGZILLA 11149): Runtime.args no longer available in static constructors.)
$(LI $(BUGZILLA 11301): [2.064 beta] core.sys.linux.sys.mman triggers enum resolution error)
$(LI $(BUGZILLA 11378): implicit runtime initialization/finalization is broken)
$(LI $(BUGZILLA 11478): shared library on osx: worked in 2.062, fails in 2.063.2, still fails in 2.064)
$(LI $(BUGZILLA 12136): [AA] Associative array `keys` and `values` become non-properties.)
$(LI $(BUGZILLA 12220): [REG2.066a] hash.get$(LPAREN)$(RPAREN) does not accept proper parameters)
$(LI $(BUGZILLA 12427): Regression $(LPAREN)2.066 git-head$(RPAREN): Building druntime fails with -debug=PRINTF)
$(LI $(BUGZILLA 12710): Bad @nogc requirement for Windows callbacks)
$(LI $(BUGZILLA 12738): core.sys.posix.signal sigaction_t handler type mismatch)
$(LI $(BUGZILLA 12848): [REG2.061] crash in _d_run_main$(LPAREN)$(RPAREN) on some unicode command line argument $(LPAREN)Win32$(RPAREN))
$(LI $(BUGZILLA 13078): [dmd 2.066-b2] AA rehash failed with shared)
$(LI $(BUGZILLA 13084): ModuleInfo.opApply delegate expects immutable parameter)
$(LI $(BUGZILLA 13111): GC.realloc returns invalid memory for large reallocation)
$(LI $(BUGZILLA 13148): ModuleInfo fields are unnecessary changed to const)
$(LI $(BUGZILLA 13399): va_arg is nothrow yet may throw)
$(LI $(BUGZILLA 13748): benchmark druntime/benchmark/aabench/string.d fails)
$(LI $(BUGZILLA 13809): dup no longer works with types with postblit and destructors)
$(LI $(BUGZILLA 14467): arr.capacity sometimes erroneously returns 0)
$(LI $(BUGZILLA 14626): [REG2.066] byValue doesn't work with inout AA)
$(LI $(BUGZILLA 14746): [REG2.068a] Behavior change with struct destructor and alias this)
$(LI $(BUGZILLA 14750): druntime/test/coverage was added to druntime, but not to the MANIFEST - zip file broken again)
$(LI $(BUGZILLA 14863): CLOCK_BOOTTIME should be optional to support <2.6.39 kernels)
$(LI $(BUGZILLA 14882): [REG] MANIFEST is missing test/common.mak)
$(LI $(BUGZILLA 14990): No rule to make target `src/core/sys/windows/stdio_msvc12.d', needed by 'druntime.zip'.)
$(LI $(BUGZILLA 14993): Allocating in a destructor segfaults instead of throwing InvalidMemoryOperationError)
$(LI $(BUGZILLA 15224): making 'clean' results in garbage commands)
$(LI $(BUGZILLA 15334): [REG 2.069] OS X core.time ticksPerSecond calculation is incorrect)
$(LI $(BUGZILLA 15434): [REG2.068] object.d imports from rt $(LPAREN)breaking inline builds$(RPAREN))
$(LI $(BUGZILLA 15482): new uuid.d forbids to link statically with other libraries)
$(LI $(BUGZILLA 15822): InvalidMemoryOperationError when calling GC.removeRange/Root from a finalizer)
$(LI $(BUGZILLA 15911): undefined __Unwind_GetIPInfo for x86_64)
$(LI $(BUGZILLA 16211): [REG 2.058] Cyclic dependencies broken again)
$(LI $(BUGZILLA 16974): [REG2.068] Equal associative arrays with associative array keys are considered unequal)
$(LI $(BUGZILLA 17188): stdc qsort predicate requires scope parameters)
$(LI $(BUGZILLA 17914): [Reg 2.075] Fibers guard page uses a lot more memory mappings)
$(LI $(BUGZILLA 18071): [REG2.078] byKey, byValue and byKeyValue are now a hole for unsafe code)
$(LI $(BUGZILLA 18193): module config is in file 'rt/config.d' which cannot be read)
$(LI $(BUGZILLA 18252): [Reg 2.078] comparison of arrays of associative arrays no longer compiles)
$(LI $(BUGZILLA 18652): hashOf example doesn't compile)
$(LI $(BUGZILLA 18996): Inserting a type containing indirections into an std.container Array causes SIGILL$(LPAREN)4$(RPAREN). Illegal Instruction.)
$(LI $(BUGZILLA 19005): [REG2.081-b1] object.hashOf no longer works for std.datetime.date.Date)
$(LI $(BUGZILLA 19322): A lot of memory is consumed and not freed to the system when Exception is formatted with stacktrace in debug)
$(LI $(BUGZILLA 19498): undefined identifier rt_loadLibraryW)
$(LI $(BUGZILLA 19701): undefined reference to `_D6object__T6hashOf)
$(LI $(BUGZILLA 19796): druntime PR#1982 broke array ops on double[] due to wrong assumption of integral element type)
$(LI $(BUGZILLA 19902): hasElaborateCopyConstructor doesn't know about copy constructors)
$(LI $(BUGZILLA 20219): Idle D programs keep consuming CPU in Gcx.scanBackground)
$(LI $(BUGZILLA 20227): "Aborting from src/core/sync/event.d$(LPAREN)141$(RPAREN) Error: pthread_mutex_destroy failed." after fork$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 20256): problem with signal handling and parallel GC on linux)
$(LI $(BUGZILLA 20270): [REG2.087] Deadlock in garbage collection when running processes in parallel)
$(LI $(BUGZILLA 20438): [Reg 2.086] GC: memory not reusable when calling GC.collect after GC.free)
$(LI $(BUGZILLA 20447): [REG 2.089] importing core.thread exposes unistd, hiding object.dup)
$(LI $(BUGZILLA 20748): Deprecation for assert using shared type and checkaction=context)
$(LI $(BUGZILLA 20778): exception messages with nulls within are treated inconsistently)
$(LI $(BUGZILLA 21097): [REG2.083] Stack exhaustion upon large struct .destroy)
$(LI $(BUGZILLA 21110): OOB memory access, safety violation)
$(LI $(BUGZILLA 21309): Missing core.thread.threadbase documentation)
$(LI $(BUGZILLA 21363): [REG2.094] Implementation of core.bitop.ror$(LPAREN)x,0$(RPAREN) is using UB)
$(LI $(BUGZILLA 21642): [REG 2.084] hashOf will fail to compile for some structs/unions that recursively contain shared enums)
$(LI $(BUGZILLA 21656): [REG2.091] Wrong file read during exception stringification leads to SIGBUS)
$(LI $(BUGZILLA 21712): [REG 2.096.0] sometimes coverage *.lst files are corrupted)
$(LI $(BUGZILLA 22178): [REG 2.097] Compilers do not compile on Musl Libc)
$(LI $(BUGZILLA 22210): std.meta.allSatisfy in mutual recursion classes cannot be compiled)
$(LI $(BUGZILLA 22235): `core.demangle` does not support `noreturn`)
$(LI $(BUGZILLA 22829): [REG master] Undefined symbol stderr first referenced in file test19933.o)
$(LI $(BUGZILLA 22834): runnable_cxx/stdint.d: Undefined reference to _Z15testCppI8Mangleahahah)
)
$(BUGSTITLE_BUGZILLA Druntime bug fixes,

$(LI $(BUGZILLA 391): .sort and .reverse break utf8 encoding)
$(LI $(BUGZILLA 3454): Inconsistent flag setting in GC.realloc$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 4809): Stack trace when throwing exception misses location of the throw statement)
$(LI $(BUGZILLA 5272): Postblit not called on copying due to array append)
$(LI $(BUGZILLA 5375): Detection of cyclic module imports provides error findings on console, instead of exception msg)
$(LI $(BUGZILLA 5407): X86_64: Segfault on AA Foreach)
$(LI $(BUGZILLA 5593): Add dladdr to druntime for linux/FreeBSD)
$(LI $(BUGZILLA 5930): cas doesn't work when used in code compiled with -D)
$(LI $(BUGZILLA 5999): Runtime treats floating NaNs to be equal)
$(LI $(BUGZILLA 6045): Unable to demangle symbols)
$(LI $(BUGZILLA 6333): The 'capacity' function is not pure/nothrow/@safe.)
$(LI $(BUGZILLA 6376): core.thread.thread_scanAll doesn't scan the stack due to ASLR on Mac OS X 10.7)
$(LI $(BUGZILLA 6646): [SafeD] array.reserve is not @safe/trusted)
$(LI $(BUGZILLA 7112): Add function in core.sys.posix.signal)
$(LI $(BUGZILLA 7606): core.time.TickDuration opCmp accepts only lvalues)
$(LI $(BUGZILLA 7954): x86_64 Windows fibers do not save nonvolatile XMM registers)
$(LI $(BUGZILLA 7971): Cannot compile druntime with -debug=PRINTF)
$(LI $(BUGZILLA 8046): simd.d needs some documentation)
$(LI $(BUGZILLA 8132): LPTSTR always aliases to LPSTR)
$(LI $(BUGZILLA 8274): thread_attachThis only works for main thread)
$(LI $(BUGZILLA 8301): Access violation when a big array is allocated)
$(LI $(BUGZILLA 8527): `object.destroy` doesn't destroy interfaces)
$(LI $(BUGZILLA 8650): SLice opOpAssign SLice with overlap does not throw)
$(LI $(BUGZILLA 8872): Missing extended window styles $(LPAREN)WS_EX_... enumeration$(RPAREN) in windows header)
$(LI $(BUGZILLA 8960): DMD tester: Unable to set thread priority)
$(LI $(BUGZILLA 9030): immutable `_d_args` can be written to with `main$(LPAREN)char[][]$(RPAREN)`)
$(LI $(BUGZILLA 9275): [GC] removeRoot hits assert$(LPAREN)0$(RPAREN) instead of being a no-op $(LPAREN)as documented$(RPAREN))
$(LI $(BUGZILLA 9373): Add deprecation message to all empty deprecation statements)
$(LI $(BUGZILLA 9783): profiling recursive function calls yields bad tree timing)
$(LI $(BUGZILLA 9799): Missing aliases and enums in druntime imports)
$(LI $(BUGZILLA 9852): Empty associative array crashes program)
$(LI $(BUGZILLA 10057): [2.063 beta] Module info overwritten in shared phobos.)
$(LI $(BUGZILLA 10420): Incorrect function attributes in `core.exception`)
$(LI $(BUGZILLA 10436): The runtime should print stack traces to stderr $(LPAREN)like on *nix$(RPAREN), not stdout)
$(LI $(BUGZILLA 10457): _d_toObject might fail with shared libraries)
$(LI $(BUGZILLA 10593): array's reserve/capacity go haywire if length has been changed prior)
$(LI $(BUGZILLA 10701): [GC] segfault in GC)
$(LI $(BUGZILLA 10711): shared phobos library should not depend on _Dmain)
$(LI $(BUGZILLA 10720): ICE with is$(LPAREN)aaOfNonCopyableStruct.nonExistingField$(RPAREN))
$(LI $(BUGZILLA 10838): Null pointer dereference in gc.gcx.Gcx.isMarked)
$(LI $(BUGZILLA 10894): Numerous DDoc parameter warnings in druntime $(LPAREN)as found by 10236$(RPAREN))
$(LI $(BUGZILLA 10897): btc, btr and bts shouldn't be safe)
$(LI $(BUGZILLA 11011): core.time.Duration has example code which cannot compile)
$(LI $(BUGZILLA 11168): core.stdc.time.asctime$(LPAREN)$(RPAREN) is incorrectly marked as @trusted)
$(LI $(BUGZILLA 11174): Both AF_PACKET and SO_BINDTODEVICE undefined)
$(LI $(BUGZILLA 11293): wrong locale enumerate value)
$(LI $(BUGZILLA 11294): Object destruction with alias this)
$(LI $(BUGZILLA 11393): [GC] GC realloc and free don't ignore interior pointers)
$(LI $(BUGZILLA 11414): druntime should run debug unittest)
$(LI $(BUGZILLA 11446): [GC] GC realloc doesn't ignore non-GC owned pointers)
$(LI $(BUGZILLA 11519): fix timing issue in core.thread unittest)
$(LI $(BUGZILLA 11594): synchronized causing segfault instead of Error.)
$(LI $(BUGZILLA 11674): core.stdc.fenv.fenv_t declaration not architecture aware)
$(LI $(BUGZILLA 11761): aa.byKey and aa.byValue are not forward ranges)
$(LI $(BUGZILLA 12121): atomicLoad!$(LPAREN)MemoryOrder.acq$(RPAREN) should not emit additional code on X86)
$(LI $(BUGZILLA 12233): Attempting to use TypeInfo.init results in a compiler error due to lack of 'this'.)
$(LI $(BUGZILLA 12289): incorrect core.stdc.stdio.fpos_t alias)
$(LI $(BUGZILLA 12755): thread.di is outdated)
$(LI $(BUGZILLA 12800): Fibers are broken on Win64)
$(LI $(BUGZILLA 12843): Unit tests fail when GC is compiled with SENTINEL)
$(LI $(BUGZILLA 12958): core.checkedint.mulu is broken)
$(LI $(BUGZILLA 12975): posix.mak should use isainfo on Solaris systems to determine model)
$(LI $(BUGZILLA 13052): TypeInfo.getHash should return same hash for different floating point zeros.)
$(LI $(BUGZILLA 13057): posix getopt variables in core/sys/posix/unistd.d should be marked __gshared)
$(LI $(BUGZILLA 13058): Thread priority handling doesn't work in Solaris)
$(LI $(BUGZILLA 13186): core/sys/posix/sys/uio.d is not linked into the standard lib)
$(LI $(BUGZILLA 13821): fiber + exception + win server 2012 failures)
$(LI $(BUGZILLA 13854): Appending to an interior slice of a large array results in unnecessary 16-byte offset)
$(LI $(BUGZILLA 13878): Appending to an array block with modified flags loses flag info)
$(LI $(BUGZILLA 14036): Do not throw FinalizeError on OutOfMemoryError or InvalidMemoryOperationError)
$(LI $(BUGZILLA 14157): fabsf fabsl for CRuntime_Microsoft)
$(LI $(BUGZILLA 14215): invalid import in core.sys.linux.stdio)
$(LI $(BUGZILLA 14226): invalid Runtime.traceHandler setup)
$(LI $(BUGZILLA 14247): string within demangled symbol name should be made escape)
$(LI $(BUGZILLA 14303): rt.util.container.array.Array unittest contains invalid code)
$(LI $(BUGZILLA 14319): core.demangle does not support member function attributes)
$(LI $(BUGZILLA 14350): Unit test failures are not displayed in Windows GUI programs)
$(LI $(BUGZILLA 14401): typeid$(LPAREN)shared X$(RPAREN).init is empty for class types)
$(LI $(BUGZILLA 14423): struct destructors not finalized for AA values)
$(LI $(BUGZILLA 14439): aa's keys, values not usable in @safe context)
$(LI $(BUGZILLA 14464): coverage merge doesn't work)
$(LI $(BUGZILLA 14476): core.thread unit tests failing on FreeBSD 9+)
$(LI $(BUGZILLA 14536): Calling destroy$(LPAREN)$(RPAREN) on a on an extern$(LPAREN)C++$(RPAREN) class causes a segfault)
$(LI $(BUGZILLA 14563): core.demangle: Does not demangle type modifers)
$(LI $(BUGZILLA 14565): dmd -profile produces garbled output for long-running CPU-intensive processes)
$(LI $(BUGZILLA 14576): [ddemangle] core.demangle unable to handle ambiguity in symbols)
$(LI $(BUGZILLA 14601): pthread functions aren't marked @nogc)
$(LI $(BUGZILLA 14785): Some corner cases are not handled properly by core.checkedint.)
$(LI $(BUGZILLA 14870): incorrect use of assert to detect environmental errors in core.time)
$(LI $(BUGZILLA 15009): Object.destroy calls unnecessary postblits for destruction of static arrays object)
$(LI $(BUGZILLA 15036): SimpleDllMain assumes various symbols are available unqualified)
$(LI $(BUGZILLA 15104): Switching fibers in finally blocks breaks EH)
$(LI $(BUGZILLA 15111): hashOf fails for structs that have an alias this to a dynamic array)
$(LI $(BUGZILLA 15270): use TLS to store Thread.getThis $(LPAREN)pthread_getspecific causes heavy lock contention$(RPAREN))
$(LI $(BUGZILLA 15322): version$(LPAREN)Unicode$(RPAREN) should affect only default aliases)
$(LI $(BUGZILLA 15367): array of delegates comparison fails)
$(LI $(BUGZILLA 15393): Debug versions in GC code doesn't compile.)
$(LI $(BUGZILLA 15838): Many Win32 API callback functions miss extern$(LPAREN)Windows$(RPAREN))
$(LI $(BUGZILLA 15939): GC.collect causes deadlock in multi-threaded environment)
$(LI $(BUGZILLA 15958): Missing extern$(LPAREN)Windows$(RPAREN) of core.sys.windows functions)
$(LI $(BUGZILLA 15959): core.sys.windows modules should be modified for x64)
$(LI $(BUGZILLA 15976): explicite TLS initializes badly in DLLs if other threads exist)
$(LI $(BUGZILLA 15987): core.sys.windows.msacm remains pseudo definitions)
$(LI $(BUGZILLA 15997): Wrong constant value for ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED in winhttp)
$(LI $(BUGZILLA 16007): Some Win32 API structs has wrong definitions)
$(LI $(BUGZILLA 16049): core.sys.windows structs have wrong sizes and aligns)
$(LI $(BUGZILLA 16230): core.atomic.atomicLoad removes shared from aggregate types too eagerly)
$(LI $(BUGZILLA 16380): no bindings for err.h)
$(LI $(BUGZILLA 16470): Segfault with negative array length)
$(LI $(BUGZILLA 16594): module destructors called again if an exception got thrown earlier)
$(LI $(BUGZILLA 16651): atomicOp!"-="$(LPAREN)ulong, uint$(RPAREN) = wrong result/codegen)
$(LI $(BUGZILLA 16654): hashOf returns different hashes for the same string value)
$(LI $(BUGZILLA 16658): Win32API: default IE ver. set to 4.0 is too old)
$(LI $(BUGZILLA 16764): `hashOf` is misleading, error-prone, and useless)
$(LI $(BUGZILLA 16856): D does not work on FreeBSD current $(LPAREN)what will eventually be 12$(RPAREN) due to libunwind)
$(LI $(BUGZILLA 17108): Associative array byKeyValue is unsafe)
$(LI $(BUGZILLA 17375): colliding modules detected with binutils 2.28 linker and shared libraries)
$(LI $(BUGZILLA 17431): GCBits should be @nogc to prevent deadlocks)
$(LI $(BUGZILLA 17609): core.demangle demangles delegate variables as functions)
$(LI $(BUGZILLA 17610): core.demangle shows return type of template alias parameter)
$(LI $(BUGZILLA 17611): core.demangle cannot demangle delegates with function attributes)
$(LI $(BUGZILLA 17624): typo in Fields documentation section of https://dlang.org/library/object/exception.html)
$(LI $(BUGZILLA 17665): Win64 atomicLoad for T[] cannot be cast from size_t[2])
$(LI $(BUGZILLA 17788): MSCOFF: TLS broken when linking with linker from VS2017 15.3.1)
$(LI $(BUGZILLA 17829): core.stdc.errno does not work with -betterC)
$(LI $(BUGZILLA 17851): htonl already defined in phobos64.lib)
$(LI $(BUGZILLA 17956): core.memory unittest failure $(LPAREN)possibly glibc 2.26 specific$(RPAREN))
$(LI $(BUGZILLA 18011): core.sys.condition cannot be used as shared)
$(LI $(BUGZILLA 18117): ldiv_t struct in core.stdc.stdlib -- int vs c_long expectations)
$(LI $(BUGZILLA 18240): core.stdc.wchar_ wmemset, etc. should be pure)
$(LI $(BUGZILLA 18247): core.stdc.math functions that never set errno should be pure)
$(LI $(BUGZILLA 18279): rt.util.utf does not properly reserve buffer in toUTF16/toUTF16z)
$(LI $(BUGZILLA 18300): core.demangle demangling of really long symbol fails)
$(LI $(BUGZILLA 18482): wincrypt functions should be `@nogc` `nothrow`)
$(LI $(BUGZILLA 18531): core.exception.RangeError@src/core/demangle.d$(LPAREN)216$(RPAREN): Range violation)
$(LI $(BUGZILLA 18536): Bad stack traces when building with -m32mscoff)
$(LI $(BUGZILLA 18537): Cannot pass absolute path to coverage options)
$(LI $(BUGZILLA 18547): Win32: throwing exception in fiber crashes application)
$(LI $(BUGZILLA 18643): Compiling error when combining CAS and numeric literal.)
$(LI $(BUGZILLA 18904): core.internal.string has issues with radix)
$(LI $(BUGZILLA 18932): core.internal.hash.hashOf$(LPAREN)val, seed$(RPAREN) ignores `seed` when val is a raw pointer)
$(LI $(BUGZILLA 18989): On OSX32, core.stdc.time.clock$(LPAREN)$(RPAREN) should resolve to clock$UNIX2003$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 19008): core.internal.convert.toUbyte doesn't work on enums)
$(LI $(BUGZILLA 19046): OSX: bad value for core.stdc.time.CLOCKS_PER_SEC)
$(LI $(BUGZILLA 19073): core.internal.hash should not bitwise hash representations of floating point numbers)
$(LI $(BUGZILLA 19087): `final switch` cannot be used in -betterC)
$(LI $(BUGZILLA 19090): core.internal.hash.bytesHash unit test uses incorrect test vector on BigEndian machines)
$(LI $(BUGZILLA 19092): __delete doesn't work with immutable)
$(LI $(BUGZILLA 19177): No version $(LPAREN)Solaris$(RPAREN) in druntime/src/core/stdc/time.d)
$(LI $(BUGZILLA 19204): hashOf doesn't accept SIMD vectors)
$(LI $(BUGZILLA 19250): DWARF Backtraces with very long symbol names read out of bounds when printing)
$(LI $(BUGZILLA 19262): hashOf associative array should infer nothrow)
$(LI $(BUGZILLA 19281): GC mishandles allocations >= 4GB)
$(LI $(BUGZILLA 19282): hashOf segfaults for non-null C++ objects)
$(LI $(BUGZILLA 19314): Thread object destruction may result in UB)
$(LI $(BUGZILLA 19332): hashOf fails to compile for const struct that has non-const toHash & has all fields bitwise-hashable)
$(LI $(BUGZILLA 19401): Fix bug in core.internal.traits.hasElaborateDestructor & hasElaborateCopyConstructor for struct with static array alias & for nested structs/unions)
$(LI $(BUGZILLA 19433): Don't consume --DRT-* options if rt_cmdline_enabled is false)
$(LI $(BUGZILLA 19481): Aborting from local/libphobos/libdruntime/core/sync/mutex.d$(LPAREN)95$(RPAREN) Error: pthread_mutex_init failed.)
$(LI $(BUGZILLA 19489): Null function call results in no stack trace)
$(LI $(BUGZILLA 19522): [GC] GC.query/addrOf/sizeOf fail for freed memory)
$(LI $(BUGZILLA 19554): [2.084.0] Confusing message - Warning: struct Foo has method toHash)
$(LI $(BUGZILLA 19562): core.internal.hash.hashOf array of pointers or delegates should be `@safe`)
$(LI $(BUGZILLA 19568): hashOf should not unnecessarily call a struct's fields' postblits & dtors in CTFE)
$(LI $(BUGZILLA 19571): Incorrect definition of DTM_FIRST in core.sys.windows.commctrl)
$(LI $(BUGZILLA 19582): Make core.internal.convert.toUbyte in CTFE for arrays work with reference type elements and not call postblits/dtors)
$(LI $(BUGZILLA 19593): dstrcmp with -profile causes stack overflow)
$(LI $(BUGZILLA 19723): wrong time values in GC.profileStats)
$(LI $(BUGZILLA 19810): destroy does not work for C++ classes without destructor)
$(LI $(BUGZILLA 19830): core.memory.__delete destructs arrays of structs in the wrong order)
$(LI $(BUGZILLA 19847): no GC memory above 4GB reported with --DRT-gcopt=profile:1)
$(LI $(BUGZILLA 19861): core.cpuid reports the wrong number of threads)
$(LI $(BUGZILLA 19909): core.stdc.errno missing POSIX error code on Windows)
$(LI $(BUGZILLA 20026): retrying while pthread_cond_signal/pthread_cond_broadcast return EAGAIN)
$(LI $(BUGZILLA 20049): object.destroy doesn't propagate attributes)
$(LI $(BUGZILLA 20066): Assertion on void[] does not compile with -checkaction=context)
$(LI $(BUGZILLA 20088): void[] cast unusable in betterC due to new __ArrayCast template)
$(LI $(BUGZILLA 20155): Allocating a struct with dtor on the GC heap can produce false pointers)
$(LI $(BUGZILLA 20214): GC: realloc can result in false pointers if address doesn't change)
$(LI $(BUGZILLA 20271): Handle forking in the GC)
$(LI $(BUGZILLA 20299): checkaction=context not working with temporary destructors)
$(LI $(BUGZILLA 20303): Memory leak in core.thread)
$(LI $(BUGZILLA 20315): checkaction=context fails for const$(LPAREN)void[]$(RPAREN) argument)
$(LI $(BUGZILLA 20322): checkaction=context fails for wstring/dstring arguments)
$(LI $(BUGZILLA 20323): checkaction=context fails for non-copyable arguments)
$(LI $(BUGZILLA 20346): std.uuid does not compile with checkaction=context)
$(LI $(BUGZILLA 20355): undefined identifier U in core.atomic)
$(LI $(BUGZILLA 20364): [REG2.069] changing length for typeof$(LPAREN)null$(RPAREN)[] array seg faults in _d_arraysetlengthiT$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 20440): Associative arrays with values whose opAssign doesn't return a ref don't support require function)
$(LI $(BUGZILLA 20459): Runtime arg parsing should stop at '--')
$(LI $(BUGZILLA 20468): emplace doesn't forward constructor arguments' $(LPAREN)l/r$(RPAREN)valueness)
$(LI $(BUGZILLA 20476): chainTogether leaks exception with -dip1008)
$(LI $(BUGZILLA 20497): thread with limited stackspace crashes depending on size of TLS)
$(LI $(BUGZILLA 20512): Return type of memchr should be inout$(LPAREN)void$(RPAREN)* rather than void*)
$(LI $(BUGZILLA 20513): Return type of wmemchr should be inout$(LPAREN)wchar_t$(RPAREN)* rather than wchar_t*)
$(LI $(BUGZILLA 20591): ldc doesn't print files' directories when printing stack trace)
$(LI $(BUGZILLA 20629): atomicStore does not compile for struct using -m64)
$(LI $(BUGZILLA 20731): checkaction=context fails for structs with 'alias <slice> this')
$(LI $(BUGZILLA 20750): checkaction=context segfaults for null references)
$(LI $(BUGZILLA 20757): checkaction=context prints characters as integers)
$(LI $(BUGZILLA 20760): checkaction=context doesnt print floating point numbers correctly)
$(LI $(BUGZILLA 20763): checkaction=context does not format pointers)
$(LI $(BUGZILLA 20767): [DIP1014] __move_post_blt must only recursively call itself on a struct's fields not all members)
$(LI $(BUGZILLA 20768): [DIP1014] __move_post_blt must recursively call itself on static arrays whose elements are structs or static arrays that recursively contain structs)
$(LI $(BUGZILLA 20832): Fix ioctl request for TCSETS2)
$(LI $(BUGZILLA 20852): core.sys.posix.sys.wait missing definitions on FreeBSD)
$(LI $(BUGZILLA 20910): Default unittest runner reports wrong unittest count)
$(LI $(BUGZILLA 21029): Remove __ArrayEq which the compiler no longer uses as of DMD PR #11212)
$(LI $(BUGZILLA 21055): core.stdc.stdarg is not @nogc)
$(LI $(BUGZILLA 21116): onArrayCastError is horribly unsafe)
$(LI $(BUGZILLA 21315): TypeInfo_StaticArray.swap is broken)
$(LI $(BUGZILLA 21323): $(LPAREN)64-bit Windows only$(RPAREN) core.stdcpp.vector could not have core.stdcpp.vector as element)
$(LI $(BUGZILLA 21344): core.stdcpp.string.basic_string does not implement opEquals)
$(LI $(BUGZILLA 21346): core.stdcpp.vector.vector does not implement opEquals)
$(LI $(BUGZILLA 21365): TypeInfo.swap must not allow reachable memory to be freed if interrupted by a garbage collection pass)
$(LI $(BUGZILLA 21371): core.stdcpp.allocator: _Adjust_manually_vector_aligned checks for sentinel unconditionally $(LPAREN)Windows only$(RPAREN))
$(LI $(BUGZILLA 21421): core.stdcpp.new_.cpp_delete does not work with classes)
$(LI $(BUGZILLA 21441): TypeInfo_Enum.destroy and TypeInfo_Enum.postblit not calling destroy and postblit of base type)
$(LI $(BUGZILLA 21442): Calling AA.remove from a destructor might lead to InvalidMemoryOperationError)
$(LI $(BUGZILLA 21468): Inscrutable template error when core.stdcpp.vector of a struct with a core.stdcpp.vector field is referenced before the struct's definition)
$(LI $(BUGZILLA 21484): Infinite recursion in core.memory : GC.{get,set,clr}Attr$(LPAREN)const scope void*...$(RPAREN))
$(LI $(BUGZILLA 21544):  -checkaction=context formats enum members as their base type)
$(LI $(BUGZILLA 21550): core.memory.__delete does not actually work)
$(LI $(BUGZILLA 21578): core.atomic.atomicFetchSub for pointers incorrectly calls wrong function from core.internal.atomic)
$(LI $(BUGZILLA 21631): core.atomic.cas fails to compile with const ifThis $(LPAREN)if target is a pointer$(RPAREN))
$(LI $(BUGZILLA 21666): wrong printf format specifier for `real` with -checkaction=context on Win64)
$(LI $(BUGZILLA 21701): casWeak is not implemented)
$(LI $(BUGZILLA 21764): checkaction=context doesn't work for empty tuples)
$(LI $(BUGZILLA 21857): TypeInfo_Array.compare can give wrong result when either array exceeds 2GB)
$(LI $(BUGZILLA 21919): darwin: SEGV in core.thread tests on OSX 11)
$(LI $(BUGZILLA 21983): dup leaves a partially constructed array if postblit/copy ctor throws)
$(LI $(BUGZILLA 21996):  -checkaction=context triggers InvalidMemoryOperationError in finalizer)
$(LI $(BUGZILLA 22024): hashOf does not work on enum types whose base type is a SIMD vector)
$(LI $(BUGZILLA 22026): checkaction=context: Exception thrown by toString hides assertion failures)
$(LI $(BUGZILLA 22076): hashOf$(LPAREN)S$(RPAREN) can segfault if S.toHash is forwarded via 'alias this' to a receiver which may be null)
$(LI $(BUGZILLA 22081): DWARF v5 support is utterly broken - 'illegal instruction' when throwing exceptions)
$(LI $(BUGZILLA 22085): checkaction=context doesn't support extern$(LPAREN)C++$(RPAREN) classes)
$(LI $(BUGZILLA 22107): [scope][dip1000] Can't .dup an array of structs with impure copy constructor)
$(LI $(BUGZILLA 22143): Throwable ctor doesn't increment chained exception's ref count)
$(LI $(BUGZILLA 22166): On OpenBSD and Android make core.sys.posix.arpa.inet: htonl, htons, ntohl, & ntohs work correctly on big endian architectures)
$(LI $(BUGZILLA 22167): OpenBSD core.sys.posix.semaphore: sem_t should be a pointer to an opaque struct)
$(LI $(BUGZILLA 22168): Fix non-compiling ELF32_M_INFO & ELF64_M_INFO in core.sys.*.sys.elf32 & core.sys.*.sys.elf64 for DragonFlyBSD, FreeBSD, NetBSD, & OpenBSD)
$(LI $(BUGZILLA 22218): Dynamic casts across binary boundaries can easily fail)
$(LI $(BUGZILLA 22328): Specific D types are used instead of Windows type aliases)
$(LI $(BUGZILLA 22336): core.lifetime.move doesn't work with betterC on elaborate non zero structs)
$(LI $(BUGZILLA 22440): OpenBSD: Sync sysctl.d)
$(LI $(BUGZILLA 22443): OpenBSD: Fix Fiber support by adding MAP_STACK)
$(LI $(BUGZILLA 22453): OpenBSD: Add a dummy value for AI_V4MAPPED)
$(LI $(BUGZILLA 22455): Remove useless conditional assignment of DISABLED_TESTS in posix.mak)
$(LI $(BUGZILLA 22456): OpenBSD: timer_* functions don't exist on OpenBSD)
$(LI $(BUGZILLA 22485): OpenBSD: Fix core.sys.openbsd.unistd imports)
$(LI $(BUGZILLA 22523): DRuntime options passed after -- affect current process)
$(LI $(BUGZILLA 22552): moveEmplace wipes context pointer of nested struct contained in non-nested struct)
$(LI $(BUGZILLA 22702): druntime not compliant with D spec re getLinkage)
$(LI $(BUGZILLA 22721): importC: some gnu builtins are rejected)
$(LI $(BUGZILLA 22735): __builtins.di does not implement __builtin_bswap64 correctly)
$(LI $(BUGZILLA 22741): importC: Error: bswap isn’t a template)
$(LI $(BUGZILLA 22744): ImportC: builtins defined in __builtins.di cause undefined symbol linker errors.)
$(LI $(BUGZILLA 22763): importing std.utf fails in BetterC)
$(LI $(BUGZILLA 22777): stat struct in core.sys.windows.stat assumes CRuntime_DigitalMars)
$(LI $(BUGZILLA 22779): druntime: Calling __delete with null pointer-to-struct segfaults)
$(LI $(BUGZILLA 22822): core.sys.posix.sys.stat: PPC stat_t bindings corrupt)
$(LI $(BUGZILLA 22832): Can't destroy class with overloaded opCast)
$(LI $(BUGZILLA 22843): Program hangs on full gc collect with --DRT-gcopt=fork:1 if run under valgrind/callgrind)
$(LI $(BUGZILLA 23051): OpenBSD: Build broken on 2.100.0-beta.1 due to the inout attribute no longer implying the return attribute)
$(LI $(BUGZILLA 23060): MacOS: core.sys.posix.sys.socket missing some definitions)
$(LI $(BUGZILLA 23065): importC: __builtin_expect should use c_long)
$(LI $(BUGZILLA 23067): importC: offsetof macro assumes size_t is defined)
$(LI $(BUGZILLA 23129): object.destroy doesn't consider initialize=false on D classes)
$(LI $(BUGZILLA 23228): OpenBSD: No SIGRTMIN or SIGRTMAX)
$(LI $(BUGZILLA 23302): std.algorithm.comparison.predSwitch producing SwitchError with error message as the filename)
)
$(BUGSTITLE_BUGZILLA Druntime enhancements,

$(LI $(BUGZILLA 3851): Array copy error message with no line number)
$(LI $(BUGZILLA 6649): core.sys.posix.sys.ioctl)
$(LI $(BUGZILLA 8411): core.time: No easy way to check if Duration is empty)
$(LI $(BUGZILLA 8544): Expose "cArgs" in druntime)
$(LI $(BUGZILLA 8831): core.atomic: add compare-and-swap function with other result type)
$(LI $(BUGZILLA 12891): add atomicFetchAdd and atomicFetchSub to core.atomic)
$(LI $(BUGZILLA 12964): dev_t is incorrectly defined in runtime for Solaris systems)
$(LI $(BUGZILLA 12976): ModuleInfo should be immutable on Solaris)
$(LI $(BUGZILLA 12977): lf64 definitions aren't correct on Solaris)
$(LI $(BUGZILLA 12978): struct sigaction is too small on 32-bit solaris)
$(LI $(BUGZILLA 13037): SIGRTMIN and SIGRTMAX aren't correctly defined on Solaris)
$(LI $(BUGZILLA 13143): Need backtrace support on Solaris)
$(LI $(BUGZILLA 13144): Add fenv support for Solaris)
$(LI $(BUGZILLA 13145): Need LC_ locale values for Solaris)
$(LI $(BUGZILLA 13146): Add missing function definitions from stdlib.h on Solaris)
$(LI $(BUGZILLA 13559): missing 64-bit version of array short operations)
$(LI $(BUGZILLA 13725): onInvalidMemoryOperationError et al should not be inlined)
$(LI $(BUGZILLA 13826): Move volatileLoad/Store to core.volatile when the volatile keyword is removed)
$(LI $(BUGZILLA 14007): shmctl with IPC_STAT returns wrong number of attachments. shmid_ds is defined wrong.)
$(LI $(BUGZILLA 14117): core.atomic should be @safe)
$(LI $(BUGZILLA 14385): AA should use open addressing hash)
$(LI $(BUGZILLA 14790): coverage merge should detect changed source code)
$(LI $(BUGZILLA 14892):  -profile=gc doesn't account for GC API allocations)
$(LI $(BUGZILLA 15007): core.atomic match C++11)
$(LI $(BUGZILLA 15053): Runtime.cArgs not @nogc)
$(LI $(BUGZILLA 15137): core.time: Support Duration/Duration and Duration%Duration)
$(LI $(BUGZILLA 15268): possible deadlock for Thread.getAll/Thread.opApply w/ GC.collect)
$(LI $(BUGZILLA 15628): Exceptions in fibers never caught with /SAFESEH)
$(LI $(BUGZILLA 16377): Make --DRT GC profile information available outside of GC destruction)
$(LI $(BUGZILLA 16664): core.demangle functions are not callable from @safe or pure code)
$(LI $(BUGZILLA 16797): Zero clock resolution lead to division by zero)
$(LI $(BUGZILLA 17300): Enable setting code coverage options on the command line)
$(LI $(BUGZILLA 17563): gc_inFinalizer should be public)
$(LI $(BUGZILLA 18220): Allow rt_trapexceptions to be set from the CLI)
$(LI $(BUGZILLA 18768): object.getArrayHash with custom toHash shouldn't just sum hashes of array elements)
$(LI $(BUGZILLA 18816): [betterC] Standard Streams Unlinkable)
$(LI $(BUGZILLA 18918): core.internal.hash should perform memberwise hashing of structs with references)
$(LI $(BUGZILLA 18920): core.internal.hash of array of scalars should be `@safe`)
$(LI $(BUGZILLA 18921): make core.internal.hash cater to memberwise hash chaining)
$(LI $(BUGZILLA 18923): Semaphore internal handle should be `protected` instead of `private`)
$(LI $(BUGZILLA 18924): Use addition rather than XOR for order-independent hash combination)
$(LI $(BUGZILLA 18925): core.internal.hash auto-hash for structs of scalar fields should be `@safe`)
$(LI $(BUGZILLA 18942): core.internal.hash can take advantage of alignment info on non-x86)
$(LI $(BUGZILLA 18943): core.internal.hash remove outdated special case for DMD unaligned reads)
$(LI $(BUGZILLA 18981): SIGSEGV during backtrace when debug info is compressed)
$(LI $(BUGZILLA 19009): core.internal.hash.hashOf default hash $(LPAREN)absent `toHash`$(RPAREN) should be `@nogc`)
$(LI $(BUGZILLA 19048): In core.internal.hash.hashOf reduce template bloat: remove `auto ref` where unneeded and add `const` where possible)
$(LI $(BUGZILLA 19049): object.hashOf - don't wrap a public function with an identical public function)
$(LI $(BUGZILLA 19071): core.internal.hash should have non-chained toHash overloads)
$(LI $(BUGZILLA 19072): Object.toHash and typeid$(LPAREN)void*$(RPAREN).getHash$(LPAREN)&ptr$(RPAREN) should be more varied in their low bits)
$(LI $(BUGZILLA 19075): rt.util.random.Rand48.defaultSeed should prefer RDTSC or mach_absolute_time or QueryPerformanceCounter to ctime.time)
$(LI $(BUGZILLA 19128): argument to alloca may be too large)
$(LI $(BUGZILLA 19214): Support object.destruct$(LPAREN)$(RPAREN) for efficient $(LPAREN)and correct!$(RPAREN) destruction)
$(LI $(BUGZILLA 19218): object.destroy should check for classes for static arrays)
$(LI $(BUGZILLA 19280): Remove unnecessary error checks in core.time.currSystemTick and currTime)
$(LI $(BUGZILLA 19398): Document meaning of core.atomic.MemoryOrder)
$(LI $(BUGZILLA 19414): object.__cmp$(LPAREN)T[]$(RPAREN) on big-endian architectures can use memcmp for unsigned integers of any size)
$(LI $(BUGZILLA 19416): Make core.exception.onOutOfMemoryError work in betterC)
$(LI $(BUGZILLA 19421): Make pureMalloc, etc. usable in BetterC)
$(LI $(BUGZILLA 19423): In core.stdc.errno directly link __errno on OpenBSD & NetBSD)
$(LI $(BUGZILLA 19424): Add Haiku support to core.stdc.errno)
$(LI $(BUGZILLA 19455): GC wastes too much memory)
$(LI $(BUGZILLA 19468): Improve cyclic dependency error message)
$(LI $(BUGZILLA 19524): Make core.checkedint work in betterC)
$(LI $(BUGZILLA 19924): Make core.bitop.bswap$(LPAREN)ulong$(RPAREN) work in betterC)
$(LI $(BUGZILLA 19933): MSVC: Undefined std{in,out,err} with -betterC)
$(LI $(BUGZILLA 19976): Simplify std.internal.convert.toUbyte CTFE path for float and double)
$(LI $(BUGZILLA 20104): core.atomic has no exchange function)
$(LI $(BUGZILLA 20105): core.atomic 'cas' function is incomplete)
$(LI $(BUGZILLA 20106): core.atomic : atomicFence doesn't accept MemoryOrder)
$(LI $(BUGZILLA 20107): core.atomic : Memory order is missing keys)
$(LI $(BUGZILLA 20122): core.atomic.cas discards result on failure)
$(LI $(BUGZILLA 20178): Add TypeInfo_Class/TypeInfo_Interface.isBaseOf $(LPAREN)equivalent to C#/Java isAssignableFrom$(RPAREN))
$(LI $(BUGZILLA 20550): Use fixed seeds for treaps in GC)
$(LI $(BUGZILLA 20567): GC should not start threads for parallel marking in simple programs)
$(LI $(BUGZILLA 20577): Add missing symbols related to Windows UAC)
$(LI $(BUGZILLA 20711): object.update requires the "update" callback to wastefully return a copy of the updated value)
$(LI $(BUGZILLA 20741): `dup`, `idup` for arrays plus `keys`, `values` for built-in associative arrays: if a type is known to have a postblit do not emit code for the non-postblit path and vice versa)
$(LI $(BUGZILLA 20746): Change LCG in garbage collector treap to use full 64 bits of state instead of 48)
$(LI $(BUGZILLA 20787): Add module core.sys.darwin.sys.attr with getattrlist, setattrlist, searchfs, and related definitions)
$(LI $(BUGZILLA 20844): DMD compiler should take care of data alignment, after seeing the 'cas' call)
$(LI $(BUGZILLA 20859): Add overloads of core.sync.rwmutex.ReadWriteMutex.Reader/Writer.tryLock that take a timeout duration)
$(LI $(BUGZILLA 20936): core.sync.rwmutex should have shared overloads $(LPAREN)and make it usable in @safe code$(RPAREN))
$(LI $(BUGZILLA 21005): Speed up hashOf for associative arrays)
$(LI $(BUGZILLA 21014): aa.byKeyValue, byKey, byValue very under-documented)
$(LI $(BUGZILLA 21026): add core.bitop.byteswap$(LPAREN)ushort$(RPAREN))
$(LI $(BUGZILLA 21030): Reduce template function instantiations related to array equality)
$(LI $(BUGZILLA 21070):  -profile=gc makes the program much slower)
$(LI $(BUGZILLA 21417): core.stdcpp.new_.cpp_delete unnecessarily requires destruction to be @nogc)
$(LI $(BUGZILLA 21426): `dup`, `idup` for arrays plus `keys`, `values` for associative arrays: call postblits directly instead of via TypeInfo function pointer)
$(LI $(BUGZILLA 21784): joining a detached thread results in segfault.)
$(LI $(BUGZILLA 21789): Codecov should use default umask for file permissions)
$(LI $(BUGZILLA 22169): Mark as pure core.sys.posix.string: memccpy, stpcpy, stpncpy, strnlen)
$(LI $(BUGZILLA 22378): OpenBSD: execinfo.d and unistd.d aren't being installed)
$(LI $(BUGZILLA 22395): OpenBSD: Add more OpenBSD-specific function prototypes in string.d and unistd.d)
$(LI $(BUGZILLA 22439): OpenBSD: Sync mman.d)
$(LI $(BUGZILLA 22448): OpenBSD: Add OpenBSD-specific alloc and free function prototypes from stdlib.h)
$(LI $(BUGZILLA 22454): OpenBSD: Add prototypes for pthread_np.h)
$(LI $(BUGZILLA 22457): OpenBSD: enableDwarf in opApply in runtime.d)
$(LI $(BUGZILLA 22542): Explicitly cast backtrace results to int)
$(LI $(BUGZILLA 22545): OpenBSD: Always use system backtrace)
$(LI $(BUGZILLA 22669): OpenBSD: Sync socket.d)
$(LI $(BUGZILLA 22670): Support *BSD kqueue-backed API-compatible inotify shim library)
$(LI $(BUGZILLA 22766): copyEmplace does not work with copy constructor and @disable this$(LPAREN)$(RPAREN))
$(LI $(BUGZILLA 22908): OpenBSD: Add getpwnam_shadow and getpwuid_shadow function prototypes)
$(LI $(BUGZILLA 22964): array cast message is awkwardly worded)
)
$(BUGSTITLE_BUGZILLA dlang.org bug fixes,

$(LI $(BUGZILLA 3093): Object.factory has incomplete documentation)
$(LI $(BUGZILLA 13844): core.stdc.config isn't listed in the docs)
$(LI $(BUGZILLA 14542): Table of contents in specification PDF is broken)
$(LI $(BUGZILLA 15379): "final" attribute on function parameter)
$(LI $(BUGZILLA 15476): DDOC_UNDEFINED_MACRO is undocumented)
$(LI $(BUGZILLA 17324): Floating point 1/$(LPAREN)1/x$(RPAREN) > 0 if x > 0 not generally true)
$(LI $(BUGZILLA 17514): "positive" -> "nonnegative")
$(LI $(BUGZILLA 17623): Unexpected failure of an assertion on empty strings)
$(LI $(BUGZILLA 18496): Complement expressions now actually int promote)
$(LI $(BUGZILLA 18855): Behavior of Anonymous Union is Undocumented)
$(LI $(BUGZILLA 18887): inout badly described)
$(LI $(BUGZILLA 19869): `FunctionLiteral` allows incorrect forms)
$(LI $(BUGZILLA 21086): Wrong source link for core.thread.context)
$(LI $(BUGZILLA 21188): Anonymous structs - not described)
$(LI $(BUGZILLA 21279): cast expression between integer types is not defined)
$(LI $(BUGZILLA 21717): [Oh No! Page Not Found])
$(LI $(BUGZILLA 21781): [Oh No! Page Not Found] Links to core libs from Better C)
$(LI $(BUGZILLA 22064): Missing documentation page for phobos core.builtins)
$(LI $(BUGZILLA 22237): AA.update is underspecified)
$(LI $(BUGZILLA 22835): Undocumented type specializations of is-expression)
$(LI $(BUGZILLA 23062): Function/delegate inference example does not compile)
$(LI $(BUGZILLA 23194): Add our company to the list of D firms)
$(LI $(BUGZILLA 23237): dmd 2.100.1 download link error.)
$(LI $(BUGZILLA 23276): DOC: "&gt;" instead of ">" in dmd-windows.html)
$(LI $(BUGZILLA 23296): Value Range Propagation not documented)
$(LI $(BUGZILLA 23314): Language spec falsely states that struct field invariants are checked)
$(LI $(BUGZILLA 23325): Assigning dynamic array to static array not documented)
$(LI $(BUGZILLA 23358): Link unusable due to space insertion)
)
$(BUGSTITLE_BUGZILLA dlang.org enhancements,

$(LI $(BUGZILLA 15286): is$(LPAREN)typeof$(LPAREN)symbol$(RPAREN)$(RPAREN))
$(LI $(BUGZILLA 19036): .tupleof order guarantee)
$(LI $(BUGZILLA 22141): Property .capacity is not listed in the array properties section)
$(LI $(BUGZILLA 23186): wchar/dchar do not have their endianess defined)
$(LI $(BUGZILLA 23359): Rename InOut to ParameterStorageClass)
)
$(BUGSTITLE_BUGZILLA Tools bug fixes,

$(LI $(BUGZILLA 18208): demangle RangeError@src/core/demangle.d$(LPAREN)230$(RPAREN))
)
)
$(D_CONTRIBUTORS_HEADER 299)
$(D_CONTRIBUTORS
    $(D_CONTRIBUTOR 0l-l0)
    $(D_CONTRIBUTOR 12345swordy)
    $(D_CONTRIBUTOR Adam D. Ruppe)
    $(D_CONTRIBUTOR Adam Saka)
    $(D_CONTRIBUTOR Adam Wilson)
    $(D_CONTRIBUTOR Adela Vais)
    $(D_CONTRIBUTOR adil)
    $(D_CONTRIBUTOR adilbaig)
    $(D_CONTRIBUTOR aG0aep6G)
    $(D_CONTRIBUTOR Ahmet Sait)
    $(D_CONTRIBUTOR Alex Rønne Petersen)
    $(D_CONTRIBUTOR Alexandru Caciulescu)
    $(D_CONTRIBUTOR Alexandru Jercaianu)
    $(D_CONTRIBUTOR Alexandru Militaru)
    $(D_CONTRIBUTOR Alexandru Razvan Caciulescu)
    $(D_CONTRIBUTOR Ali Akhtarzada)
    $(D_CONTRIBUTOR Amaury)
    $(D_CONTRIBUTOR Andrea Fontana)
    $(D_CONTRIBUTOR Andreas Hollandt)
    $(D_CONTRIBUTOR Andrei Alexandrescu)
    $(D_CONTRIBUTOR Andrej Mitrovic)
    $(D_CONTRIBUTOR Andrej Petrović)
    $(D_CONTRIBUTOR Andrew Edwards)
    $(D_CONTRIBUTOR Andrew Gough)
    $(D_CONTRIBUTOR Andy Smith)
    $(D_CONTRIBUTOR Anton Dutov)
    $(D_CONTRIBUTOR Arun Chandrasekaran)
    $(D_CONTRIBUTOR Asakusa Yakumo)
    $(D_CONTRIBUTOR Ast-x64)
    $(D_CONTRIBUTOR Ate Eskola)
    $(D_CONTRIBUTOR Atila Neves)
    $(D_CONTRIBUTOR BarrOff)
    $(D_CONTRIBUTOR Basile Burg)
    $(D_CONTRIBUTOR Bastiaan Veelo)
    $(D_CONTRIBUTOR BBasile)
    $(D_CONTRIBUTOR Ben Boeckel)
    $(D_CONTRIBUTOR Ben Jones)
    $(D_CONTRIBUTOR Benjamin Thaut)
    $(D_CONTRIBUTOR bistcuite)
    $(D_CONTRIBUTOR Boris Carvajal)
    $(D_CONTRIBUTOR Brad Anderson)
    $(D_CONTRIBUTOR Brad Roberts)
    $(D_CONTRIBUTOR Brian Callahan)
    $(D_CONTRIBUTOR Brian Schott)
    $(D_CONTRIBUTOR Carlos Une)
    $(D_CONTRIBUTOR Carsten Schlote)
    $(D_CONTRIBUTOR Cauterite)
    $(D_CONTRIBUTOR Chigusa0w0)
    $(D_CONTRIBUTOR chloekek)
    $(D_CONTRIBUTOR Chloé)
    $(D_CONTRIBUTOR Christian Koestlin)
    $(D_CONTRIBUTOR Clement Courbet)
    $(D_CONTRIBUTOR Cristi Cobzarenco)
    $(D_CONTRIBUTOR damianday)
    $(D_CONTRIBUTOR Dan Olson)
    $(D_CONTRIBUTOR Dan Printzell)
    $(D_CONTRIBUTOR Daniel Graczer)
    $(D_CONTRIBUTOR Daniel Green)
    $(D_CONTRIBUTOR Daniel Murphy)
    $(D_CONTRIBUTOR Danny Milosavljevic)
    $(D_CONTRIBUTOR David Dorfman)
    $(D_CONTRIBUTOR David Held)
    $(D_CONTRIBUTOR David Herberth)
    $(D_CONTRIBUTOR David Nadlinger)
    $(D_CONTRIBUTOR David Simcha)
    $(D_CONTRIBUTOR David Soria Parra)
    $(D_CONTRIBUTOR Denis Feklushkin)
    $(D_CONTRIBUTOR Denis Shelomovskij)
    $(D_CONTRIBUTOR Dennis)
    $(D_CONTRIBUTOR Dennis Korpel)
    $(D_CONTRIBUTOR deviator)
    $(D_CONTRIBUTOR Diederik de Groot)
    $(D_CONTRIBUTOR dkorpel)
    $(D_CONTRIBUTOR Dmitry Olshansky)
    $(D_CONTRIBUTOR DoctorNoobingstoneIPresume)
    $(D_CONTRIBUTOR Don Clugston)
    $(D_CONTRIBUTOR Don.Clugston)
    $(D_CONTRIBUTOR drpriver)
    $(D_CONTRIBUTOR Dylan Knutson)
    $(D_CONTRIBUTOR Dzugaru)
    $(D_CONTRIBUTOR e-y-e)
    $(D_CONTRIBUTOR Eduard Staniloiu)
    $(D_CONTRIBUTOR Elias Batek)
    $(D_CONTRIBUTOR Ellery Newcomer)
    $(D_CONTRIBUTOR Emanuele Torre)
    $(D_CONTRIBUTOR Ernesto Castellotti)
    $(D_CONTRIBUTOR Etienne Brateau)
    $(D_CONTRIBUTOR Etienne Cimon)
    $(D_CONTRIBUTOR etienne02)
    $(D_CONTRIBUTOR Eugen Wissner)
    $(D_CONTRIBUTOR Florian)
    $(D_CONTRIBUTOR Florian Brandt)
    $(D_CONTRIBUTOR Flying-Toast)
    $(D_CONTRIBUTOR Gary Willoughby)
    $(D_CONTRIBUTOR GeneralGDA)
    $(D_CONTRIBUTOR George Sapkin)
    $(D_CONTRIBUTOR Giles Bathgate)
    $(D_CONTRIBUTOR GoaLitiuM)
    $(D_CONTRIBUTOR godmyoh)
    $(D_CONTRIBUTOR Greg V)
    $(D_CONTRIBUTOR Grim Maple)
    $(D_CONTRIBUTOR Guillaume Chatelet)
    $(D_CONTRIBUTOR Guillaume Piolat)
    $(D_CONTRIBUTOR H. S. Teoh)
    $(D_CONTRIBUTOR Hara Kenji)
    $(D_CONTRIBUTOR Harry T. Vennik)
    $(D_CONTRIBUTOR hatf0)
    $(D_CONTRIBUTOR Hiroki Noda)
    $(D_CONTRIBUTOR Hiroo Ono)
    $(D_CONTRIBUTOR human)
    $(D_CONTRIBUTOR hygonsoc)
    $(D_CONTRIBUTOR Iain Buclaw)
    $(D_CONTRIBUTOR ichordev)
    $(D_CONTRIBUTOR Igor Khasilev)
    $(D_CONTRIBUTOR Igor Stepanov)
    $(D_CONTRIBUTOR Ilya Yaroshenko)
    $(D_CONTRIBUTOR Imperatorn)
    $(D_CONTRIBUTOR Ingrater)
    $(D_CONTRIBUTOR Iulia Dumitru)
    $(D_CONTRIBUTOR ivan.roubicek)
    $(D_CONTRIBUTOR Jack Stouffer)
    $(D_CONTRIBUTOR Jacob Carlborg)
    $(D_CONTRIBUTOR Jakob Bornecrantz)
    $(D_CONTRIBUTOR Jakob Øvrum)
    $(D_CONTRIBUTOR james)
    $(D_CONTRIBUTOR Jan Jurzitza)
    $(D_CONTRIBUTOR Jasmine Hegman)
    $(D_CONTRIBUTOR Jason Evans)
    $(D_CONTRIBUTOR Jason King)
    $(D_CONTRIBUTOR jdunlap)
    $(D_CONTRIBUTOR Jeremy DeHaan)
    $(D_CONTRIBUTOR Jiyuan Zhang)
    $(D_CONTRIBUTOR jmdavis)
    $(D_CONTRIBUTOR Joakim Brannstrom)
    $(D_CONTRIBUTOR Joakim Noah)
    $(D_CONTRIBUTOR Joan Piles)
    $(D_CONTRIBUTOR Joe)
    $(D_CONTRIBUTOR Johan Engelen)
    $(D_CONTRIBUTOR Johannes Bblume)
    $(D_CONTRIBUTOR Johannes Pfau)
    $(D_CONTRIBUTOR John Colvin)
    $(D_CONTRIBUTOR john-sevsk)
    $(D_CONTRIBUTOR johnch)
    $(D_CONTRIBUTOR Jonas Drewsen)
    $(D_CONTRIBUTOR Jonathan Crapuchettes)
    $(D_CONTRIBUTOR Jonathan M Davis)
    $(D_CONTRIBUTOR Jonathan Marler)
    $(D_CONTRIBUTOR Jose Armando Garcia Sancio)
    $(D_CONTRIBUTOR Joseph Rushton Wakeling)
    $(D_CONTRIBUTOR João Lourenço)
    $(D_CONTRIBUTOR jpiles)
    $(D_CONTRIBUTOR jsatellite)
    $(D_CONTRIBUTOR Kai Nacke)
    $(D_CONTRIBUTOR karita)
    $(D_CONTRIBUTOR KennyTM~)
    $(D_CONTRIBUTOR Kevin Lamonte)
    $(D_CONTRIBUTOR Laeeth Isharc)
    $(D_CONTRIBUTOR Lars T. Kyllingstad)
    $(D_CONTRIBUTOR Leandro Lucarella)
    $(D_CONTRIBUTOR LemonBoy)
    $(D_CONTRIBUTOR lempiji)
    $(D_CONTRIBUTOR lenoil98)
    $(D_CONTRIBUTOR Les De Ridder)
    $(D_CONTRIBUTOR Lionello Lunesu)
    $(D_CONTRIBUTOR Logan Capaldo)
    $(D_CONTRIBUTOR look-at-me)
    $(D_CONTRIBUTOR Lorenzo Gabriele)
    $(D_CONTRIBUTOR Lucia Mcojocaru)
    $(D_CONTRIBUTOR Lucian Danescu)
    $(D_CONTRIBUTOR lucica28)
    $(D_CONTRIBUTOR Luhrel)
    $(D_CONTRIBUTOR Luís Ferreira)
    $(D_CONTRIBUTOR Luís Marques)
    $(D_CONTRIBUTOR Manu Evans)
    $(D_CONTRIBUTOR Marco Leise)
    $(D_CONTRIBUTOR Martin Kinkelin)
    $(D_CONTRIBUTOR Martin Krejcirik)
    $(D_CONTRIBUTOR Martin Nowak)
    $(D_CONTRIBUTOR Mathias Lang)
    $(D_CONTRIBUTOR Mathis Beer)
    $(D_CONTRIBUTOR Matt Kline)
    $(D_CONTRIBUTOR Max Haughton)
    $(D_CONTRIBUTOR Max Samukha)
    $(D_CONTRIBUTOR Maxim Fomin)
    $(D_CONTRIBUTOR Maya Rashish)
    $(D_CONTRIBUTOR MetaLang)
    $(D_CONTRIBUTOR mhh)
    $(D_CONTRIBUTOR Michel Fortin)
    $(D_CONTRIBUTOR Mihails Strasuns)
    $(D_CONTRIBUTOR Mike Franklin)
    $(D_CONTRIBUTOR Mike Parker)
    $(D_CONTRIBUTOR MoGu)
    $(D_CONTRIBUTOR monarchdodra)
    $(D_CONTRIBUTOR MoonlightSentinel)
    $(D_CONTRIBUTOR Moritz Maxeiner)
    $(D_CONTRIBUTOR Márcio Martins)
    $(D_CONTRIBUTOR Nathan Sashihara)
    $(D_CONTRIBUTOR Nemanja Boric)
    $(D_CONTRIBUTOR Nicholas Wilson)
    $(D_CONTRIBUTOR Nick Sabalausky)
    $(D_CONTRIBUTOR Nick Treleaven)
    $(D_CONTRIBUTOR Nicolas F)
    $(D_CONTRIBUTOR Nikolay Tolstokulakov)
    $(D_CONTRIBUTOR Nils Boßung)
    $(D_CONTRIBUTOR Nils Lankila)
    $(D_CONTRIBUTOR nmiculinic)
    $(D_CONTRIBUTOR nordlow)
    $(D_CONTRIBUTOR o3o)
    $(D_CONTRIBUTOR Oleg Nykytenko)
    $(D_CONTRIBUTOR onyx)
    $(D_CONTRIBUTOR Orvid King)
    $(D_CONTRIBUTOR Paul Backus)
    $(D_CONTRIBUTOR Paul O'Neil)
    $(D_CONTRIBUTOR Per Nordlöw)
    $(D_CONTRIBUTOR Petar Kirov)
    $(D_CONTRIBUTOR Peter Alexander)
    $(D_CONTRIBUTOR Philpax)
    $(D_CONTRIBUTOR Puneet Goel)
    $(D_CONTRIBUTOR qchikara)
    $(D_CONTRIBUTOR Quirin F. Schroll)
    $(D_CONTRIBUTOR Radu Racariu)
    $(D_CONTRIBUTOR Rainer Schuetze)
    $(D_CONTRIBUTOR Rasmus Thomsen)
    $(D_CONTRIBUTOR Razvan Nitu)
    $(D_CONTRIBUTOR Richard Andrew Cattermole)
    $(D_CONTRIBUTOR Richard Manthorpe)
    $(D_CONTRIBUTOR Richard Webb)
    $(D_CONTRIBUTOR Robert Blake Anderton)
    $(D_CONTRIBUTOR Robert burner Schadek)
    $(D_CONTRIBUTOR Robert Jacques)
    $(D_CONTRIBUTOR Robert Klotzner)
    $(D_CONTRIBUTOR Robert Schadek)
    $(D_CONTRIBUTOR Roman Chistokhodov)
    $(D_CONTRIBUTOR Roy Margalit)
    $(D_CONTRIBUTOR rracariu)
    $(D_CONTRIBUTOR rsw0x)
    $(D_CONTRIBUTOR Ryan Boggs)
    $(D_CONTRIBUTOR ryuukk)
    $(D_CONTRIBUTOR Safety0ff)
    $(D_CONTRIBUTOR Sanjay S)
    $(D_CONTRIBUTOR scott)
    $(D_CONTRIBUTOR Sean Kelly)
    $(D_CONTRIBUTOR Sebastiaan Koppe)
    $(D_CONTRIBUTOR Sebastian Wilzbach)
    $(D_CONTRIBUTOR Sergei Akhmatdinov)
    $(D_CONTRIBUTOR Shigeki Karita)
    $(D_CONTRIBUTOR shoo)
    $(D_CONTRIBUTOR Simen Kjærås)
    $(D_CONTRIBUTOR Simon Harris)
    $(D_CONTRIBUTOR sinkuu)
    $(D_CONTRIBUTOR skl131313)
    $(D_CONTRIBUTOR Sophie Kirschner)
    $(D_CONTRIBUTOR sprinkle131313)
    $(D_CONTRIBUTOR Stanislav Blinov)
    $(D_CONTRIBUTOR Stefan Koch)
    $(D_CONTRIBUTOR Stefan Rohe)
    $(D_CONTRIBUTOR Stefanos Baziotis)
    $(D_CONTRIBUTOR stefanos-baziotis)
    $(D_CONTRIBUTOR Steven Dwy)
    $(D_CONTRIBUTOR Steven Schveighoffer)
    $(D_CONTRIBUTOR Su)
    $(D_CONTRIBUTOR sumitraja)
    $(D_CONTRIBUTOR Sönke Ludwig)
    $(D_CONTRIBUTOR tcak)
    $(D_CONTRIBUTOR Temtaime)
    $(D_CONTRIBUTOR teo)
    $(D_CONTRIBUTOR Teodor Dutu)
    $(D_CONTRIBUTOR Tero Hänninen)
    $(D_CONTRIBUTOR thaven)
    $(D_CONTRIBUTOR Thayne McCombs)
    $(D_CONTRIBUTOR the-horo)
    $(D_CONTRIBUTOR TheGag96)
    $(D_CONTRIBUTOR Thomas Mader)
    $(D_CONTRIBUTOR Tim Schendekehl)
    $(D_CONTRIBUTOR Timothee Cour)
    $(D_CONTRIBUTOR Tolstokulakov Nikolay)
    $(D_CONTRIBUTOR Tomer Filiba)
    $(D_CONTRIBUTOR Tomoya Tanjo)
    $(D_CONTRIBUTOR Tomáš Chaloupka)
    $(D_CONTRIBUTOR Tony Tung)
    $(D_CONTRIBUTOR tsbockman)
    $(D_CONTRIBUTOR tynuk)
    $(D_CONTRIBUTOR unknown)
    $(D_CONTRIBUTOR vali0901)
    $(D_CONTRIBUTOR Vladimir Panteleev)
    $(D_CONTRIBUTOR w0rp)
    $(D_CONTRIBUTOR Walter Bright)
    $(D_CONTRIBUTOR Walter Waldron)
    $(D_CONTRIBUTOR wazar)
    $(D_CONTRIBUTOR wolframw)
    $(D_CONTRIBUTOR Yao Gómez)
    $(D_CONTRIBUTOR Yazan Dabain)
    $(D_CONTRIBUTOR yglukhov)
    $(D_CONTRIBUTOR yori)
    $(D_CONTRIBUTOR Yuxuan Shui)
    $(D_CONTRIBUTOR Ömer Faruk Irmak)
    $(D_CONTRIBUTOR Ömer Faruk IRMAK)
    $(D_CONTRIBUTOR Михаил Страшун)
    $(D_CONTRIBUTOR سليمان السهمي (Suleyman Sahmi))
)
$(D_CONTRIBUTORS_FOOTER)
$(CHANGELOG_NAV_INJECT)

Macros:
    VER=2.101.0
    TITLE=Change Log: $(VER)
