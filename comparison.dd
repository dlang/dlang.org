Ddoc

$(COMMUNITY D Concepts Overview,

$(P Navigate D's implementation of a few key programming language concepts.)

$(ITEMIZE
        $(A spec/garbage.html, Garbage Collection),
        Functions
        $(ITEMIZE
                $(A spec/type.html#delegates, Function Delegates),
                $(A spec/function.html#function-overloading, Function Overloading),
                $(A spec/function.html#parameters, `out` parameters for functions),
                $(A spec/function.html#nested, Nested functions),
                $(A spec/expression.html#FunctionLiteral, Function literals),
                $(A spec/function.html#closures, Closures),
                $(A spec/function.html#variadic, Typesafe variadic arguments),
                $(A lazy-evaluation.html, Lazy function argument evaluation),
                $(A spec/function.html#interpretation, Compile time function evaluation),
                $(A spec/function.html#pseudo-member, Uniform Function Call Syntax),
                $(A spec/attribute.html#UserDefinedAttribute, User-Defined Attributes)
        ),
        Arrays
        $(ITEMIZE
                $(A spec/arrays.html, Lightweight arrays),
                $(A spec/arrays.html#resize, Resizeable arrays),
                $(A spec/arrays.html#strings, Built-in strings),
                $(A spec/arrays.html#slicing, Array slicing),
                $(A spec/arrays.html#bounds, Array bounds checking),
                $(A spec/expression.html#ArrayLiteral, Array literals),
                $(A spec/arrays.html#associative, Associative arrays),
                $(A spec/statement.html#SwitchStatement, String switches),
                $(A spec/declaration.html#alias, Aliases)
        ),
        OOP
        $(ITEMIZE
                Object Orientation,
                $(A spec/interface.html, Interfaces),
                Single inheritance of implementation/multiple inheritance of interfaces,
                $(A spec/operatoroverloading.html, Operator overloading),
                $(A spec/module.html, Modules),
                No built-in dynamic class loading,
                $(A spec/class.html#nested, Nested classes),
                $(A spec/class.html#nested, Inner (adaptor) classes),
                $(A spec/function.html, Covariant return types),
                $(A spec/property.html#classproperties, Properties)
        ),
        Performance
        $(ITEMIZE
                $(A spec/iasm.html, Inline assembler),
                Direct access to hardware,
                $(A spec/struct.html, Lightweight objects),
                $(A https://wiki.dlang.org/Memory_Management, Explicit memory allocation control),
                Independent of VM,
                Direct native code gen
        ),
        $(A spec/template.html, Generic Programming)
        $(ITEMIZE
                Class Templates,
                $(A spec/template.html#function-templates, Function Templates),
                Implicit Function Template Instantiation,
                Partial and Explicit Specialization,
                Value Template Parameters,
                Template Template Parameters,
                $(A articles/variadic-function-templates.html, Variadic Template Parameters),
                $(A concepts.html, Template Constraints),
                $(A spec/template-mixin.html, Mixins),
                $(A spec/version.html#staticif, static if),
                $(A spec/expression.html#IsExpression, expressions),
                $(A spec/type.html#Typeof, typeof),
                $(A spec/statement.html#ForeachStatement, foreach),
                $(A spec/declaration.html#AutoDeclaration, Implicit Type Inference)
        ),
        Reliability
        $(ITEMIZE
                $(A spec/contracts.html, Contract Programming),
                $(A spec/unittest.html, Unit testing),
                $(A spec/module.html#staticorder, Static construction order),
                $(A spec/statement.html#DeclarationStatement, Guaranteed initialization),
                $(A https://wiki.dlang.org/Memory_Management#RAII_.28Resource_Acquisition_Is_Initialization.29, RAII (automatic destructors)),
                $(A spec/statement.html#TryStatement, Exception handling),
                $(A spec/statement.html#ScopeGuardStatement, Scope guards),
                $(A spec/statement.html#TryStatement, try-catch-finally blocks),
                $(A spec/statement.html#SynchronizedStatement, Thread synchronization primitives)
        ),
        Compatibility
        $(ITEMIZE
        C-like syntax,
                $(A spec/enum.html, Enumerated types),
                $(A spec/type.html, Support for all C types),
                $(A spec/type.html, 80 bit floating point),
                $(A phobos/std_complex.html, Complex and Imaginary),
                $(A spec/attribute.html#linkage, Direct access to C),
                Use existing debuggers,
                $(A spec/attribute.html#align, Struct member alignment control),
                Generates standard object files,
                $(A pretod.html, Obviates need for a macro text preprocessor)
        ),
        Other
        $(ITEMIZE
                $(A spec/version.html, Conditional compilation),
                $(A spec/lex.html, Unicode source text),
                $(A spec/ddoc.html, Documentation comments)
        )
)

)

Macros:
        TITLE=Features Overview
